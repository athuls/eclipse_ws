// **********************************************************************
//
// Copyright (c) 2003-2009 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.3.1

package edu.umich.senstore;

public final class SenStoreMngrPrxHelper extends Ice.ObjectPrxHelperBase implements SenStoreMngrPrx
{
    public long
    addAccelMeas(AccelMeasFields fields)
    {
        return addAccelMeas(fields, null, false);
    }

    public long
    addAccelMeas(AccelMeasFields fields, java.util.Map<String, String> __ctx)
    {
        return addAccelMeas(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addAccelMeas(AccelMeasFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addAccelMeas");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addAccelMeas(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addAccelMeasList(AccelMeasFields[] fieldsList)
    {
        return addAccelMeasList(fieldsList, null, false);
    }

    public long[]
    addAccelMeasList(AccelMeasFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addAccelMeasList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addAccelMeasList(AccelMeasFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addAccelMeasList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addAccelMeasList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addCycle(CycleFields fields)
    {
        return addCycle(fields, null, false);
    }

    public long
    addCycle(CycleFields fields, java.util.Map<String, String> __ctx)
    {
        return addCycle(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addCycle(CycleFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addCycle");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addCycle(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addCycleList(CycleFields[] fieldsList)
    {
        return addCycleList(fieldsList, null, false);
    }

    public long[]
    addCycleList(CycleFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addCycleList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addCycleList(CycleFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addCycleList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addCycleList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addDaqUnit(DaqUnitFields fields)
    {
        return addDaqUnit(fields, null, false);
    }

    public long
    addDaqUnit(DaqUnitFields fields, java.util.Map<String, String> __ctx)
    {
        return addDaqUnit(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addDaqUnit(DaqUnitFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDaqUnit");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addDaqUnit(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addDaqUnitChannel(DaqUnitChannelFields fields)
    {
        return addDaqUnitChannel(fields, null, false);
    }

    public long
    addDaqUnitChannel(DaqUnitChannelFields fields, java.util.Map<String, String> __ctx)
    {
        return addDaqUnitChannel(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addDaqUnitChannel(DaqUnitChannelFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDaqUnitChannel");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addDaqUnitChannel(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addDaqUnitChannelData(DaqUnitChannelDataFields fields)
    {
        return addDaqUnitChannelData(fields, null, false);
    }

    public long
    addDaqUnitChannelData(DaqUnitChannelDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addDaqUnitChannelData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addDaqUnitChannelData(DaqUnitChannelDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDaqUnitChannelData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addDaqUnitChannelData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addDaqUnitChannelDataList(DaqUnitChannelDataFields[] fieldsList)
    {
        return addDaqUnitChannelDataList(fieldsList, null, false);
    }

    public long[]
    addDaqUnitChannelDataList(DaqUnitChannelDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addDaqUnitChannelDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addDaqUnitChannelDataList(DaqUnitChannelDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDaqUnitChannelDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addDaqUnitChannelDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addDaqUnitChannelList(DaqUnitChannelFields[] fieldsList)
    {
        return addDaqUnitChannelList(fieldsList, null, false);
    }

    public long[]
    addDaqUnitChannelList(DaqUnitChannelFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addDaqUnitChannelList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addDaqUnitChannelList(DaqUnitChannelFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDaqUnitChannelList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addDaqUnitChannelList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addDaqUnitList(DaqUnitFields[] fieldsList)
    {
        return addDaqUnitList(fieldsList, null, false);
    }

    public long[]
    addDaqUnitList(DaqUnitFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addDaqUnitList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addDaqUnitList(DaqUnitFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDaqUnitList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addDaqUnitList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addExperiment(ExperimentFields fields)
    {
        return addExperiment(fields, null, false);
    }

    public long
    addExperiment(ExperimentFields fields, java.util.Map<String, String> __ctx)
    {
        return addExperiment(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addExperiment(ExperimentFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addExperiment");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addExperiment(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addExperimentList(ExperimentFields[] fieldsList)
    {
        return addExperimentList(fieldsList, null, false);
    }

    public long[]
    addExperimentList(ExperimentFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addExperimentList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addExperimentList(ExperimentFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addExperimentList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addExperimentList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addExperimentStructureData(ExperimentStructureDataFields fields)
    {
        return addExperimentStructureData(fields, null, false);
    }

    public long
    addExperimentStructureData(ExperimentStructureDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addExperimentStructureData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addExperimentStructureData(ExperimentStructureDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addExperimentStructureData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addExperimentStructureData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addExperimentStructureDataList(ExperimentStructureDataFields[] fieldsList)
    {
        return addExperimentStructureDataList(fieldsList, null, false);
    }

    public long[]
    addExperimentStructureDataList(ExperimentStructureDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addExperimentStructureDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addExperimentStructureDataList(ExperimentStructureDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addExperimentStructureDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addExperimentStructureDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMAppliedConcentratedLoad(FEMAppliedConcentratedLoadFields fields)
    {
        return addFEMAppliedConcentratedLoad(fields, null, false);
    }

    public long
    addFEMAppliedConcentratedLoad(FEMAppliedConcentratedLoadFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMAppliedConcentratedLoad(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMAppliedConcentratedLoad(FEMAppliedConcentratedLoadFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAppliedConcentratedLoad");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAppliedConcentratedLoad(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMAppliedConcentratedLoadList(FEMAppliedConcentratedLoadFields[] fieldsList)
    {
        return addFEMAppliedConcentratedLoadList(fieldsList, null, false);
    }

    public long[]
    addFEMAppliedConcentratedLoadList(FEMAppliedConcentratedLoadFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMAppliedConcentratedLoadList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMAppliedConcentratedLoadList(FEMAppliedConcentratedLoadFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAppliedConcentratedLoadList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAppliedConcentratedLoadList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMAppliedDisplacement(FEMAppliedDisplacementFields fields)
    {
        return addFEMAppliedDisplacement(fields, null, false);
    }

    public long
    addFEMAppliedDisplacement(FEMAppliedDisplacementFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMAppliedDisplacement(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMAppliedDisplacement(FEMAppliedDisplacementFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAppliedDisplacement");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAppliedDisplacement(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMAppliedDisplacementList(FEMAppliedDisplacementFields[] fieldsList)
    {
        return addFEMAppliedDisplacementList(fieldsList, null, false);
    }

    public long[]
    addFEMAppliedDisplacementList(FEMAppliedDisplacementFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMAppliedDisplacementList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMAppliedDisplacementList(FEMAppliedDisplacementFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAppliedDisplacementList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAppliedDisplacementList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMAppliedLoads(FEMAppliedLoadsFields fields)
    {
        return addFEMAppliedLoads(fields, null, false);
    }

    public long
    addFEMAppliedLoads(FEMAppliedLoadsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMAppliedLoads(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMAppliedLoads(FEMAppliedLoadsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAppliedLoads");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAppliedLoads(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMAppliedLoadsList(FEMAppliedLoadsFields[] fieldsList)
    {
        return addFEMAppliedLoadsList(fieldsList, null, false);
    }

    public long[]
    addFEMAppliedLoadsList(FEMAppliedLoadsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMAppliedLoadsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMAppliedLoadsList(FEMAppliedLoadsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAppliedLoadsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAppliedLoadsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMAppliedTemperature(FEMAppliedTemperatureFields fields)
    {
        return addFEMAppliedTemperature(fields, null, false);
    }

    public long
    addFEMAppliedTemperature(FEMAppliedTemperatureFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMAppliedTemperature(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMAppliedTemperature(FEMAppliedTemperatureFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAppliedTemperature");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAppliedTemperature(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMAppliedTemperatureList(FEMAppliedTemperatureFields[] fieldsList)
    {
        return addFEMAppliedTemperatureList(fieldsList, null, false);
    }

    public long[]
    addFEMAppliedTemperatureList(FEMAppliedTemperatureFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMAppliedTemperatureList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMAppliedTemperatureList(FEMAppliedTemperatureFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAppliedTemperatureList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAppliedTemperatureList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMAxesNode(FEMAxesNodeFields fields)
    {
        return addFEMAxesNode(fields, null, false);
    }

    public long
    addFEMAxesNode(FEMAxesNodeFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMAxesNode(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMAxesNode(FEMAxesNodeFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAxesNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAxesNode(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMAxesNodeList(FEMAxesNodeFields[] fieldsList)
    {
        return addFEMAxesNodeList(fieldsList, null, false);
    }

    public long[]
    addFEMAxesNodeList(FEMAxesNodeFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMAxesNodeList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMAxesNodeList(FEMAxesNodeFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMAxesNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMAxesNodeList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMBeam(FEMBeamFields fields)
    {
        return addFEMBeam(fields, null, false);
    }

    public long
    addFEMBeam(FEMBeamFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMBeam(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMBeam(FEMBeamFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMBeam");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMBeam(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMBeamList(FEMBeamFields[] fieldsList)
    {
        return addFEMBeamList(fieldsList, null, false);
    }

    public long[]
    addFEMBeamList(FEMBeamFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMBeamList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMBeamList(FEMBeamFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMBeamList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMBeamList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMBeamLoad(FEMBeamLoadFields fields)
    {
        return addFEMBeamLoad(fields, null, false);
    }

    public long
    addFEMBeamLoad(FEMBeamLoadFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMBeamLoad(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMBeamLoad(FEMBeamLoadFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMBeamLoad");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMBeamLoad(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMBeamLoadList(FEMBeamLoadFields[] fieldsList)
    {
        return addFEMBeamLoadList(fieldsList, null, false);
    }

    public long[]
    addFEMBeamLoadList(FEMBeamLoadFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMBeamLoadList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMBeamLoadList(FEMBeamLoadFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMBeamLoadList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMBeamLoadList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMBeamNode(FEMBeamNodeFields fields)
    {
        return addFEMBeamNode(fields, null, false);
    }

    public long
    addFEMBeamNode(FEMBeamNodeFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMBeamNode(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMBeamNode(FEMBeamNodeFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMBeamNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMBeamNode(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMBeamNodeList(FEMBeamNodeFields[] fieldsList)
    {
        return addFEMBeamNodeList(fieldsList, null, false);
    }

    public long[]
    addFEMBeamNodeList(FEMBeamNodeFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMBeamNodeList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMBeamNodeList(FEMBeamNodeFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMBeamNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMBeamNodeList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMBoundary(FEMBoundaryFields fields)
    {
        return addFEMBoundary(fields, null, false);
    }

    public long
    addFEMBoundary(FEMBoundaryFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMBoundary(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMBoundary(FEMBoundaryFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMBoundary");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMBoundary(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMBoundaryList(FEMBoundaryFields[] fieldsList)
    {
        return addFEMBoundaryList(fieldsList, null, false);
    }

    public long[]
    addFEMBoundaryList(FEMBoundaryFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMBoundaryList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMBoundaryList(FEMBoundaryFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMBoundaryList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMBoundaryList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMConstraintCoef(FEMConstraintCoefFields fields)
    {
        return addFEMConstraintCoef(fields, null, false);
    }

    public long
    addFEMConstraintCoef(FEMConstraintCoefFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMConstraintCoef(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMConstraintCoef(FEMConstraintCoefFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMConstraintCoef");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMConstraintCoef(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMConstraintCoefList(FEMConstraintCoefFields[] fieldsList)
    {
        return addFEMConstraintCoefList(fieldsList, null, false);
    }

    public long[]
    addFEMConstraintCoefList(FEMConstraintCoefFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMConstraintCoefList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMConstraintCoefList(FEMConstraintCoefFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMConstraintCoefList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMConstraintCoefList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMConstraints(FEMConstraintsFields fields)
    {
        return addFEMConstraints(fields, null, false);
    }

    public long
    addFEMConstraints(FEMConstraintsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMConstraints(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMConstraints(FEMConstraintsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMConstraints");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMConstraints(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMConstraintsList(FEMConstraintsFields[] fieldsList)
    {
        return addFEMConstraintsList(fieldsList, null, false);
    }

    public long[]
    addFEMConstraintsList(FEMConstraintsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMConstraintsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMConstraintsList(FEMConstraintsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMConstraintsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMConstraintsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMContactGroup3(FEMContactGroup3Fields fields)
    {
        return addFEMContactGroup3(fields, null, false);
    }

    public long
    addFEMContactGroup3(FEMContactGroup3Fields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMContactGroup3(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMContactGroup3(FEMContactGroup3Fields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMContactGroup3");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMContactGroup3(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMContactGroup3List(FEMContactGroup3Fields[] fieldsList)
    {
        return addFEMContactGroup3List(fieldsList, null, false);
    }

    public long[]
    addFEMContactGroup3List(FEMContactGroup3Fields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMContactGroup3List(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMContactGroup3List(FEMContactGroup3Fields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMContactGroup3List");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMContactGroup3List(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMContactPairs(FEMContactPairsFields fields)
    {
        return addFEMContactPairs(fields, null, false);
    }

    public long
    addFEMContactPairs(FEMContactPairsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMContactPairs(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMContactPairs(FEMContactPairsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMContactPairs");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMContactPairs(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMContactPairsList(FEMContactPairsFields[] fieldsList)
    {
        return addFEMContactPairsList(fieldsList, null, false);
    }

    public long[]
    addFEMContactPairsList(FEMContactPairsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMContactPairsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMContactPairsList(FEMContactPairsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMContactPairsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMContactPairsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMContactSurface(FEMContactSurfaceFields fields)
    {
        return addFEMContactSurface(fields, null, false);
    }

    public long
    addFEMContactSurface(FEMContactSurfaceFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMContactSurface(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMContactSurface(FEMContactSurfaceFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMContactSurface");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMContactSurface(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMContactSurfaceList(FEMContactSurfaceFields[] fieldsList)
    {
        return addFEMContactSurfaceList(fieldsList, null, false);
    }

    public long[]
    addFEMContactSurfaceList(FEMContactSurfaceFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMContactSurfaceList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMContactSurfaceList(FEMContactSurfaceFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMContactSurfaceList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMContactSurfaceList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMCoordSystem(FEMCoordSystemFields fields)
    {
        return addFEMCoordSystem(fields, null, false);
    }

    public long
    addFEMCoordSystem(FEMCoordSystemFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMCoordSystem(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMCoordSystem(FEMCoordSystemFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMCoordSystem");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMCoordSystem(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMCoordSystemList(FEMCoordSystemFields[] fieldsList)
    {
        return addFEMCoordSystemList(fieldsList, null, false);
    }

    public long[]
    addFEMCoordSystemList(FEMCoordSystemFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMCoordSystemList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMCoordSystemList(FEMCoordSystemFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMCoordSystemList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMCoordSystemList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMCrossSections(FEMCrossSectionsFields fields)
    {
        return addFEMCrossSections(fields, null, false);
    }

    public long
    addFEMCrossSections(FEMCrossSectionsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMCrossSections(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMCrossSections(FEMCrossSectionsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMCrossSections");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMCrossSections(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMCrossSectionsList(FEMCrossSectionsFields[] fieldsList)
    {
        return addFEMCrossSectionsList(fieldsList, null, false);
    }

    public long[]
    addFEMCrossSectionsList(FEMCrossSectionsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMCrossSectionsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMCrossSectionsList(FEMCrossSectionsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMCrossSectionsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMCrossSectionsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMCurvMomentData(FEMCurvMomentDataFields fields)
    {
        return addFEMCurvMomentData(fields, null, false);
    }

    public long
    addFEMCurvMomentData(FEMCurvMomentDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMCurvMomentData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMCurvMomentData(FEMCurvMomentDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMCurvMomentData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMCurvMomentData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMCurvMomentDataList(FEMCurvMomentDataFields[] fieldsList)
    {
        return addFEMCurvMomentDataList(fieldsList, null, false);
    }

    public long[]
    addFEMCurvMomentDataList(FEMCurvMomentDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMCurvMomentDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMCurvMomentDataList(FEMCurvMomentDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMCurvMomentDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMCurvMomentDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMDamping(FEMDampingFields fields)
    {
        return addFEMDamping(fields, null, false);
    }

    public long
    addFEMDamping(FEMDampingFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMDamping(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMDamping(FEMDampingFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMDamping");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMDamping(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMDampingList(FEMDampingFields[] fieldsList)
    {
        return addFEMDampingList(fieldsList, null, false);
    }

    public long[]
    addFEMDampingList(FEMDampingFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMDampingList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMDampingList(FEMDampingFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMDampingList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMDampingList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMDof(FEMDofFields fields)
    {
        return addFEMDof(fields, null, false);
    }

    public long
    addFEMDof(FEMDofFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMDof(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMDof(FEMDofFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMDof");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMDof(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMDofList(FEMDofFields[] fieldsList)
    {
        return addFEMDofList(fieldsList, null, false);
    }

    public long[]
    addFEMDofList(FEMDofFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMDofList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMDofList(FEMDofFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMDofList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMDofList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMElasticMaterial(FEMElasticMaterialFields fields)
    {
        return addFEMElasticMaterial(fields, null, false);
    }

    public long
    addFEMElasticMaterial(FEMElasticMaterialFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMElasticMaterial(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMElasticMaterial(FEMElasticMaterialFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMElasticMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMElasticMaterial(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMElasticMaterialList(FEMElasticMaterialFields[] fieldsList)
    {
        return addFEMElasticMaterialList(fieldsList, null, false);
    }

    public long[]
    addFEMElasticMaterialList(FEMElasticMaterialFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMElasticMaterialList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMElasticMaterialList(FEMElasticMaterialFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMElasticMaterialList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMElasticMaterialList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMEndreleases(FEMEndreleasesFields fields)
    {
        return addFEMEndreleases(fields, null, false);
    }

    public long
    addFEMEndreleases(FEMEndreleasesFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMEndreleases(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMEndreleases(FEMEndreleasesFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMEndreleases");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMEndreleases(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMEndreleasesList(FEMEndreleasesFields[] fieldsList)
    {
        return addFEMEndreleasesList(fieldsList, null, false);
    }

    public long[]
    addFEMEndreleasesList(FEMEndreleasesFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMEndreleasesList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMEndreleasesList(FEMEndreleasesFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMEndreleasesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMEndreleasesList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMForceStrainData(FEMForceStrainDataFields fields)
    {
        return addFEMForceStrainData(fields, null, false);
    }

    public long
    addFEMForceStrainData(FEMForceStrainDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMForceStrainData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMForceStrainData(FEMForceStrainDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMForceStrainData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMForceStrainData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMForceStrainDataList(FEMForceStrainDataFields[] fieldsList)
    {
        return addFEMForceStrainDataList(fieldsList, null, false);
    }

    public long[]
    addFEMForceStrainDataList(FEMForceStrainDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMForceStrainDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMForceStrainDataList(FEMForceStrainDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMForceStrainDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMForceStrainDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMGeneral(FEMGeneralFields fields)
    {
        return addFEMGeneral(fields, null, false);
    }

    public long
    addFEMGeneral(FEMGeneralFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMGeneral(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMGeneral(FEMGeneralFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGeneral");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGeneral(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMGeneralGroup(FEMGeneralGroupFields fields)
    {
        return addFEMGeneralGroup(fields, null, false);
    }

    public long
    addFEMGeneralGroup(FEMGeneralGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMGeneralGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMGeneralGroup(FEMGeneralGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGeneralGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGeneralGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMGeneralGroupList(FEMGeneralGroupFields[] fieldsList)
    {
        return addFEMGeneralGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMGeneralGroupList(FEMGeneralGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMGeneralGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMGeneralGroupList(FEMGeneralGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGeneralGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGeneralGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMGeneralList(FEMGeneralFields[] fieldsList)
    {
        return addFEMGeneralList(fieldsList, null, false);
    }

    public long[]
    addFEMGeneralList(FEMGeneralFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMGeneralList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMGeneralList(FEMGeneralFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGeneralList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGeneralList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMGeneralNode(FEMGeneralNodeFields fields)
    {
        return addFEMGeneralNode(fields, null, false);
    }

    public long
    addFEMGeneralNode(FEMGeneralNodeFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMGeneralNode(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMGeneralNode(FEMGeneralNodeFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGeneralNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGeneralNode(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMGeneralNodeList(FEMGeneralNodeFields[] fieldsList)
    {
        return addFEMGeneralNodeList(fieldsList, null, false);
    }

    public long[]
    addFEMGeneralNodeList(FEMGeneralNodeFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMGeneralNodeList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMGeneralNodeList(FEMGeneralNodeFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGeneralNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGeneralNodeList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMGroundMotionRecord(FEMGroundMotionRecordFields fields)
    {
        return addFEMGroundMotionRecord(fields, null, false);
    }

    public long
    addFEMGroundMotionRecord(FEMGroundMotionRecordFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMGroundMotionRecord(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMGroundMotionRecord(FEMGroundMotionRecordFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGroundMotionRecord");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGroundMotionRecord(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMGroundMotionRecordList(FEMGroundMotionRecordFields[] fieldsList)
    {
        return addFEMGroundMotionRecordList(fieldsList, null, false);
    }

    public long[]
    addFEMGroundMotionRecordList(FEMGroundMotionRecordFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMGroundMotionRecordList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMGroundMotionRecordList(FEMGroundMotionRecordFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGroundMotionRecordList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGroundMotionRecordList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMGroup(FEMGroupFields fields)
    {
        return addFEMGroup(fields, null, false);
    }

    public long
    addFEMGroup(FEMGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMGroup(FEMGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMGroupList(FEMGroupFields[] fieldsList)
    {
        return addFEMGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMGroupList(FEMGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMGroupList(FEMGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMInitialTemperature(FEMInitialTemperatureFields fields)
    {
        return addFEMInitialTemperature(fields, null, false);
    }

    public long
    addFEMInitialTemperature(FEMInitialTemperatureFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMInitialTemperature(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMInitialTemperature(FEMInitialTemperatureFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMInitialTemperature");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMInitialTemperature(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMInitialTemperatureList(FEMInitialTemperatureFields[] fieldsList)
    {
        return addFEMInitialTemperatureList(fieldsList, null, false);
    }

    public long[]
    addFEMInitialTemperatureList(FEMInitialTemperatureFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMInitialTemperatureList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMInitialTemperatureList(FEMInitialTemperatureFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMInitialTemperatureList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMInitialTemperatureList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMIsoBeam(FEMIsoBeamFields fields)
    {
        return addFEMIsoBeam(fields, null, false);
    }

    public long
    addFEMIsoBeam(FEMIsoBeamFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMIsoBeam(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMIsoBeam(FEMIsoBeamFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMIsoBeam");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMIsoBeam(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMIsoBeamGroup(FEMIsoBeamGroupFields fields)
    {
        return addFEMIsoBeamGroup(fields, null, false);
    }

    public long
    addFEMIsoBeamGroup(FEMIsoBeamGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMIsoBeamGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMIsoBeamGroup(FEMIsoBeamGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMIsoBeamGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMIsoBeamGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMIsoBeamGroupList(FEMIsoBeamGroupFields[] fieldsList)
    {
        return addFEMIsoBeamGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMIsoBeamGroupList(FEMIsoBeamGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMIsoBeamGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMIsoBeamGroupList(FEMIsoBeamGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMIsoBeamGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMIsoBeamGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMIsoBeamList(FEMIsoBeamFields[] fieldsList)
    {
        return addFEMIsoBeamList(fieldsList, null, false);
    }

    public long[]
    addFEMIsoBeamList(FEMIsoBeamFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMIsoBeamList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMIsoBeamList(FEMIsoBeamFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMIsoBeamList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMIsoBeamList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMLink(FEMLinkFields fields)
    {
        return addFEMLink(fields, null, false);
    }

    public long
    addFEMLink(FEMLinkFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMLink(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMLink(FEMLinkFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMLink");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMLink(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMLinkList(FEMLinkFields[] fieldsList)
    {
        return addFEMLinkList(fieldsList, null, false);
    }

    public long[]
    addFEMLinkList(FEMLinkFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMLinkList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMLinkList(FEMLinkFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMLinkList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMLinkList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMLoadMassProportional(FEMLoadMassProportionalFields fields)
    {
        return addFEMLoadMassProportional(fields, null, false);
    }

    public long
    addFEMLoadMassProportional(FEMLoadMassProportionalFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMLoadMassProportional(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMLoadMassProportional(FEMLoadMassProportionalFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMLoadMassProportional");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMLoadMassProportional(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMLoadMassProportionalList(FEMLoadMassProportionalFields[] fieldsList)
    {
        return addFEMLoadMassProportionalList(fieldsList, null, false);
    }

    public long[]
    addFEMLoadMassProportionalList(FEMLoadMassProportionalFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMLoadMassProportionalList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMLoadMassProportionalList(FEMLoadMassProportionalFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMLoadMassProportionalList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMLoadMassProportionalList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMMCForceData(FEMMCForceDataFields fields)
    {
        return addFEMMCForceData(fields, null, false);
    }

    public long
    addFEMMCForceData(FEMMCForceDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMMCForceData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMMCForceData(FEMMCForceDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMCForceData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMCForceData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMMCForceDataList(FEMMCForceDataFields[] fieldsList)
    {
        return addFEMMCForceDataList(fieldsList, null, false);
    }

    public long[]
    addFEMMCForceDataList(FEMMCForceDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMMCForceDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMMCForceDataList(FEMMCForceDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMCForceDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMCForceDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMMCrigidities(FEMMCrigiditiesFields fields)
    {
        return addFEMMCrigidities(fields, null, false);
    }

    public long
    addFEMMCrigidities(FEMMCrigiditiesFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMMCrigidities(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMMCrigidities(FEMMCrigiditiesFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMCrigidities");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMCrigidities(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMMCrigiditiesList(FEMMCrigiditiesFields[] fieldsList)
    {
        return addFEMMCrigiditiesList(fieldsList, null, false);
    }

    public long[]
    addFEMMCrigiditiesList(FEMMCrigiditiesFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMMCrigiditiesList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMMCrigiditiesList(FEMMCrigiditiesFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMCrigiditiesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMCrigiditiesList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMMTForceData(FEMMTForceDataFields fields)
    {
        return addFEMMTForceData(fields, null, false);
    }

    public long
    addFEMMTForceData(FEMMTForceDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMMTForceData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMMTForceData(FEMMTForceDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMTForceData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMTForceData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMMTForceDataList(FEMMTForceDataFields[] fieldsList)
    {
        return addFEMMTForceDataList(fieldsList, null, false);
    }

    public long[]
    addFEMMTForceDataList(FEMMTForceDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMMTForceDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMMTForceDataList(FEMMTForceDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMTForceDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMTForceDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMMaterial(FEMMaterialFields fields)
    {
        return addFEMMaterial(fields, null, false);
    }

    public long
    addFEMMaterial(FEMMaterialFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMMaterial(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMMaterial(FEMMaterialFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMaterial(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMMaterialList(FEMMaterialFields[] fieldsList)
    {
        return addFEMMaterialList(fieldsList, null, false);
    }

    public long[]
    addFEMMaterialList(FEMMaterialFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMMaterialList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMMaterialList(FEMMaterialFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMaterialList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMaterialList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMMatrices(FEMMatricesFields fields)
    {
        return addFEMMatrices(fields, null, false);
    }

    public long
    addFEMMatrices(FEMMatricesFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMMatrices(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMMatrices(FEMMatricesFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMatrices");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMatrices(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMMatricesList(FEMMatricesFields[] fieldsList)
    {
        return addFEMMatricesList(fieldsList, null, false);
    }

    public long[]
    addFEMMatricesList(FEMMatricesFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMMatricesList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMMatricesList(FEMMatricesFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMatricesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMatricesList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMMatrixData(FEMMatrixDataFields fields)
    {
        return addFEMMatrixData(fields, null, false);
    }

    public long
    addFEMMatrixData(FEMMatrixDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMMatrixData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMMatrixData(FEMMatrixDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMatrixData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMatrixData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMMatrixDataList(FEMMatrixDataFields[] fieldsList)
    {
        return addFEMMatrixDataList(fieldsList, null, false);
    }

    public long[]
    addFEMMatrixDataList(FEMMatrixDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMMatrixDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMMatrixDataList(FEMMatrixDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMatrixDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMatrixDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMMatrixSets(FEMMatrixSetsFields fields)
    {
        return addFEMMatrixSets(fields, null, false);
    }

    public long
    addFEMMatrixSets(FEMMatrixSetsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMMatrixSets(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMMatrixSets(FEMMatrixSetsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMatrixSets");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMatrixSets(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMMatrixSetsList(FEMMatrixSetsFields[] fieldsList)
    {
        return addFEMMatrixSetsList(fieldsList, null, false);
    }

    public long[]
    addFEMMatrixSetsList(FEMMatrixSetsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMMatrixSetsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMMatrixSetsList(FEMMatrixSetsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMMatrixSetsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMMatrixSetsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMNKDisplForce(FEMNKDisplForceFields fields)
    {
        return addFEMNKDisplForce(fields, null, false);
    }

    public long
    addFEMNKDisplForce(FEMNKDisplForceFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMNKDisplForce(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMNKDisplForce(FEMNKDisplForceFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNKDisplForce");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNKDisplForce(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMNKDisplForceList(FEMNKDisplForceFields[] fieldsList)
    {
        return addFEMNKDisplForceList(fieldsList, null, false);
    }

    public long[]
    addFEMNKDisplForceList(FEMNKDisplForceFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMNKDisplForceList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMNKDisplForceList(FEMNKDisplForceFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNKDisplForceList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNKDisplForceList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMNLElasticMaterials(FEMNLElasticMaterialsFields fields)
    {
        return addFEMNLElasticMaterials(fields, null, false);
    }

    public long
    addFEMNLElasticMaterials(FEMNLElasticMaterialsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMNLElasticMaterials(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMNLElasticMaterials(FEMNLElasticMaterialsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNLElasticMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNLElasticMaterials(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMNLElasticMaterialsList(FEMNLElasticMaterialsFields[] fieldsList)
    {
        return addFEMNLElasticMaterialsList(fieldsList, null, false);
    }

    public long[]
    addFEMNLElasticMaterialsList(FEMNLElasticMaterialsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMNLElasticMaterialsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMNLElasticMaterialsList(FEMNLElasticMaterialsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNLElasticMaterialsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNLElasticMaterialsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMNLElasticStrainStress(FEMNLElasticStrainStressFields fields)
    {
        return addFEMNLElasticStrainStress(fields, null, false);
    }

    public long
    addFEMNLElasticStrainStress(FEMNLElasticStrainStressFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMNLElasticStrainStress(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMNLElasticStrainStress(FEMNLElasticStrainStressFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNLElasticStrainStress");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNLElasticStrainStress(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMNLElasticStrainStressList(FEMNLElasticStrainStressFields[] fieldsList)
    {
        return addFEMNLElasticStrainStressList(fieldsList, null, false);
    }

    public long[]
    addFEMNLElasticStrainStressList(FEMNLElasticStrainStressFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMNLElasticStrainStressList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMNLElasticStrainStressList(FEMNLElasticStrainStressFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNLElasticStrainStressList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNLElasticStrainStressList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMNMTimeMass(FEMNMTimeMassFields fields)
    {
        return addFEMNMTimeMass(fields, null, false);
    }

    public long
    addFEMNMTimeMass(FEMNMTimeMassFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMNMTimeMass(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMNMTimeMass(FEMNMTimeMassFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNMTimeMass");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNMTimeMass(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMNMTimeMassList(FEMNMTimeMassFields[] fieldsList)
    {
        return addFEMNMTimeMassList(fieldsList, null, false);
    }

    public long[]
    addFEMNMTimeMassList(FEMNMTimeMassFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMNMTimeMassList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMNMTimeMassList(FEMNMTimeMassFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNMTimeMassList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNMTimeMassList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMNTNContact(FEMNTNContactFields fields)
    {
        return addFEMNTNContact(fields, null, false);
    }

    public long
    addFEMNTNContact(FEMNTNContactFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMNTNContact(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMNTNContact(FEMNTNContactFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNTNContact");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNTNContact(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMNTNContactList(FEMNTNContactFields[] fieldsList)
    {
        return addFEMNTNContactList(fieldsList, null, false);
    }

    public long[]
    addFEMNTNContactList(FEMNTNContactFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMNTNContactList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMNTNContactList(FEMNTNContactFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNTNContactList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNTNContactList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMNodalMass(FEMNodalMassFields fields)
    {
        return addFEMNodalMass(fields, null, false);
    }

    public long
    addFEMNodalMass(FEMNodalMassFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMNodalMass(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMNodalMass(FEMNodalMassFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNodalMass");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNodalMass(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMNodalMassList(FEMNodalMassFields[] fieldsList)
    {
        return addFEMNodalMassList(fieldsList, null, false);
    }

    public long[]
    addFEMNodalMassList(FEMNodalMassFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMNodalMassList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMNodalMassList(FEMNodalMassFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNodalMassList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNodalMassList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMNode(FEMNodeFields fields)
    {
        return addFEMNode(fields, null, false);
    }

    public long
    addFEMNode(FEMNodeFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMNode(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMNode(FEMNodeFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNode(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMNodeList(FEMNodeFields[] fieldsList)
    {
        return addFEMNodeList(fieldsList, null, false);
    }

    public long[]
    addFEMNodeList(FEMNodeFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMNodeList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMNodeList(FEMNodeFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMNodeList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMOrthotropicMaterial(FEMOrthotropicMaterialFields fields)
    {
        return addFEMOrthotropicMaterial(fields, null, false);
    }

    public long
    addFEMOrthotropicMaterial(FEMOrthotropicMaterialFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMOrthotropicMaterial(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMOrthotropicMaterial(FEMOrthotropicMaterialFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMOrthotropicMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMOrthotropicMaterial(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMOrthotropicMaterialList(FEMOrthotropicMaterialFields[] fieldsList)
    {
        return addFEMOrthotropicMaterialList(fieldsList, null, false);
    }

    public long[]
    addFEMOrthotropicMaterialList(FEMOrthotropicMaterialFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMOrthotropicMaterialList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMOrthotropicMaterialList(FEMOrthotropicMaterialFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMOrthotropicMaterialList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMOrthotropicMaterialList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMPlasticBilinearMaterial(FEMPlasticBilinearMaterialFields fields)
    {
        return addFEMPlasticBilinearMaterial(fields, null, false);
    }

    public long
    addFEMPlasticBilinearMaterial(FEMPlasticBilinearMaterialFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMPlasticBilinearMaterial(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMPlasticBilinearMaterial(FEMPlasticBilinearMaterialFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlasticBilinearMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlasticBilinearMaterial(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMPlasticBilinearMaterialList(FEMPlasticBilinearMaterialFields[] fieldsList)
    {
        return addFEMPlasticBilinearMaterialList(fieldsList, null, false);
    }

    public long[]
    addFEMPlasticBilinearMaterialList(FEMPlasticBilinearMaterialFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMPlasticBilinearMaterialList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMPlasticBilinearMaterialList(FEMPlasticBilinearMaterialFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlasticBilinearMaterialList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlasticBilinearMaterialList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMPlasticMlMaterials(FEMPlasticMlMaterialsFields fields)
    {
        return addFEMPlasticMlMaterials(fields, null, false);
    }

    public long
    addFEMPlasticMlMaterials(FEMPlasticMlMaterialsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMPlasticMlMaterials(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMPlasticMlMaterials(FEMPlasticMlMaterialsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlasticMlMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlasticMlMaterials(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMPlasticMlMaterialsList(FEMPlasticMlMaterialsFields[] fieldsList)
    {
        return addFEMPlasticMlMaterialsList(fieldsList, null, false);
    }

    public long[]
    addFEMPlasticMlMaterialsList(FEMPlasticMlMaterialsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMPlasticMlMaterialsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMPlasticMlMaterialsList(FEMPlasticMlMaterialsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlasticMlMaterialsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlasticMlMaterialsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMPlasticStrainStress(FEMPlasticStrainStressFields fields)
    {
        return addFEMPlasticStrainStress(fields, null, false);
    }

    public long
    addFEMPlasticStrainStress(FEMPlasticStrainStressFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMPlasticStrainStress(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMPlasticStrainStress(FEMPlasticStrainStressFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlasticStrainStress");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlasticStrainStress(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMPlasticStrainStressList(FEMPlasticStrainStressFields[] fieldsList)
    {
        return addFEMPlasticStrainStressList(fieldsList, null, false);
    }

    public long[]
    addFEMPlasticStrainStressList(FEMPlasticStrainStressFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMPlasticStrainStressList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMPlasticStrainStressList(FEMPlasticStrainStressFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlasticStrainStressList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlasticStrainStressList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMPlate(FEMPlateFields fields)
    {
        return addFEMPlate(fields, null, false);
    }

    public long
    addFEMPlate(FEMPlateFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMPlate(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMPlate(FEMPlateFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlate");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlate(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMPlateGroup(FEMPlateGroupFields fields)
    {
        return addFEMPlateGroup(fields, null, false);
    }

    public long
    addFEMPlateGroup(FEMPlateGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMPlateGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMPlateGroup(FEMPlateGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlateGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlateGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMPlateGroupList(FEMPlateGroupFields[] fieldsList)
    {
        return addFEMPlateGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMPlateGroupList(FEMPlateGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMPlateGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMPlateGroupList(FEMPlateGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlateGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlateGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMPlateList(FEMPlateFields[] fieldsList)
    {
        return addFEMPlateList(fieldsList, null, false);
    }

    public long[]
    addFEMPlateList(FEMPlateFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMPlateList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMPlateList(FEMPlateFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPlateList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPlateList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMPoints(FEMPointsFields fields)
    {
        return addFEMPoints(fields, null, false);
    }

    public long
    addFEMPoints(FEMPointsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMPoints(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMPoints(FEMPointsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPoints");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPoints(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMPointsList(FEMPointsFields[] fieldsList)
    {
        return addFEMPointsList(fieldsList, null, false);
    }

    public long[]
    addFEMPointsList(FEMPointsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMPointsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMPointsList(FEMPointsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPointsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPointsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMProperties(FEMPropertiesFields fields)
    {
        return addFEMProperties(fields, null, false);
    }

    public long
    addFEMProperties(FEMPropertiesFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMProperties(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMProperties(FEMPropertiesFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMProperties");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMProperties(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMPropertiesList(FEMPropertiesFields[] fieldsList)
    {
        return addFEMPropertiesList(fieldsList, null, false);
    }

    public long[]
    addFEMPropertiesList(FEMPropertiesFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMPropertiesList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMPropertiesList(FEMPropertiesFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPropertiesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPropertiesList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMPropertysets(FEMPropertysetsFields fields)
    {
        return addFEMPropertysets(fields, null, false);
    }

    public long
    addFEMPropertysets(FEMPropertysetsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMPropertysets(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMPropertysets(FEMPropertysetsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPropertysets");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPropertysets(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMPropertysetsList(FEMPropertysetsFields[] fieldsList)
    {
        return addFEMPropertysetsList(fieldsList, null, false);
    }

    public long[]
    addFEMPropertysetsList(FEMPropertysetsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMPropertysetsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMPropertysetsList(FEMPropertysetsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMPropertysetsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMPropertysetsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSectionBox(FEMSectionBoxFields fields)
    {
        return addFEMSectionBox(fields, null, false);
    }

    public long
    addFEMSectionBox(FEMSectionBoxFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionBox(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSectionBox(FEMSectionBoxFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionBox");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionBox(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSectionBoxList(FEMSectionBoxFields[] fieldsList)
    {
        return addFEMSectionBoxList(fieldsList, null, false);
    }

    public long[]
    addFEMSectionBoxList(FEMSectionBoxFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionBoxList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSectionBoxList(FEMSectionBoxFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionBoxList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionBoxList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSectionI(FEMSectionIFields fields)
    {
        return addFEMSectionI(fields, null, false);
    }

    public long
    addFEMSectionI(FEMSectionIFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionI(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSectionI(FEMSectionIFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionI");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionI(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSectionIList(FEMSectionIFields[] fieldsList)
    {
        return addFEMSectionIList(fieldsList, null, false);
    }

    public long[]
    addFEMSectionIList(FEMSectionIFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionIList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSectionIList(FEMSectionIFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionIList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionIList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSectionPipe(FEMSectionPipeFields fields)
    {
        return addFEMSectionPipe(fields, null, false);
    }

    public long
    addFEMSectionPipe(FEMSectionPipeFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionPipe(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSectionPipe(FEMSectionPipeFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionPipe");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionPipe(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSectionPipeList(FEMSectionPipeFields[] fieldsList)
    {
        return addFEMSectionPipeList(fieldsList, null, false);
    }

    public long[]
    addFEMSectionPipeList(FEMSectionPipeFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionPipeList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSectionPipeList(FEMSectionPipeFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionPipeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionPipeList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSectionProp(FEMSectionPropFields fields)
    {
        return addFEMSectionProp(fields, null, false);
    }

    public long
    addFEMSectionProp(FEMSectionPropFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionProp(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSectionProp(FEMSectionPropFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionProp");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionProp(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSectionPropList(FEMSectionPropFields[] fieldsList)
    {
        return addFEMSectionPropList(fieldsList, null, false);
    }

    public long[]
    addFEMSectionPropList(FEMSectionPropFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionPropList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSectionPropList(FEMSectionPropFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionPropList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionPropList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSectionRect(FEMSectionRectFields fields)
    {
        return addFEMSectionRect(fields, null, false);
    }

    public long
    addFEMSectionRect(FEMSectionRectFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionRect(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSectionRect(FEMSectionRectFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionRect");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionRect(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSectionRectList(FEMSectionRectFields[] fieldsList)
    {
        return addFEMSectionRectList(fieldsList, null, false);
    }

    public long[]
    addFEMSectionRectList(FEMSectionRectFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSectionRectList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSectionRectList(FEMSectionRectFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSectionRectList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSectionRectList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMShell(FEMShellFields fields)
    {
        return addFEMShell(fields, null, false);
    }

    public long
    addFEMShell(FEMShellFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMShell(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMShell(FEMShellFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShell");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShell(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMShellAxesOrtho(FEMShellAxesOrthoFields fields)
    {
        return addFEMShellAxesOrtho(fields, null, false);
    }

    public long
    addFEMShellAxesOrtho(FEMShellAxesOrthoFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMShellAxesOrtho(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMShellAxesOrtho(FEMShellAxesOrthoFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellAxesOrtho");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellAxesOrtho(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMShellAxesOrthoData(FEMShellAxesOrthoDataFields fields)
    {
        return addFEMShellAxesOrthoData(fields, null, false);
    }

    public long
    addFEMShellAxesOrthoData(FEMShellAxesOrthoDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMShellAxesOrthoData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMShellAxesOrthoData(FEMShellAxesOrthoDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellAxesOrthoData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellAxesOrthoData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMShellAxesOrthoDataList(FEMShellAxesOrthoDataFields[] fieldsList)
    {
        return addFEMShellAxesOrthoDataList(fieldsList, null, false);
    }

    public long[]
    addFEMShellAxesOrthoDataList(FEMShellAxesOrthoDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMShellAxesOrthoDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMShellAxesOrthoDataList(FEMShellAxesOrthoDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellAxesOrthoDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellAxesOrthoDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMShellAxesOrthoList(FEMShellAxesOrthoFields[] fieldsList)
    {
        return addFEMShellAxesOrthoList(fieldsList, null, false);
    }

    public long[]
    addFEMShellAxesOrthoList(FEMShellAxesOrthoFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMShellAxesOrthoList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMShellAxesOrthoList(FEMShellAxesOrthoFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellAxesOrthoList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellAxesOrthoList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMShellDOF(FEMShellDOFFields fields)
    {
        return addFEMShellDOF(fields, null, false);
    }

    public long
    addFEMShellDOF(FEMShellDOFFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMShellDOF(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMShellDOF(FEMShellDOFFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellDOF");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellDOF(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMShellDOFList(FEMShellDOFFields[] fieldsList)
    {
        return addFEMShellDOFList(fieldsList, null, false);
    }

    public long[]
    addFEMShellDOFList(FEMShellDOFFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMShellDOFList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMShellDOFList(FEMShellDOFFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellDOFList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellDOFList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMShellGroup(FEMShellGroupFields fields)
    {
        return addFEMShellGroup(fields, null, false);
    }

    public long
    addFEMShellGroup(FEMShellGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMShellGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMShellGroup(FEMShellGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMShellGroupList(FEMShellGroupFields[] fieldsList)
    {
        return addFEMShellGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMShellGroupList(FEMShellGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMShellGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMShellGroupList(FEMShellGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMShellLayer(FEMShellLayerFields fields)
    {
        return addFEMShellLayer(fields, null, false);
    }

    public long
    addFEMShellLayer(FEMShellLayerFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMShellLayer(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMShellLayer(FEMShellLayerFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellLayer");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellLayer(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMShellLayerList(FEMShellLayerFields[] fieldsList)
    {
        return addFEMShellLayerList(fieldsList, null, false);
    }

    public long[]
    addFEMShellLayerList(FEMShellLayerFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMShellLayerList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMShellLayerList(FEMShellLayerFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellLayerList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellLayerList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMShellList(FEMShellFields[] fieldsList)
    {
        return addFEMShellList(fieldsList, null, false);
    }

    public long[]
    addFEMShellList(FEMShellFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMShellList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMShellList(FEMShellFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMShellPressure(FEMShellPressureFields fields)
    {
        return addFEMShellPressure(fields, null, false);
    }

    public long
    addFEMShellPressure(FEMShellPressureFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMShellPressure(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMShellPressure(FEMShellPressureFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellPressure");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellPressure(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMShellPressureList(FEMShellPressureFields[] fieldsList)
    {
        return addFEMShellPressureList(fieldsList, null, false);
    }

    public long[]
    addFEMShellPressureList(FEMShellPressureFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMShellPressureList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMShellPressureList(FEMShellPressureFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMShellPressureList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMShellPressureList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSkewDOF(FEMSkewDOFFields fields)
    {
        return addFEMSkewDOF(fields, null, false);
    }

    public long
    addFEMSkewDOF(FEMSkewDOFFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSkewDOF(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSkewDOF(FEMSkewDOFFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSkewDOF");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSkewDOF(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSkewDOFList(FEMSkewDOFFields[] fieldsList)
    {
        return addFEMSkewDOFList(fieldsList, null, false);
    }

    public long[]
    addFEMSkewDOFList(FEMSkewDOFFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSkewDOFList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSkewDOFList(FEMSkewDOFFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSkewDOFList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSkewDOFList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSkewSysAngles(FEMSkewSysAnglesFields fields)
    {
        return addFEMSkewSysAngles(fields, null, false);
    }

    public long
    addFEMSkewSysAngles(FEMSkewSysAnglesFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSkewSysAngles(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSkewSysAngles(FEMSkewSysAnglesFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSkewSysAngles");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSkewSysAngles(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSkewSysAnglesList(FEMSkewSysAnglesFields[] fieldsList)
    {
        return addFEMSkewSysAnglesList(fieldsList, null, false);
    }

    public long[]
    addFEMSkewSysAnglesList(FEMSkewSysAnglesFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSkewSysAnglesList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSkewSysAnglesList(FEMSkewSysAnglesFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSkewSysAnglesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSkewSysAnglesList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSkeySysNode(FEMSkeySysNodeFields fields)
    {
        return addFEMSkeySysNode(fields, null, false);
    }

    public long
    addFEMSkeySysNode(FEMSkeySysNodeFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSkeySysNode(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSkeySysNode(FEMSkeySysNodeFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSkeySysNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSkeySysNode(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSkeySysNodeList(FEMSkeySysNodeFields[] fieldsList)
    {
        return addFEMSkeySysNodeList(fieldsList, null, false);
    }

    public long[]
    addFEMSkeySysNodeList(FEMSkeySysNodeFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSkeySysNodeList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSkeySysNodeList(FEMSkeySysNodeFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSkeySysNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSkeySysNodeList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSpring(FEMSpringFields fields)
    {
        return addFEMSpring(fields, null, false);
    }

    public long
    addFEMSpring(FEMSpringFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSpring(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSpring(FEMSpringFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSpring");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSpring(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMSpringGroup(FEMSpringGroupFields fields)
    {
        return addFEMSpringGroup(fields, null, false);
    }

    public long
    addFEMSpringGroup(FEMSpringGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMSpringGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMSpringGroup(FEMSpringGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSpringGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSpringGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSpringGroupList(FEMSpringGroupFields[] fieldsList)
    {
        return addFEMSpringGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMSpringGroupList(FEMSpringGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSpringGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSpringGroupList(FEMSpringGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSpringGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSpringGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMSpringList(FEMSpringFields[] fieldsList)
    {
        return addFEMSpringList(fieldsList, null, false);
    }

    public long[]
    addFEMSpringList(FEMSpringFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMSpringList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMSpringList(FEMSpringFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMSpringList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMSpringList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMStrLines(FEMStrLinesFields fields)
    {
        return addFEMStrLines(fields, null, false);
    }

    public long
    addFEMStrLines(FEMStrLinesFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMStrLines(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMStrLines(FEMStrLinesFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMStrLines");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMStrLines(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMStrLinesList(FEMStrLinesFields[] fieldsList)
    {
        return addFEMStrLinesList(fieldsList, null, false);
    }

    public long[]
    addFEMStrLinesList(FEMStrLinesFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMStrLinesList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMStrLinesList(FEMStrLinesFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMStrLinesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMStrLinesList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMThermoIsoData(FEMThermoIsoDataFields fields)
    {
        return addFEMThermoIsoData(fields, null, false);
    }

    public long
    addFEMThermoIsoData(FEMThermoIsoDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMThermoIsoData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMThermoIsoData(FEMThermoIsoDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThermoIsoData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThermoIsoData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMThermoIsoDataList(FEMThermoIsoDataFields[] fieldsList)
    {
        return addFEMThermoIsoDataList(fieldsList, null, false);
    }

    public long[]
    addFEMThermoIsoDataList(FEMThermoIsoDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMThermoIsoDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMThermoIsoDataList(FEMThermoIsoDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThermoIsoDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThermoIsoDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMThermoIsoMaterials(FEMThermoIsoMaterialsFields fields)
    {
        return addFEMThermoIsoMaterials(fields, null, false);
    }

    public long
    addFEMThermoIsoMaterials(FEMThermoIsoMaterialsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMThermoIsoMaterials(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMThermoIsoMaterials(FEMThermoIsoMaterialsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThermoIsoMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThermoIsoMaterials(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMThermoIsoMaterialsList(FEMThermoIsoMaterialsFields[] fieldsList)
    {
        return addFEMThermoIsoMaterialsList(fieldsList, null, false);
    }

    public long[]
    addFEMThermoIsoMaterialsList(FEMThermoIsoMaterialsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMThermoIsoMaterialsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMThermoIsoMaterialsList(FEMThermoIsoMaterialsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThermoIsoMaterialsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThermoIsoMaterialsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMThermoOrthData(FEMThermoOrthDataFields fields)
    {
        return addFEMThermoOrthData(fields, null, false);
    }

    public long
    addFEMThermoOrthData(FEMThermoOrthDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMThermoOrthData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMThermoOrthData(FEMThermoOrthDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThermoOrthData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThermoOrthData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMThermoOrthDataList(FEMThermoOrthDataFields[] fieldsList)
    {
        return addFEMThermoOrthDataList(fieldsList, null, false);
    }

    public long[]
    addFEMThermoOrthDataList(FEMThermoOrthDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMThermoOrthDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMThermoOrthDataList(FEMThermoOrthDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThermoOrthDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThermoOrthDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMThermoOrthMaterials(FEMThermoOrthMaterialsFields fields)
    {
        return addFEMThermoOrthMaterials(fields, null, false);
    }

    public long
    addFEMThermoOrthMaterials(FEMThermoOrthMaterialsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMThermoOrthMaterials(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMThermoOrthMaterials(FEMThermoOrthMaterialsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThermoOrthMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThermoOrthMaterials(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMThermoOrthMaterialsList(FEMThermoOrthMaterialsFields[] fieldsList)
    {
        return addFEMThermoOrthMaterialsList(fieldsList, null, false);
    }

    public long[]
    addFEMThermoOrthMaterialsList(FEMThermoOrthMaterialsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMThermoOrthMaterialsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMThermoOrthMaterialsList(FEMThermoOrthMaterialsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThermoOrthMaterialsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThermoOrthMaterialsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMThreeDSolid(FEMThreeDSolidFields fields)
    {
        return addFEMThreeDSolid(fields, null, false);
    }

    public long
    addFEMThreeDSolid(FEMThreeDSolidFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMThreeDSolid(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMThreeDSolid(FEMThreeDSolidFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThreeDSolid");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThreeDSolid(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMThreeDSolidGroup(FEMThreeDSolidGroupFields fields)
    {
        return addFEMThreeDSolidGroup(fields, null, false);
    }

    public long
    addFEMThreeDSolidGroup(FEMThreeDSolidGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMThreeDSolidGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMThreeDSolidGroup(FEMThreeDSolidGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThreeDSolidGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThreeDSolidGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMThreeDSolidGroupList(FEMThreeDSolidGroupFields[] fieldsList)
    {
        return addFEMThreeDSolidGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMThreeDSolidGroupList(FEMThreeDSolidGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMThreeDSolidGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMThreeDSolidGroupList(FEMThreeDSolidGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThreeDSolidGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThreeDSolidGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMThreeDSolidList(FEMThreeDSolidFields[] fieldsList)
    {
        return addFEMThreeDSolidList(fieldsList, null, false);
    }

    public long[]
    addFEMThreeDSolidList(FEMThreeDSolidFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMThreeDSolidList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMThreeDSolidList(FEMThreeDSolidFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMThreeDSolidList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMThreeDSolidList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMTimeFunctionData(FEMTimeFunctionDataFields fields)
    {
        return addFEMTimeFunctionData(fields, null, false);
    }

    public long
    addFEMTimeFunctionData(FEMTimeFunctionDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMTimeFunctionData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMTimeFunctionData(FEMTimeFunctionDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTimeFunctionData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTimeFunctionData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMTimeFunctionDataList(FEMTimeFunctionDataFields[] fieldsList)
    {
        return addFEMTimeFunctionDataList(fieldsList, null, false);
    }

    public long[]
    addFEMTimeFunctionDataList(FEMTimeFunctionDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMTimeFunctionDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMTimeFunctionDataList(FEMTimeFunctionDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTimeFunctionDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTimeFunctionDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMTimeFunctions(FEMTimeFunctionsFields fields)
    {
        return addFEMTimeFunctions(fields, null, false);
    }

    public long
    addFEMTimeFunctions(FEMTimeFunctionsFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMTimeFunctions(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMTimeFunctions(FEMTimeFunctionsFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTimeFunctions");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTimeFunctions(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMTimeFunctionsList(FEMTimeFunctionsFields[] fieldsList)
    {
        return addFEMTimeFunctionsList(fieldsList, null, false);
    }

    public long[]
    addFEMTimeFunctionsList(FEMTimeFunctionsFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMTimeFunctionsList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMTimeFunctionsList(FEMTimeFunctionsFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTimeFunctionsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTimeFunctionsList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMTruss(FEMTrussFields fields)
    {
        return addFEMTruss(fields, null, false);
    }

    public long
    addFEMTruss(FEMTrussFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMTruss(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMTruss(FEMTrussFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTruss");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTruss(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMTrussGroup(FEMTrussGroupFields fields)
    {
        return addFEMTrussGroup(fields, null, false);
    }

    public long
    addFEMTrussGroup(FEMTrussGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMTrussGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMTrussGroup(FEMTrussGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTrussGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTrussGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMTrussGroupList(FEMTrussGroupFields[] fieldsList)
    {
        return addFEMTrussGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMTrussGroupList(FEMTrussGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMTrussGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMTrussGroupList(FEMTrussGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTrussGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTrussGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMTrussList(FEMTrussFields[] fieldsList)
    {
        return addFEMTrussList(fieldsList, null, false);
    }

    public long[]
    addFEMTrussList(FEMTrussFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMTrussList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMTrussList(FEMTrussFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTrussList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTrussList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMTwistMomentData(FEMTwistMomentDataFields fields)
    {
        return addFEMTwistMomentData(fields, null, false);
    }

    public long
    addFEMTwistMomentData(FEMTwistMomentDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMTwistMomentData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMTwistMomentData(FEMTwistMomentDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTwistMomentData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTwistMomentData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMTwistMomentDataList(FEMTwistMomentDataFields[] fieldsList)
    {
        return addFEMTwistMomentDataList(fieldsList, null, false);
    }

    public long[]
    addFEMTwistMomentDataList(FEMTwistMomentDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMTwistMomentDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMTwistMomentDataList(FEMTwistMomentDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTwistMomentDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTwistMomentDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMTwoDSolid(FEMTwoDSolidFields fields)
    {
        return addFEMTwoDSolid(fields, null, false);
    }

    public long
    addFEMTwoDSolid(FEMTwoDSolidFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMTwoDSolid(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMTwoDSolid(FEMTwoDSolidFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTwoDSolid");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTwoDSolid(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addFEMTwoDSolidGroup(FEMTwoDSolidGroupFields fields)
    {
        return addFEMTwoDSolidGroup(fields, null, false);
    }

    public long
    addFEMTwoDSolidGroup(FEMTwoDSolidGroupFields fields, java.util.Map<String, String> __ctx)
    {
        return addFEMTwoDSolidGroup(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addFEMTwoDSolidGroup(FEMTwoDSolidGroupFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTwoDSolidGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTwoDSolidGroup(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMTwoDSolidGroupList(FEMTwoDSolidGroupFields[] fieldsList)
    {
        return addFEMTwoDSolidGroupList(fieldsList, null, false);
    }

    public long[]
    addFEMTwoDSolidGroupList(FEMTwoDSolidGroupFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMTwoDSolidGroupList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMTwoDSolidGroupList(FEMTwoDSolidGroupFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTwoDSolidGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTwoDSolidGroupList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addFEMTwoDSolidList(FEMTwoDSolidFields[] fieldsList)
    {
        return addFEMTwoDSolidList(fieldsList, null, false);
    }

    public long[]
    addFEMTwoDSolidList(FEMTwoDSolidFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addFEMTwoDSolidList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addFEMTwoDSolidList(FEMTwoDSolidFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addFEMTwoDSolidList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addFEMTwoDSolidList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addMappingMatrix(MappingMatrixFields fields)
    {
        return addMappingMatrix(fields, null, false);
    }

    public long
    addMappingMatrix(MappingMatrixFields fields, java.util.Map<String, String> __ctx)
    {
        return addMappingMatrix(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addMappingMatrix(MappingMatrixFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addMappingMatrix");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addMappingMatrix(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addMappingMatrixList(MappingMatrixFields[] fieldsList)
    {
        return addMappingMatrixList(fieldsList, null, false);
    }

    public long[]
    addMappingMatrixList(MappingMatrixFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addMappingMatrixList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addMappingMatrixList(MappingMatrixFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addMappingMatrixList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addMappingMatrixList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addSensor(SensorFields fields)
    {
        return addSensor(fields, null, false);
    }

    public long
    addSensor(SensorFields fields, java.util.Map<String, String> __ctx)
    {
        return addSensor(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addSensor(SensorFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addSensor");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addSensor(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addSensorList(SensorFields[] fieldsList)
    {
        return addSensorList(fieldsList, null, false);
    }

    public long[]
    addSensorList(SensorFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addSensorList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addSensorList(SensorFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addSensorList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addSensorList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addSensorTimeData(SensorTimeDataFields fields)
    {
        return addSensorTimeData(fields, null, false);
    }

    public long
    addSensorTimeData(SensorTimeDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addSensorTimeData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addSensorTimeData(SensorTimeDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addSensorTimeData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addSensorTimeData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addSensorTimeDataList(SensorTimeDataFields[] fieldsList)
    {
        return addSensorTimeDataList(fieldsList, null, false);
    }

    public long[]
    addSensorTimeDataList(SensorTimeDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addSensorTimeDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addSensorTimeDataList(SensorTimeDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addSensorTimeDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addSensorTimeDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addStructure(StructureFields fields)
    {
        return addStructure(fields, null, false);
    }

    public long
    addStructure(StructureFields fields, java.util.Map<String, String> __ctx)
    {
        return addStructure(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addStructure(StructureFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addStructure");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addStructure(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addStructureList(StructureFields[] fieldsList)
    {
        return addStructureList(fieldsList, null, false);
    }

    public long[]
    addStructureList(StructureFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addStructureList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addStructureList(StructureFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addStructureList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addStructureList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addTransducer(TransducerFields fields)
    {
        return addTransducer(fields, null, false);
    }

    public long
    addTransducer(TransducerFields fields, java.util.Map<String, String> __ctx)
    {
        return addTransducer(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addTransducer(TransducerFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTransducer");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addTransducer(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addTransducerCycleData(TransducerCycleDataFields fields)
    {
        return addTransducerCycleData(fields, null, false);
    }

    public long
    addTransducerCycleData(TransducerCycleDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addTransducerCycleData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addTransducerCycleData(TransducerCycleDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTransducerCycleData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addTransducerCycleData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addTransducerCycleDataList(TransducerCycleDataFields[] fieldsList)
    {
        return addTransducerCycleDataList(fieldsList, null, false);
    }

    public long[]
    addTransducerCycleDataList(TransducerCycleDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addTransducerCycleDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addTransducerCycleDataList(TransducerCycleDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTransducerCycleDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addTransducerCycleDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addTransducerList(TransducerFields[] fieldsList)
    {
        return addTransducerList(fieldsList, null, false);
    }

    public long[]
    addTransducerList(TransducerFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addTransducerList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addTransducerList(TransducerFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTransducerList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addTransducerList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long
    addTransducerTimeData(TransducerTimeDataFields fields)
    {
        return addTransducerTimeData(fields, null, false);
    }

    public long
    addTransducerTimeData(TransducerTimeDataFields fields, java.util.Map<String, String> __ctx)
    {
        return addTransducerTimeData(fields, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long
    addTransducerTimeData(TransducerTimeDataFields fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTransducerTimeData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addTransducerTimeData(fields, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    addTransducerTimeDataList(TransducerTimeDataFields[] fieldsList)
    {
        return addTransducerTimeDataList(fieldsList, null, false);
    }

    public long[]
    addTransducerTimeDataList(TransducerTimeDataFields[] fieldsList, java.util.Map<String, String> __ctx)
    {
        return addTransducerTimeDataList(fieldsList, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    addTransducerTimeDataList(TransducerTimeDataFields[] fieldsList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTransducerTimeDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.addTransducerTimeDataList(fieldsList, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex, null);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualAccelMeas(AccelMeasFields fields, String[] fieldNames)
    {
        return findEqualAccelMeas(fields, fieldNames, null, false);
    }

    public long[]
    findEqualAccelMeas(AccelMeasFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualAccelMeas(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualAccelMeas(AccelMeasFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualAccelMeas");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualAccelMeas(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualCycle(CycleFields fields, String[] fieldNames)
    {
        return findEqualCycle(fields, fieldNames, null, false);
    }

    public long[]
    findEqualCycle(CycleFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualCycle(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualCycle(CycleFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualCycle");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualCycle(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualDaqUnit(DaqUnitFields fields, String[] fieldNames)
    {
        return findEqualDaqUnit(fields, fieldNames, null, false);
    }

    public long[]
    findEqualDaqUnit(DaqUnitFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualDaqUnit(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualDaqUnit(DaqUnitFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualDaqUnit");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualDaqUnit(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualDaqUnitChannel(DaqUnitChannelFields fields, String[] fieldNames)
    {
        return findEqualDaqUnitChannel(fields, fieldNames, null, false);
    }

    public long[]
    findEqualDaqUnitChannel(DaqUnitChannelFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualDaqUnitChannel(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualDaqUnitChannel(DaqUnitChannelFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualDaqUnitChannel");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualDaqUnitChannel(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualDaqUnitChannelData(DaqUnitChannelDataFields fields, String[] fieldNames)
    {
        return findEqualDaqUnitChannelData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualDaqUnitChannelData(DaqUnitChannelDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualDaqUnitChannelData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualDaqUnitChannelData(DaqUnitChannelDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualDaqUnitChannelData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualDaqUnitChannelData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualExperiment(ExperimentFields fields, String[] fieldNames)
    {
        return findEqualExperiment(fields, fieldNames, null, false);
    }

    public long[]
    findEqualExperiment(ExperimentFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualExperiment(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualExperiment(ExperimentFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualExperiment");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualExperiment(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualExperimentStructureData(ExperimentStructureDataFields fields, String[] fieldNames)
    {
        return findEqualExperimentStructureData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualExperimentStructureData(ExperimentStructureDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualExperimentStructureData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualExperimentStructureData(ExperimentStructureDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualExperimentStructureData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualExperimentStructureData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMAppliedConcentratedLoad(FEMAppliedConcentratedLoadFields fields, String[] fieldNames)
    {
        return findEqualFEMAppliedConcentratedLoad(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMAppliedConcentratedLoad(FEMAppliedConcentratedLoadFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMAppliedConcentratedLoad(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMAppliedConcentratedLoad(FEMAppliedConcentratedLoadFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMAppliedConcentratedLoad");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMAppliedConcentratedLoad(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMAppliedDisplacement(FEMAppliedDisplacementFields fields, String[] fieldNames)
    {
        return findEqualFEMAppliedDisplacement(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMAppliedDisplacement(FEMAppliedDisplacementFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMAppliedDisplacement(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMAppliedDisplacement(FEMAppliedDisplacementFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMAppliedDisplacement");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMAppliedDisplacement(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMAppliedLoads(FEMAppliedLoadsFields fields, String[] fieldNames)
    {
        return findEqualFEMAppliedLoads(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMAppliedLoads(FEMAppliedLoadsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMAppliedLoads(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMAppliedLoads(FEMAppliedLoadsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMAppliedLoads");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMAppliedLoads(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMAppliedTemperature(FEMAppliedTemperatureFields fields, String[] fieldNames)
    {
        return findEqualFEMAppliedTemperature(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMAppliedTemperature(FEMAppliedTemperatureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMAppliedTemperature(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMAppliedTemperature(FEMAppliedTemperatureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMAppliedTemperature");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMAppliedTemperature(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMAxesNode(FEMAxesNodeFields fields, String[] fieldNames)
    {
        return findEqualFEMAxesNode(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMAxesNode(FEMAxesNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMAxesNode(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMAxesNode(FEMAxesNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMAxesNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMAxesNode(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMBeam(FEMBeamFields fields, String[] fieldNames)
    {
        return findEqualFEMBeam(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMBeam(FEMBeamFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMBeam(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMBeam(FEMBeamFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMBeam");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMBeam(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMBeamLoad(FEMBeamLoadFields fields, String[] fieldNames)
    {
        return findEqualFEMBeamLoad(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMBeamLoad(FEMBeamLoadFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMBeamLoad(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMBeamLoad(FEMBeamLoadFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMBeamLoad");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMBeamLoad(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMBeamNode(FEMBeamNodeFields fields, String[] fieldNames)
    {
        return findEqualFEMBeamNode(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMBeamNode(FEMBeamNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMBeamNode(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMBeamNode(FEMBeamNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMBeamNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMBeamNode(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMBoundary(FEMBoundaryFields fields, String[] fieldNames)
    {
        return findEqualFEMBoundary(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMBoundary(FEMBoundaryFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMBoundary(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMBoundary(FEMBoundaryFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMBoundary");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMBoundary(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMConstraintCoef(FEMConstraintCoefFields fields, String[] fieldNames)
    {
        return findEqualFEMConstraintCoef(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMConstraintCoef(FEMConstraintCoefFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMConstraintCoef(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMConstraintCoef(FEMConstraintCoefFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMConstraintCoef");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMConstraintCoef(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMConstraints(FEMConstraintsFields fields, String[] fieldNames)
    {
        return findEqualFEMConstraints(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMConstraints(FEMConstraintsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMConstraints(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMConstraints(FEMConstraintsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMConstraints");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMConstraints(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMContactGroup3(FEMContactGroup3Fields fields, String[] fieldNames)
    {
        return findEqualFEMContactGroup3(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMContactGroup3(FEMContactGroup3Fields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMContactGroup3(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMContactGroup3(FEMContactGroup3Fields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMContactGroup3");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMContactGroup3(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMContactPairs(FEMContactPairsFields fields, String[] fieldNames)
    {
        return findEqualFEMContactPairs(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMContactPairs(FEMContactPairsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMContactPairs(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMContactPairs(FEMContactPairsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMContactPairs");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMContactPairs(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMContactSurface(FEMContactSurfaceFields fields, String[] fieldNames)
    {
        return findEqualFEMContactSurface(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMContactSurface(FEMContactSurfaceFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMContactSurface(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMContactSurface(FEMContactSurfaceFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMContactSurface");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMContactSurface(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMCoordSystem(FEMCoordSystemFields fields, String[] fieldNames)
    {
        return findEqualFEMCoordSystem(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMCoordSystem(FEMCoordSystemFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMCoordSystem(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMCoordSystem(FEMCoordSystemFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMCoordSystem");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMCoordSystem(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMCrossSections(FEMCrossSectionsFields fields, String[] fieldNames)
    {
        return findEqualFEMCrossSections(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMCrossSections(FEMCrossSectionsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMCrossSections(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMCrossSections(FEMCrossSectionsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMCrossSections");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMCrossSections(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMCurvMomentData(FEMCurvMomentDataFields fields, String[] fieldNames)
    {
        return findEqualFEMCurvMomentData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMCurvMomentData(FEMCurvMomentDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMCurvMomentData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMCurvMomentData(FEMCurvMomentDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMCurvMomentData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMCurvMomentData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMDamping(FEMDampingFields fields, String[] fieldNames)
    {
        return findEqualFEMDamping(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMDamping(FEMDampingFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMDamping(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMDamping(FEMDampingFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMDamping");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMDamping(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMDof(FEMDofFields fields, String[] fieldNames)
    {
        return findEqualFEMDof(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMDof(FEMDofFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMDof(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMDof(FEMDofFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMDof");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMDof(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMElasticMaterial(FEMElasticMaterialFields fields, String[] fieldNames)
    {
        return findEqualFEMElasticMaterial(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMElasticMaterial(FEMElasticMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMElasticMaterial(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMElasticMaterial(FEMElasticMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMElasticMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMElasticMaterial(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMEndreleases(FEMEndreleasesFields fields, String[] fieldNames)
    {
        return findEqualFEMEndreleases(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMEndreleases(FEMEndreleasesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMEndreleases(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMEndreleases(FEMEndreleasesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMEndreleases");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMEndreleases(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMForceStrainData(FEMForceStrainDataFields fields, String[] fieldNames)
    {
        return findEqualFEMForceStrainData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMForceStrainData(FEMForceStrainDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMForceStrainData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMForceStrainData(FEMForceStrainDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMForceStrainData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMForceStrainData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMGeneral(FEMGeneralFields fields, String[] fieldNames)
    {
        return findEqualFEMGeneral(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMGeneral(FEMGeneralFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMGeneral(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMGeneral(FEMGeneralFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMGeneral");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMGeneral(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMGeneralGroup(FEMGeneralGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMGeneralGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMGeneralGroup(FEMGeneralGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMGeneralGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMGeneralGroup(FEMGeneralGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMGeneralGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMGeneralGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMGeneralNode(FEMGeneralNodeFields fields, String[] fieldNames)
    {
        return findEqualFEMGeneralNode(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMGeneralNode(FEMGeneralNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMGeneralNode(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMGeneralNode(FEMGeneralNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMGeneralNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMGeneralNode(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMGroundMotionRecord(FEMGroundMotionRecordFields fields, String[] fieldNames)
    {
        return findEqualFEMGroundMotionRecord(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMGroundMotionRecord(FEMGroundMotionRecordFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMGroundMotionRecord(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMGroundMotionRecord(FEMGroundMotionRecordFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMGroundMotionRecord");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMGroundMotionRecord(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMGroup(FEMGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMGroup(FEMGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMGroup(FEMGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMInitialTemperature(FEMInitialTemperatureFields fields, String[] fieldNames)
    {
        return findEqualFEMInitialTemperature(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMInitialTemperature(FEMInitialTemperatureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMInitialTemperature(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMInitialTemperature(FEMInitialTemperatureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMInitialTemperature");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMInitialTemperature(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMIsoBeam(FEMIsoBeamFields fields, String[] fieldNames)
    {
        return findEqualFEMIsoBeam(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMIsoBeam(FEMIsoBeamFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMIsoBeam(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMIsoBeam(FEMIsoBeamFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMIsoBeam");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMIsoBeam(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMIsoBeamGroup(FEMIsoBeamGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMIsoBeamGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMIsoBeamGroup(FEMIsoBeamGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMIsoBeamGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMIsoBeamGroup(FEMIsoBeamGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMIsoBeamGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMIsoBeamGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMLink(FEMLinkFields fields, String[] fieldNames)
    {
        return findEqualFEMLink(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMLink(FEMLinkFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMLink(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMLink(FEMLinkFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMLink");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMLink(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMLoadMassProportional(FEMLoadMassProportionalFields fields, String[] fieldNames)
    {
        return findEqualFEMLoadMassProportional(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMLoadMassProportional(FEMLoadMassProportionalFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMLoadMassProportional(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMLoadMassProportional(FEMLoadMassProportionalFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMLoadMassProportional");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMLoadMassProportional(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMMCForceData(FEMMCForceDataFields fields, String[] fieldNames)
    {
        return findEqualFEMMCForceData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMMCForceData(FEMMCForceDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMMCForceData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMMCForceData(FEMMCForceDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMMCForceData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMMCForceData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMMCrigidities(FEMMCrigiditiesFields fields, String[] fieldNames)
    {
        return findEqualFEMMCrigidities(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMMCrigidities(FEMMCrigiditiesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMMCrigidities(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMMCrigidities(FEMMCrigiditiesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMMCrigidities");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMMCrigidities(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMMTForceData(FEMMTForceDataFields fields, String[] fieldNames)
    {
        return findEqualFEMMTForceData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMMTForceData(FEMMTForceDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMMTForceData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMMTForceData(FEMMTForceDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMMTForceData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMMTForceData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMMaterial(FEMMaterialFields fields, String[] fieldNames)
    {
        return findEqualFEMMaterial(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMMaterial(FEMMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMMaterial(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMMaterial(FEMMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMMaterial(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMMatrices(FEMMatricesFields fields, String[] fieldNames)
    {
        return findEqualFEMMatrices(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMMatrices(FEMMatricesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMMatrices(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMMatrices(FEMMatricesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMMatrices");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMMatrices(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMMatrixData(FEMMatrixDataFields fields, String[] fieldNames)
    {
        return findEqualFEMMatrixData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMMatrixData(FEMMatrixDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMMatrixData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMMatrixData(FEMMatrixDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMMatrixData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMMatrixData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMMatrixSets(FEMMatrixSetsFields fields, String[] fieldNames)
    {
        return findEqualFEMMatrixSets(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMMatrixSets(FEMMatrixSetsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMMatrixSets(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMMatrixSets(FEMMatrixSetsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMMatrixSets");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMMatrixSets(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMNKDisplForce(FEMNKDisplForceFields fields, String[] fieldNames)
    {
        return findEqualFEMNKDisplForce(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMNKDisplForce(FEMNKDisplForceFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMNKDisplForce(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMNKDisplForce(FEMNKDisplForceFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMNKDisplForce");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMNKDisplForce(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMNLElasticMaterials(FEMNLElasticMaterialsFields fields, String[] fieldNames)
    {
        return findEqualFEMNLElasticMaterials(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMNLElasticMaterials(FEMNLElasticMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMNLElasticMaterials(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMNLElasticMaterials(FEMNLElasticMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMNLElasticMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMNLElasticMaterials(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMNLElasticStrainStress(FEMNLElasticStrainStressFields fields, String[] fieldNames)
    {
        return findEqualFEMNLElasticStrainStress(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMNLElasticStrainStress(FEMNLElasticStrainStressFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMNLElasticStrainStress(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMNLElasticStrainStress(FEMNLElasticStrainStressFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMNLElasticStrainStress");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMNLElasticStrainStress(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMNMTimeMass(FEMNMTimeMassFields fields, String[] fieldNames)
    {
        return findEqualFEMNMTimeMass(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMNMTimeMass(FEMNMTimeMassFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMNMTimeMass(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMNMTimeMass(FEMNMTimeMassFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMNMTimeMass");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMNMTimeMass(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMNTNContact(FEMNTNContactFields fields, String[] fieldNames)
    {
        return findEqualFEMNTNContact(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMNTNContact(FEMNTNContactFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMNTNContact(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMNTNContact(FEMNTNContactFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMNTNContact");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMNTNContact(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMNodalMass(FEMNodalMassFields fields, String[] fieldNames)
    {
        return findEqualFEMNodalMass(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMNodalMass(FEMNodalMassFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMNodalMass(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMNodalMass(FEMNodalMassFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMNodalMass");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMNodalMass(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMNode(FEMNodeFields fields, String[] fieldNames)
    {
        return findEqualFEMNode(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMNode(FEMNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMNode(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMNode(FEMNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMNode(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMOrthotropicMaterial(FEMOrthotropicMaterialFields fields, String[] fieldNames)
    {
        return findEqualFEMOrthotropicMaterial(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMOrthotropicMaterial(FEMOrthotropicMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMOrthotropicMaterial(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMOrthotropicMaterial(FEMOrthotropicMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMOrthotropicMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMOrthotropicMaterial(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMPlasticBilinearMaterial(FEMPlasticBilinearMaterialFields fields, String[] fieldNames)
    {
        return findEqualFEMPlasticBilinearMaterial(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMPlasticBilinearMaterial(FEMPlasticBilinearMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMPlasticBilinearMaterial(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMPlasticBilinearMaterial(FEMPlasticBilinearMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMPlasticBilinearMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMPlasticBilinearMaterial(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMPlasticMlMaterials(FEMPlasticMlMaterialsFields fields, String[] fieldNames)
    {
        return findEqualFEMPlasticMlMaterials(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMPlasticMlMaterials(FEMPlasticMlMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMPlasticMlMaterials(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMPlasticMlMaterials(FEMPlasticMlMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMPlasticMlMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMPlasticMlMaterials(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMPlasticStrainStress(FEMPlasticStrainStressFields fields, String[] fieldNames)
    {
        return findEqualFEMPlasticStrainStress(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMPlasticStrainStress(FEMPlasticStrainStressFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMPlasticStrainStress(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMPlasticStrainStress(FEMPlasticStrainStressFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMPlasticStrainStress");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMPlasticStrainStress(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMPlate(FEMPlateFields fields, String[] fieldNames)
    {
        return findEqualFEMPlate(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMPlate(FEMPlateFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMPlate(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMPlate(FEMPlateFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMPlate");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMPlate(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMPlateGroup(FEMPlateGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMPlateGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMPlateGroup(FEMPlateGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMPlateGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMPlateGroup(FEMPlateGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMPlateGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMPlateGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMPoints(FEMPointsFields fields, String[] fieldNames)
    {
        return findEqualFEMPoints(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMPoints(FEMPointsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMPoints(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMPoints(FEMPointsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMPoints");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMPoints(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMProperties(FEMPropertiesFields fields, String[] fieldNames)
    {
        return findEqualFEMProperties(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMProperties(FEMPropertiesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMProperties(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMProperties(FEMPropertiesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMProperties");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMProperties(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMPropertysets(FEMPropertysetsFields fields, String[] fieldNames)
    {
        return findEqualFEMPropertysets(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMPropertysets(FEMPropertysetsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMPropertysets(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMPropertysets(FEMPropertysetsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMPropertysets");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMPropertysets(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSectionBox(FEMSectionBoxFields fields, String[] fieldNames)
    {
        return findEqualFEMSectionBox(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSectionBox(FEMSectionBoxFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSectionBox(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSectionBox(FEMSectionBoxFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSectionBox");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSectionBox(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSectionI(FEMSectionIFields fields, String[] fieldNames)
    {
        return findEqualFEMSectionI(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSectionI(FEMSectionIFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSectionI(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSectionI(FEMSectionIFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSectionI");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSectionI(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSectionPipe(FEMSectionPipeFields fields, String[] fieldNames)
    {
        return findEqualFEMSectionPipe(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSectionPipe(FEMSectionPipeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSectionPipe(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSectionPipe(FEMSectionPipeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSectionPipe");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSectionPipe(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSectionProp(FEMSectionPropFields fields, String[] fieldNames)
    {
        return findEqualFEMSectionProp(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSectionProp(FEMSectionPropFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSectionProp(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSectionProp(FEMSectionPropFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSectionProp");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSectionProp(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSectionRect(FEMSectionRectFields fields, String[] fieldNames)
    {
        return findEqualFEMSectionRect(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSectionRect(FEMSectionRectFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSectionRect(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSectionRect(FEMSectionRectFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSectionRect");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSectionRect(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMShell(FEMShellFields fields, String[] fieldNames)
    {
        return findEqualFEMShell(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMShell(FEMShellFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMShell(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMShell(FEMShellFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMShell");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMShell(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMShellAxesOrtho(FEMShellAxesOrthoFields fields, String[] fieldNames)
    {
        return findEqualFEMShellAxesOrtho(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMShellAxesOrtho(FEMShellAxesOrthoFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMShellAxesOrtho(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMShellAxesOrtho(FEMShellAxesOrthoFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMShellAxesOrtho");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMShellAxesOrtho(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMShellAxesOrthoData(FEMShellAxesOrthoDataFields fields, String[] fieldNames)
    {
        return findEqualFEMShellAxesOrthoData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMShellAxesOrthoData(FEMShellAxesOrthoDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMShellAxesOrthoData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMShellAxesOrthoData(FEMShellAxesOrthoDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMShellAxesOrthoData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMShellAxesOrthoData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMShellDOF(FEMShellDOFFields fields, String[] fieldNames)
    {
        return findEqualFEMShellDOF(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMShellDOF(FEMShellDOFFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMShellDOF(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMShellDOF(FEMShellDOFFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMShellDOF");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMShellDOF(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMShellGroup(FEMShellGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMShellGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMShellGroup(FEMShellGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMShellGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMShellGroup(FEMShellGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMShellGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMShellGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMShellLayer(FEMShellLayerFields fields, String[] fieldNames)
    {
        return findEqualFEMShellLayer(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMShellLayer(FEMShellLayerFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMShellLayer(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMShellLayer(FEMShellLayerFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMShellLayer");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMShellLayer(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMShellPressure(FEMShellPressureFields fields, String[] fieldNames)
    {
        return findEqualFEMShellPressure(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMShellPressure(FEMShellPressureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMShellPressure(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMShellPressure(FEMShellPressureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMShellPressure");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMShellPressure(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSkewDOF(FEMSkewDOFFields fields, String[] fieldNames)
    {
        return findEqualFEMSkewDOF(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSkewDOF(FEMSkewDOFFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSkewDOF(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSkewDOF(FEMSkewDOFFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSkewDOF");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSkewDOF(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSkewSysAngles(FEMSkewSysAnglesFields fields, String[] fieldNames)
    {
        return findEqualFEMSkewSysAngles(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSkewSysAngles(FEMSkewSysAnglesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSkewSysAngles(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSkewSysAngles(FEMSkewSysAnglesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSkewSysAngles");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSkewSysAngles(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSkeySysNode(FEMSkeySysNodeFields fields, String[] fieldNames)
    {
        return findEqualFEMSkeySysNode(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSkeySysNode(FEMSkeySysNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSkeySysNode(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSkeySysNode(FEMSkeySysNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSkeySysNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSkeySysNode(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSpring(FEMSpringFields fields, String[] fieldNames)
    {
        return findEqualFEMSpring(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSpring(FEMSpringFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSpring(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSpring(FEMSpringFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSpring");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSpring(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMSpringGroup(FEMSpringGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMSpringGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMSpringGroup(FEMSpringGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMSpringGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMSpringGroup(FEMSpringGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMSpringGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMSpringGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMStrLines(FEMStrLinesFields fields, String[] fieldNames)
    {
        return findEqualFEMStrLines(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMStrLines(FEMStrLinesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMStrLines(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMStrLines(FEMStrLinesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMStrLines");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMStrLines(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMThermoIsoData(FEMThermoIsoDataFields fields, String[] fieldNames)
    {
        return findEqualFEMThermoIsoData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMThermoIsoData(FEMThermoIsoDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMThermoIsoData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMThermoIsoData(FEMThermoIsoDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMThermoIsoData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMThermoIsoData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMThermoIsoMaterials(FEMThermoIsoMaterialsFields fields, String[] fieldNames)
    {
        return findEqualFEMThermoIsoMaterials(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMThermoIsoMaterials(FEMThermoIsoMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMThermoIsoMaterials(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMThermoIsoMaterials(FEMThermoIsoMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMThermoIsoMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMThermoIsoMaterials(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMThermoOrthData(FEMThermoOrthDataFields fields, String[] fieldNames)
    {
        return findEqualFEMThermoOrthData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMThermoOrthData(FEMThermoOrthDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMThermoOrthData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMThermoOrthData(FEMThermoOrthDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMThermoOrthData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMThermoOrthData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMThermoOrthMaterials(FEMThermoOrthMaterialsFields fields, String[] fieldNames)
    {
        return findEqualFEMThermoOrthMaterials(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMThermoOrthMaterials(FEMThermoOrthMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMThermoOrthMaterials(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMThermoOrthMaterials(FEMThermoOrthMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMThermoOrthMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMThermoOrthMaterials(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMThreeDSolid(FEMThreeDSolidFields fields, String[] fieldNames)
    {
        return findEqualFEMThreeDSolid(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMThreeDSolid(FEMThreeDSolidFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMThreeDSolid(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMThreeDSolid(FEMThreeDSolidFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMThreeDSolid");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMThreeDSolid(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMThreeDSolidGroup(FEMThreeDSolidGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMThreeDSolidGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMThreeDSolidGroup(FEMThreeDSolidGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMThreeDSolidGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMThreeDSolidGroup(FEMThreeDSolidGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMThreeDSolidGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMThreeDSolidGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMTimeFunctionData(FEMTimeFunctionDataFields fields, String[] fieldNames)
    {
        return findEqualFEMTimeFunctionData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMTimeFunctionData(FEMTimeFunctionDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMTimeFunctionData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMTimeFunctionData(FEMTimeFunctionDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMTimeFunctionData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMTimeFunctionData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMTimeFunctions(FEMTimeFunctionsFields fields, String[] fieldNames)
    {
        return findEqualFEMTimeFunctions(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMTimeFunctions(FEMTimeFunctionsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMTimeFunctions(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMTimeFunctions(FEMTimeFunctionsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMTimeFunctions");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMTimeFunctions(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMTruss(FEMTrussFields fields, String[] fieldNames)
    {
        return findEqualFEMTruss(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMTruss(FEMTrussFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMTruss(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMTruss(FEMTrussFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMTruss");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMTruss(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMTrussGroup(FEMTrussGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMTrussGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMTrussGroup(FEMTrussGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMTrussGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMTrussGroup(FEMTrussGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMTrussGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMTrussGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMTwistMomentData(FEMTwistMomentDataFields fields, String[] fieldNames)
    {
        return findEqualFEMTwistMomentData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMTwistMomentData(FEMTwistMomentDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMTwistMomentData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMTwistMomentData(FEMTwistMomentDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMTwistMomentData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMTwistMomentData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMTwoDSolid(FEMTwoDSolidFields fields, String[] fieldNames)
    {
        return findEqualFEMTwoDSolid(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMTwoDSolid(FEMTwoDSolidFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMTwoDSolid(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMTwoDSolid(FEMTwoDSolidFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMTwoDSolid");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMTwoDSolid(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualFEMTwoDSolidGroup(FEMTwoDSolidGroupFields fields, String[] fieldNames)
    {
        return findEqualFEMTwoDSolidGroup(fields, fieldNames, null, false);
    }

    public long[]
    findEqualFEMTwoDSolidGroup(FEMTwoDSolidGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualFEMTwoDSolidGroup(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualFEMTwoDSolidGroup(FEMTwoDSolidGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualFEMTwoDSolidGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualFEMTwoDSolidGroup(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualMappingMatrix(MappingMatrixFields fields, String[] fieldNames)
    {
        return findEqualMappingMatrix(fields, fieldNames, null, false);
    }

    public long[]
    findEqualMappingMatrix(MappingMatrixFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualMappingMatrix(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualMappingMatrix(MappingMatrixFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualMappingMatrix");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualMappingMatrix(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualSensor(SensorFields fields, String[] fieldNames)
    {
        return findEqualSensor(fields, fieldNames, null, false);
    }

    public long[]
    findEqualSensor(SensorFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualSensor(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualSensor(SensorFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualSensor");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualSensor(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualSensorTimeData(SensorTimeDataFields fields, String[] fieldNames)
    {
        return findEqualSensorTimeData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualSensorTimeData(SensorTimeDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualSensorTimeData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualSensorTimeData(SensorTimeDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualSensorTimeData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualSensorTimeData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualStructure(StructureFields fields, String[] fieldNames)
    {
        return findEqualStructure(fields, fieldNames, null, false);
    }

    public long[]
    findEqualStructure(StructureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualStructure(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualStructure(StructureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualStructure");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualStructure(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualTransducer(TransducerFields fields, String[] fieldNames)
    {
        return findEqualTransducer(fields, fieldNames, null, false);
    }

    public long[]
    findEqualTransducer(TransducerFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualTransducer(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualTransducer(TransducerFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualTransducer");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualTransducer(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualTransducerCycleData(TransducerCycleDataFields fields, String[] fieldNames)
    {
        return findEqualTransducerCycleData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualTransducerCycleData(TransducerCycleDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualTransducerCycleData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualTransducerCycleData(TransducerCycleDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualTransducerCycleData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualTransducerCycleData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    findEqualTransducerTimeData(TransducerTimeDataFields fields, String[] fieldNames)
    {
        return findEqualTransducerTimeData(fields, fieldNames, null, false);
    }

    public long[]
    findEqualTransducerTimeData(TransducerTimeDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        return findEqualTransducerTimeData(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    findEqualTransducerTimeData(TransducerTimeDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("findEqualTransducerTimeData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.findEqualTransducerTimeData(fields, fieldNames, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AccelMeasPrx
    getAccelMeas(long id)
    {
        return getAccelMeas(id, null, false);
    }

    public AccelMeasPrx
    getAccelMeas(long id, java.util.Map<String, String> __ctx)
    {
        return getAccelMeas(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AccelMeasPrx
    getAccelMeas(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAccelMeas");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getAccelMeas(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AccelMeasFields
    getAccelMeasFields(long id)
    {
        return getAccelMeasFields(id, null, false);
    }

    public AccelMeasFields
    getAccelMeasFields(long id, java.util.Map<String, String> __ctx)
    {
        return getAccelMeasFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AccelMeasFields
    getAccelMeasFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAccelMeasFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getAccelMeasFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AccelMeasFields[]
    getAccelMeasFieldsList(long[] ids)
    {
        return getAccelMeasFieldsList(ids, null, false);
    }

    public AccelMeasFields[]
    getAccelMeasFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getAccelMeasFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AccelMeasFields[]
    getAccelMeasFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAccelMeasFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getAccelMeasFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getAccelMeasIds()
    {
        return getAccelMeasIds(null, false);
    }

    public long[]
    getAccelMeasIds(java.util.Map<String, String> __ctx)
    {
        return getAccelMeasIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getAccelMeasIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAccelMeasIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getAccelMeasIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public AccelMeasPrx[]
    getAccelMeasList(long[] ids)
    {
        return getAccelMeasList(ids, null, false);
    }

    public AccelMeasPrx[]
    getAccelMeasList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getAccelMeasList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private AccelMeasPrx[]
    getAccelMeasList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAccelMeasList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getAccelMeasList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public CyclePrx
    getCycle(long id)
    {
        return getCycle(id, null, false);
    }

    public CyclePrx
    getCycle(long id, java.util.Map<String, String> __ctx)
    {
        return getCycle(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private CyclePrx
    getCycle(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCycle");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getCycle(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public CycleFields
    getCycleFields(long id)
    {
        return getCycleFields(id, null, false);
    }

    public CycleFields
    getCycleFields(long id, java.util.Map<String, String> __ctx)
    {
        return getCycleFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private CycleFields
    getCycleFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCycleFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getCycleFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public CycleFields[]
    getCycleFieldsList(long[] ids)
    {
        return getCycleFieldsList(ids, null, false);
    }

    public CycleFields[]
    getCycleFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getCycleFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private CycleFields[]
    getCycleFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCycleFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getCycleFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getCycleIds()
    {
        return getCycleIds(null, false);
    }

    public long[]
    getCycleIds(java.util.Map<String, String> __ctx)
    {
        return getCycleIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getCycleIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCycleIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getCycleIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public CyclePrx[]
    getCycleList(long[] ids)
    {
        return getCycleList(ids, null, false);
    }

    public CyclePrx[]
    getCycleList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getCycleList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private CyclePrx[]
    getCycleList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCycleList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getCycleList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitPrx
    getDaqUnit(long id)
    {
        return getDaqUnit(id, null, false);
    }

    public DaqUnitPrx
    getDaqUnit(long id, java.util.Map<String, String> __ctx)
    {
        return getDaqUnit(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitPrx
    getDaqUnit(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnit");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnit(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitChannelPrx
    getDaqUnitChannel(long id)
    {
        return getDaqUnitChannel(id, null, false);
    }

    public DaqUnitChannelPrx
    getDaqUnitChannel(long id, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannel(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitChannelPrx
    getDaqUnitChannel(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannel");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannel(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitChannelDataPrx
    getDaqUnitChannelData(long id)
    {
        return getDaqUnitChannelData(id, null, false);
    }

    public DaqUnitChannelDataPrx
    getDaqUnitChannelData(long id, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitChannelDataPrx
    getDaqUnitChannelData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitChannelDataFields
    getDaqUnitChannelDataFields(long id)
    {
        return getDaqUnitChannelDataFields(id, null, false);
    }

    public DaqUnitChannelDataFields
    getDaqUnitChannelDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitChannelDataFields
    getDaqUnitChannelDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitChannelDataFields[]
    getDaqUnitChannelDataFieldsList(long[] ids)
    {
        return getDaqUnitChannelDataFieldsList(ids, null, false);
    }

    public DaqUnitChannelDataFields[]
    getDaqUnitChannelDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitChannelDataFields[]
    getDaqUnitChannelDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getDaqUnitChannelDataIds()
    {
        return getDaqUnitChannelDataIds(null, false);
    }

    public long[]
    getDaqUnitChannelDataIds(java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getDaqUnitChannelDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitChannelDataPrx[]
    getDaqUnitChannelDataList(long[] ids)
    {
        return getDaqUnitChannelDataList(ids, null, false);
    }

    public DaqUnitChannelDataPrx[]
    getDaqUnitChannelDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitChannelDataPrx[]
    getDaqUnitChannelDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitChannelFields
    getDaqUnitChannelFields(long id)
    {
        return getDaqUnitChannelFields(id, null, false);
    }

    public DaqUnitChannelFields
    getDaqUnitChannelFields(long id, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitChannelFields
    getDaqUnitChannelFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitChannelFields[]
    getDaqUnitChannelFieldsList(long[] ids)
    {
        return getDaqUnitChannelFieldsList(ids, null, false);
    }

    public DaqUnitChannelFields[]
    getDaqUnitChannelFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitChannelFields[]
    getDaqUnitChannelFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getDaqUnitChannelIds()
    {
        return getDaqUnitChannelIds(null, false);
    }

    public long[]
    getDaqUnitChannelIds(java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getDaqUnitChannelIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitChannelPrx[]
    getDaqUnitChannelList(long[] ids)
    {
        return getDaqUnitChannelList(ids, null, false);
    }

    public DaqUnitChannelPrx[]
    getDaqUnitChannelList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitChannelList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitChannelPrx[]
    getDaqUnitChannelList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitChannelList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitChannelList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitFields
    getDaqUnitFields(long id)
    {
        return getDaqUnitFields(id, null, false);
    }

    public DaqUnitFields
    getDaqUnitFields(long id, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitFields
    getDaqUnitFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitFields[]
    getDaqUnitFieldsList(long[] ids)
    {
        return getDaqUnitFieldsList(ids, null, false);
    }

    public DaqUnitFields[]
    getDaqUnitFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitFields[]
    getDaqUnitFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getDaqUnitIds()
    {
        return getDaqUnitIds(null, false);
    }

    public long[]
    getDaqUnitIds(java.util.Map<String, String> __ctx)
    {
        return getDaqUnitIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getDaqUnitIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public DaqUnitPrx[]
    getDaqUnitList(long[] ids)
    {
        return getDaqUnitList(ids, null, false);
    }

    public DaqUnitPrx[]
    getDaqUnitList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getDaqUnitList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private DaqUnitPrx[]
    getDaqUnitList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDaqUnitList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getDaqUnitList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ExperimentPrx
    getExperiment(long id)
    {
        return getExperiment(id, null, false);
    }

    public ExperimentPrx
    getExperiment(long id, java.util.Map<String, String> __ctx)
    {
        return getExperiment(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ExperimentPrx
    getExperiment(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperiment");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperiment(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ExperimentFields
    getExperimentFields(long id)
    {
        return getExperimentFields(id, null, false);
    }

    public ExperimentFields
    getExperimentFields(long id, java.util.Map<String, String> __ctx)
    {
        return getExperimentFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ExperimentFields
    getExperimentFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ExperimentFields[]
    getExperimentFieldsList(long[] ids)
    {
        return getExperimentFieldsList(ids, null, false);
    }

    public ExperimentFields[]
    getExperimentFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getExperimentFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ExperimentFields[]
    getExperimentFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getExperimentIds()
    {
        return getExperimentIds(null, false);
    }

    public long[]
    getExperimentIds(java.util.Map<String, String> __ctx)
    {
        return getExperimentIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getExperimentIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ExperimentPrx[]
    getExperimentList(long[] ids)
    {
        return getExperimentList(ids, null, false);
    }

    public ExperimentPrx[]
    getExperimentList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getExperimentList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ExperimentPrx[]
    getExperimentList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ExperimentStructureDataPrx
    getExperimentStructureData(long id)
    {
        return getExperimentStructureData(id, null, false);
    }

    public ExperimentStructureDataPrx
    getExperimentStructureData(long id, java.util.Map<String, String> __ctx)
    {
        return getExperimentStructureData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ExperimentStructureDataPrx
    getExperimentStructureData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentStructureData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentStructureData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ExperimentStructureDataFields
    getExperimentStructureDataFields(long id)
    {
        return getExperimentStructureDataFields(id, null, false);
    }

    public ExperimentStructureDataFields
    getExperimentStructureDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getExperimentStructureDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ExperimentStructureDataFields
    getExperimentStructureDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentStructureDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentStructureDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ExperimentStructureDataFields[]
    getExperimentStructureDataFieldsList(long[] ids)
    {
        return getExperimentStructureDataFieldsList(ids, null, false);
    }

    public ExperimentStructureDataFields[]
    getExperimentStructureDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getExperimentStructureDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ExperimentStructureDataFields[]
    getExperimentStructureDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentStructureDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentStructureDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getExperimentStructureDataIds()
    {
        return getExperimentStructureDataIds(null, false);
    }

    public long[]
    getExperimentStructureDataIds(java.util.Map<String, String> __ctx)
    {
        return getExperimentStructureDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getExperimentStructureDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentStructureDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentStructureDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public ExperimentStructureDataPrx[]
    getExperimentStructureDataList(long[] ids)
    {
        return getExperimentStructureDataList(ids, null, false);
    }

    public ExperimentStructureDataPrx[]
    getExperimentStructureDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getExperimentStructureDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private ExperimentStructureDataPrx[]
    getExperimentStructureDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getExperimentStructureDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getExperimentStructureDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedConcentratedLoadPrx
    getFEMAppliedConcentratedLoad(long id)
    {
        return getFEMAppliedConcentratedLoad(id, null, false);
    }

    public FEMAppliedConcentratedLoadPrx
    getFEMAppliedConcentratedLoad(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedConcentratedLoad(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedConcentratedLoadPrx
    getFEMAppliedConcentratedLoad(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedConcentratedLoad");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedConcentratedLoad(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedConcentratedLoadFields
    getFEMAppliedConcentratedLoadFields(long id)
    {
        return getFEMAppliedConcentratedLoadFields(id, null, false);
    }

    public FEMAppliedConcentratedLoadFields
    getFEMAppliedConcentratedLoadFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedConcentratedLoadFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedConcentratedLoadFields
    getFEMAppliedConcentratedLoadFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedConcentratedLoadFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedConcentratedLoadFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedConcentratedLoadFields[]
    getFEMAppliedConcentratedLoadFieldsList(long[] ids)
    {
        return getFEMAppliedConcentratedLoadFieldsList(ids, null, false);
    }

    public FEMAppliedConcentratedLoadFields[]
    getFEMAppliedConcentratedLoadFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedConcentratedLoadFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedConcentratedLoadFields[]
    getFEMAppliedConcentratedLoadFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedConcentratedLoadFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedConcentratedLoadFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMAppliedConcentratedLoadIds()
    {
        return getFEMAppliedConcentratedLoadIds(null, false);
    }

    public long[]
    getFEMAppliedConcentratedLoadIds(java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedConcentratedLoadIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMAppliedConcentratedLoadIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedConcentratedLoadIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedConcentratedLoadIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedConcentratedLoadPrx[]
    getFEMAppliedConcentratedLoadList(long[] ids)
    {
        return getFEMAppliedConcentratedLoadList(ids, null, false);
    }

    public FEMAppliedConcentratedLoadPrx[]
    getFEMAppliedConcentratedLoadList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedConcentratedLoadList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedConcentratedLoadPrx[]
    getFEMAppliedConcentratedLoadList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedConcentratedLoadList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedConcentratedLoadList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedDisplacementPrx
    getFEMAppliedDisplacement(long id)
    {
        return getFEMAppliedDisplacement(id, null, false);
    }

    public FEMAppliedDisplacementPrx
    getFEMAppliedDisplacement(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedDisplacement(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedDisplacementPrx
    getFEMAppliedDisplacement(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedDisplacement");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedDisplacement(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedDisplacementFields
    getFEMAppliedDisplacementFields(long id)
    {
        return getFEMAppliedDisplacementFields(id, null, false);
    }

    public FEMAppliedDisplacementFields
    getFEMAppliedDisplacementFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedDisplacementFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedDisplacementFields
    getFEMAppliedDisplacementFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedDisplacementFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedDisplacementFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedDisplacementFields[]
    getFEMAppliedDisplacementFieldsList(long[] ids)
    {
        return getFEMAppliedDisplacementFieldsList(ids, null, false);
    }

    public FEMAppliedDisplacementFields[]
    getFEMAppliedDisplacementFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedDisplacementFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedDisplacementFields[]
    getFEMAppliedDisplacementFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedDisplacementFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedDisplacementFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMAppliedDisplacementIds()
    {
        return getFEMAppliedDisplacementIds(null, false);
    }

    public long[]
    getFEMAppliedDisplacementIds(java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedDisplacementIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMAppliedDisplacementIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedDisplacementIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedDisplacementIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedDisplacementPrx[]
    getFEMAppliedDisplacementList(long[] ids)
    {
        return getFEMAppliedDisplacementList(ids, null, false);
    }

    public FEMAppliedDisplacementPrx[]
    getFEMAppliedDisplacementList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedDisplacementList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedDisplacementPrx[]
    getFEMAppliedDisplacementList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedDisplacementList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedDisplacementList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedLoadsPrx
    getFEMAppliedLoads(long id)
    {
        return getFEMAppliedLoads(id, null, false);
    }

    public FEMAppliedLoadsPrx
    getFEMAppliedLoads(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedLoads(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedLoadsPrx
    getFEMAppliedLoads(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedLoads");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedLoads(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedLoadsFields
    getFEMAppliedLoadsFields(long id)
    {
        return getFEMAppliedLoadsFields(id, null, false);
    }

    public FEMAppliedLoadsFields
    getFEMAppliedLoadsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedLoadsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedLoadsFields
    getFEMAppliedLoadsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedLoadsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedLoadsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedLoadsFields[]
    getFEMAppliedLoadsFieldsList(long[] ids)
    {
        return getFEMAppliedLoadsFieldsList(ids, null, false);
    }

    public FEMAppliedLoadsFields[]
    getFEMAppliedLoadsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedLoadsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedLoadsFields[]
    getFEMAppliedLoadsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedLoadsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedLoadsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMAppliedLoadsIds()
    {
        return getFEMAppliedLoadsIds(null, false);
    }

    public long[]
    getFEMAppliedLoadsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedLoadsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMAppliedLoadsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedLoadsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedLoadsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedLoadsPrx[]
    getFEMAppliedLoadsList(long[] ids)
    {
        return getFEMAppliedLoadsList(ids, null, false);
    }

    public FEMAppliedLoadsPrx[]
    getFEMAppliedLoadsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedLoadsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedLoadsPrx[]
    getFEMAppliedLoadsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedLoadsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedLoadsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedTemperaturePrx
    getFEMAppliedTemperature(long id)
    {
        return getFEMAppliedTemperature(id, null, false);
    }

    public FEMAppliedTemperaturePrx
    getFEMAppliedTemperature(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedTemperature(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedTemperaturePrx
    getFEMAppliedTemperature(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedTemperature");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedTemperature(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedTemperatureFields
    getFEMAppliedTemperatureFields(long id)
    {
        return getFEMAppliedTemperatureFields(id, null, false);
    }

    public FEMAppliedTemperatureFields
    getFEMAppliedTemperatureFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedTemperatureFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedTemperatureFields
    getFEMAppliedTemperatureFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedTemperatureFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedTemperatureFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedTemperatureFields[]
    getFEMAppliedTemperatureFieldsList(long[] ids)
    {
        return getFEMAppliedTemperatureFieldsList(ids, null, false);
    }

    public FEMAppliedTemperatureFields[]
    getFEMAppliedTemperatureFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedTemperatureFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedTemperatureFields[]
    getFEMAppliedTemperatureFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedTemperatureFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedTemperatureFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMAppliedTemperatureIds()
    {
        return getFEMAppliedTemperatureIds(null, false);
    }

    public long[]
    getFEMAppliedTemperatureIds(java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedTemperatureIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMAppliedTemperatureIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedTemperatureIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedTemperatureIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAppliedTemperaturePrx[]
    getFEMAppliedTemperatureList(long[] ids)
    {
        return getFEMAppliedTemperatureList(ids, null, false);
    }

    public FEMAppliedTemperaturePrx[]
    getFEMAppliedTemperatureList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAppliedTemperatureList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAppliedTemperaturePrx[]
    getFEMAppliedTemperatureList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAppliedTemperatureList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAppliedTemperatureList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAxesNodePrx
    getFEMAxesNode(long id)
    {
        return getFEMAxesNode(id, null, false);
    }

    public FEMAxesNodePrx
    getFEMAxesNode(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAxesNode(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAxesNodePrx
    getFEMAxesNode(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAxesNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAxesNode(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAxesNodeFields
    getFEMAxesNodeFields(long id)
    {
        return getFEMAxesNodeFields(id, null, false);
    }

    public FEMAxesNodeFields
    getFEMAxesNodeFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMAxesNodeFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAxesNodeFields
    getFEMAxesNodeFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAxesNodeFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAxesNodeFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAxesNodeFields[]
    getFEMAxesNodeFieldsList(long[] ids)
    {
        return getFEMAxesNodeFieldsList(ids, null, false);
    }

    public FEMAxesNodeFields[]
    getFEMAxesNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAxesNodeFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAxesNodeFields[]
    getFEMAxesNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAxesNodeFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAxesNodeFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMAxesNodeIds()
    {
        return getFEMAxesNodeIds(null, false);
    }

    public long[]
    getFEMAxesNodeIds(java.util.Map<String, String> __ctx)
    {
        return getFEMAxesNodeIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMAxesNodeIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAxesNodeIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAxesNodeIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMAxesNodePrx[]
    getFEMAxesNodeList(long[] ids)
    {
        return getFEMAxesNodeList(ids, null, false);
    }

    public FEMAxesNodePrx[]
    getFEMAxesNodeList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMAxesNodeList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMAxesNodePrx[]
    getFEMAxesNodeList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMAxesNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMAxesNodeList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamPrx
    getFEMBeam(long id)
    {
        return getFEMBeam(id, null, false);
    }

    public FEMBeamPrx
    getFEMBeam(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMBeam(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamPrx
    getFEMBeam(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeam");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeam(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamFields
    getFEMBeamFields(long id)
    {
        return getFEMBeamFields(id, null, false);
    }

    public FEMBeamFields
    getFEMBeamFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamFields
    getFEMBeamFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamFields[]
    getFEMBeamFieldsList(long[] ids)
    {
        return getFEMBeamFieldsList(ids, null, false);
    }

    public FEMBeamFields[]
    getFEMBeamFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamFields[]
    getFEMBeamFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMBeamIds()
    {
        return getFEMBeamIds(null, false);
    }

    public long[]
    getFEMBeamIds(java.util.Map<String, String> __ctx)
    {
        return getFEMBeamIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMBeamIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamPrx[]
    getFEMBeamList(long[] ids)
    {
        return getFEMBeamList(ids, null, false);
    }

    public FEMBeamPrx[]
    getFEMBeamList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamPrx[]
    getFEMBeamList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamLoadPrx
    getFEMBeamLoad(long id)
    {
        return getFEMBeamLoad(id, null, false);
    }

    public FEMBeamLoadPrx
    getFEMBeamLoad(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamLoad(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamLoadPrx
    getFEMBeamLoad(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamLoad");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamLoad(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamLoadFields
    getFEMBeamLoadFields(long id)
    {
        return getFEMBeamLoadFields(id, null, false);
    }

    public FEMBeamLoadFields
    getFEMBeamLoadFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamLoadFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamLoadFields
    getFEMBeamLoadFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamLoadFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamLoadFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamLoadFields[]
    getFEMBeamLoadFieldsList(long[] ids)
    {
        return getFEMBeamLoadFieldsList(ids, null, false);
    }

    public FEMBeamLoadFields[]
    getFEMBeamLoadFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamLoadFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamLoadFields[]
    getFEMBeamLoadFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamLoadFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamLoadFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMBeamLoadIds()
    {
        return getFEMBeamLoadIds(null, false);
    }

    public long[]
    getFEMBeamLoadIds(java.util.Map<String, String> __ctx)
    {
        return getFEMBeamLoadIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMBeamLoadIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamLoadIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamLoadIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamLoadPrx[]
    getFEMBeamLoadList(long[] ids)
    {
        return getFEMBeamLoadList(ids, null, false);
    }

    public FEMBeamLoadPrx[]
    getFEMBeamLoadList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamLoadList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamLoadPrx[]
    getFEMBeamLoadList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamLoadList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamLoadList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamNodePrx
    getFEMBeamNode(long id)
    {
        return getFEMBeamNode(id, null, false);
    }

    public FEMBeamNodePrx
    getFEMBeamNode(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamNode(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamNodePrx
    getFEMBeamNode(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamNode(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamNodeFields
    getFEMBeamNodeFields(long id)
    {
        return getFEMBeamNodeFields(id, null, false);
    }

    public FEMBeamNodeFields
    getFEMBeamNodeFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamNodeFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamNodeFields
    getFEMBeamNodeFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamNodeFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamNodeFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamNodeFields[]
    getFEMBeamNodeFieldsList(long[] ids)
    {
        return getFEMBeamNodeFieldsList(ids, null, false);
    }

    public FEMBeamNodeFields[]
    getFEMBeamNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamNodeFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamNodeFields[]
    getFEMBeamNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamNodeFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamNodeFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMBeamNodeIds()
    {
        return getFEMBeamNodeIds(null, false);
    }

    public long[]
    getFEMBeamNodeIds(java.util.Map<String, String> __ctx)
    {
        return getFEMBeamNodeIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMBeamNodeIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamNodeIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamNodeIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBeamNodePrx[]
    getFEMBeamNodeList(long[] ids)
    {
        return getFEMBeamNodeList(ids, null, false);
    }

    public FEMBeamNodePrx[]
    getFEMBeamNodeList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMBeamNodeList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBeamNodePrx[]
    getFEMBeamNodeList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBeamNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBeamNodeList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBoundaryPrx
    getFEMBoundary(long id)
    {
        return getFEMBoundary(id, null, false);
    }

    public FEMBoundaryPrx
    getFEMBoundary(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMBoundary(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBoundaryPrx
    getFEMBoundary(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBoundary");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBoundary(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBoundaryFields
    getFEMBoundaryFields(long id)
    {
        return getFEMBoundaryFields(id, null, false);
    }

    public FEMBoundaryFields
    getFEMBoundaryFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMBoundaryFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBoundaryFields
    getFEMBoundaryFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBoundaryFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBoundaryFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBoundaryFields[]
    getFEMBoundaryFieldsList(long[] ids)
    {
        return getFEMBoundaryFieldsList(ids, null, false);
    }

    public FEMBoundaryFields[]
    getFEMBoundaryFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMBoundaryFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBoundaryFields[]
    getFEMBoundaryFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBoundaryFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBoundaryFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMBoundaryIds()
    {
        return getFEMBoundaryIds(null, false);
    }

    public long[]
    getFEMBoundaryIds(java.util.Map<String, String> __ctx)
    {
        return getFEMBoundaryIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMBoundaryIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBoundaryIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBoundaryIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMBoundaryPrx[]
    getFEMBoundaryList(long[] ids)
    {
        return getFEMBoundaryList(ids, null, false);
    }

    public FEMBoundaryPrx[]
    getFEMBoundaryList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMBoundaryList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMBoundaryPrx[]
    getFEMBoundaryList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMBoundaryList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMBoundaryList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMConstraintCoefPrx
    getFEMConstraintCoef(long id)
    {
        return getFEMConstraintCoef(id, null, false);
    }

    public FEMConstraintCoefPrx
    getFEMConstraintCoef(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintCoef(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMConstraintCoefPrx
    getFEMConstraintCoef(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintCoef");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintCoef(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMConstraintCoefFields
    getFEMConstraintCoefFields(long id)
    {
        return getFEMConstraintCoefFields(id, null, false);
    }

    public FEMConstraintCoefFields
    getFEMConstraintCoefFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintCoefFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMConstraintCoefFields
    getFEMConstraintCoefFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintCoefFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintCoefFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMConstraintCoefFields[]
    getFEMConstraintCoefFieldsList(long[] ids)
    {
        return getFEMConstraintCoefFieldsList(ids, null, false);
    }

    public FEMConstraintCoefFields[]
    getFEMConstraintCoefFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintCoefFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMConstraintCoefFields[]
    getFEMConstraintCoefFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintCoefFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintCoefFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMConstraintCoefIds()
    {
        return getFEMConstraintCoefIds(null, false);
    }

    public long[]
    getFEMConstraintCoefIds(java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintCoefIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMConstraintCoefIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintCoefIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintCoefIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMConstraintCoefPrx[]
    getFEMConstraintCoefList(long[] ids)
    {
        return getFEMConstraintCoefList(ids, null, false);
    }

    public FEMConstraintCoefPrx[]
    getFEMConstraintCoefList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintCoefList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMConstraintCoefPrx[]
    getFEMConstraintCoefList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintCoefList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintCoefList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMConstraintsPrx
    getFEMConstraints(long id)
    {
        return getFEMConstraints(id, null, false);
    }

    public FEMConstraintsPrx
    getFEMConstraints(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMConstraints(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMConstraintsPrx
    getFEMConstraints(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraints");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraints(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMConstraintsFields
    getFEMConstraintsFields(long id)
    {
        return getFEMConstraintsFields(id, null, false);
    }

    public FEMConstraintsFields
    getFEMConstraintsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMConstraintsFields
    getFEMConstraintsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMConstraintsFields[]
    getFEMConstraintsFieldsList(long[] ids)
    {
        return getFEMConstraintsFieldsList(ids, null, false);
    }

    public FEMConstraintsFields[]
    getFEMConstraintsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMConstraintsFields[]
    getFEMConstraintsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMConstraintsIds()
    {
        return getFEMConstraintsIds(null, false);
    }

    public long[]
    getFEMConstraintsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMConstraintsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMConstraintsPrx[]
    getFEMConstraintsList(long[] ids)
    {
        return getFEMConstraintsList(ids, null, false);
    }

    public FEMConstraintsPrx[]
    getFEMConstraintsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMConstraintsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMConstraintsPrx[]
    getFEMConstraintsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMConstraintsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMConstraintsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactGroup3Prx
    getFEMContactGroup3(long id)
    {
        return getFEMContactGroup3(id, null, false);
    }

    public FEMContactGroup3Prx
    getFEMContactGroup3(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMContactGroup3(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactGroup3Prx
    getFEMContactGroup3(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactGroup3");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactGroup3(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactGroup3Fields
    getFEMContactGroup3Fields(long id)
    {
        return getFEMContactGroup3Fields(id, null, false);
    }

    public FEMContactGroup3Fields
    getFEMContactGroup3Fields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMContactGroup3Fields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactGroup3Fields
    getFEMContactGroup3Fields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactGroup3Fields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactGroup3Fields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactGroup3Fields[]
    getFEMContactGroup3FieldsList(long[] ids)
    {
        return getFEMContactGroup3FieldsList(ids, null, false);
    }

    public FEMContactGroup3Fields[]
    getFEMContactGroup3FieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMContactGroup3FieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactGroup3Fields[]
    getFEMContactGroup3FieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactGroup3FieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactGroup3FieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMContactGroup3Ids()
    {
        return getFEMContactGroup3Ids(null, false);
    }

    public long[]
    getFEMContactGroup3Ids(java.util.Map<String, String> __ctx)
    {
        return getFEMContactGroup3Ids(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMContactGroup3Ids(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactGroup3Ids");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactGroup3Ids(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactGroup3Prx[]
    getFEMContactGroup3List(long[] ids)
    {
        return getFEMContactGroup3List(ids, null, false);
    }

    public FEMContactGroup3Prx[]
    getFEMContactGroup3List(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMContactGroup3List(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactGroup3Prx[]
    getFEMContactGroup3List(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactGroup3List");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactGroup3List(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactPairsPrx
    getFEMContactPairs(long id)
    {
        return getFEMContactPairs(id, null, false);
    }

    public FEMContactPairsPrx
    getFEMContactPairs(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMContactPairs(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactPairsPrx
    getFEMContactPairs(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactPairs");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactPairs(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactPairsFields
    getFEMContactPairsFields(long id)
    {
        return getFEMContactPairsFields(id, null, false);
    }

    public FEMContactPairsFields
    getFEMContactPairsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMContactPairsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactPairsFields
    getFEMContactPairsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactPairsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactPairsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactPairsFields[]
    getFEMContactPairsFieldsList(long[] ids)
    {
        return getFEMContactPairsFieldsList(ids, null, false);
    }

    public FEMContactPairsFields[]
    getFEMContactPairsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMContactPairsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactPairsFields[]
    getFEMContactPairsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactPairsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactPairsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMContactPairsIds()
    {
        return getFEMContactPairsIds(null, false);
    }

    public long[]
    getFEMContactPairsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMContactPairsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMContactPairsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactPairsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactPairsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactPairsPrx[]
    getFEMContactPairsList(long[] ids)
    {
        return getFEMContactPairsList(ids, null, false);
    }

    public FEMContactPairsPrx[]
    getFEMContactPairsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMContactPairsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactPairsPrx[]
    getFEMContactPairsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactPairsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactPairsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactSurfacePrx
    getFEMContactSurface(long id)
    {
        return getFEMContactSurface(id, null, false);
    }

    public FEMContactSurfacePrx
    getFEMContactSurface(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMContactSurface(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactSurfacePrx
    getFEMContactSurface(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactSurface");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactSurface(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactSurfaceFields
    getFEMContactSurfaceFields(long id)
    {
        return getFEMContactSurfaceFields(id, null, false);
    }

    public FEMContactSurfaceFields
    getFEMContactSurfaceFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMContactSurfaceFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactSurfaceFields
    getFEMContactSurfaceFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactSurfaceFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactSurfaceFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactSurfaceFields[]
    getFEMContactSurfaceFieldsList(long[] ids)
    {
        return getFEMContactSurfaceFieldsList(ids, null, false);
    }

    public FEMContactSurfaceFields[]
    getFEMContactSurfaceFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMContactSurfaceFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactSurfaceFields[]
    getFEMContactSurfaceFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactSurfaceFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactSurfaceFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMContactSurfaceIds()
    {
        return getFEMContactSurfaceIds(null, false);
    }

    public long[]
    getFEMContactSurfaceIds(java.util.Map<String, String> __ctx)
    {
        return getFEMContactSurfaceIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMContactSurfaceIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactSurfaceIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactSurfaceIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMContactSurfacePrx[]
    getFEMContactSurfaceList(long[] ids)
    {
        return getFEMContactSurfaceList(ids, null, false);
    }

    public FEMContactSurfacePrx[]
    getFEMContactSurfaceList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMContactSurfaceList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMContactSurfacePrx[]
    getFEMContactSurfaceList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMContactSurfaceList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMContactSurfaceList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCoordSystemPrx
    getFEMCoordSystem(long id)
    {
        return getFEMCoordSystem(id, null, false);
    }

    public FEMCoordSystemPrx
    getFEMCoordSystem(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMCoordSystem(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCoordSystemPrx
    getFEMCoordSystem(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCoordSystem");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCoordSystem(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCoordSystemFields
    getFEMCoordSystemFields(long id)
    {
        return getFEMCoordSystemFields(id, null, false);
    }

    public FEMCoordSystemFields
    getFEMCoordSystemFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMCoordSystemFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCoordSystemFields
    getFEMCoordSystemFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCoordSystemFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCoordSystemFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCoordSystemFields[]
    getFEMCoordSystemFieldsList(long[] ids)
    {
        return getFEMCoordSystemFieldsList(ids, null, false);
    }

    public FEMCoordSystemFields[]
    getFEMCoordSystemFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMCoordSystemFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCoordSystemFields[]
    getFEMCoordSystemFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCoordSystemFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCoordSystemFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMCoordSystemIds()
    {
        return getFEMCoordSystemIds(null, false);
    }

    public long[]
    getFEMCoordSystemIds(java.util.Map<String, String> __ctx)
    {
        return getFEMCoordSystemIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMCoordSystemIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCoordSystemIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCoordSystemIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCoordSystemPrx[]
    getFEMCoordSystemList(long[] ids)
    {
        return getFEMCoordSystemList(ids, null, false);
    }

    public FEMCoordSystemPrx[]
    getFEMCoordSystemList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMCoordSystemList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCoordSystemPrx[]
    getFEMCoordSystemList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCoordSystemList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCoordSystemList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCrossSectionsPrx
    getFEMCrossSections(long id)
    {
        return getFEMCrossSections(id, null, false);
    }

    public FEMCrossSectionsPrx
    getFEMCrossSections(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMCrossSections(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCrossSectionsPrx
    getFEMCrossSections(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCrossSections");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCrossSections(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCrossSectionsFields
    getFEMCrossSectionsFields(long id)
    {
        return getFEMCrossSectionsFields(id, null, false);
    }

    public FEMCrossSectionsFields
    getFEMCrossSectionsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMCrossSectionsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCrossSectionsFields
    getFEMCrossSectionsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCrossSectionsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCrossSectionsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCrossSectionsFields[]
    getFEMCrossSectionsFieldsList(long[] ids)
    {
        return getFEMCrossSectionsFieldsList(ids, null, false);
    }

    public FEMCrossSectionsFields[]
    getFEMCrossSectionsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMCrossSectionsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCrossSectionsFields[]
    getFEMCrossSectionsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCrossSectionsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCrossSectionsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMCrossSectionsIds()
    {
        return getFEMCrossSectionsIds(null, false);
    }

    public long[]
    getFEMCrossSectionsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMCrossSectionsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMCrossSectionsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCrossSectionsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCrossSectionsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCrossSectionsPrx[]
    getFEMCrossSectionsList(long[] ids)
    {
        return getFEMCrossSectionsList(ids, null, false);
    }

    public FEMCrossSectionsPrx[]
    getFEMCrossSectionsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMCrossSectionsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCrossSectionsPrx[]
    getFEMCrossSectionsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCrossSectionsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCrossSectionsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCurvMomentDataPrx
    getFEMCurvMomentData(long id)
    {
        return getFEMCurvMomentData(id, null, false);
    }

    public FEMCurvMomentDataPrx
    getFEMCurvMomentData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMCurvMomentData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCurvMomentDataPrx
    getFEMCurvMomentData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCurvMomentData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCurvMomentData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCurvMomentDataFields
    getFEMCurvMomentDataFields(long id)
    {
        return getFEMCurvMomentDataFields(id, null, false);
    }

    public FEMCurvMomentDataFields
    getFEMCurvMomentDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMCurvMomentDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCurvMomentDataFields
    getFEMCurvMomentDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCurvMomentDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCurvMomentDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCurvMomentDataFields[]
    getFEMCurvMomentDataFieldsList(long[] ids)
    {
        return getFEMCurvMomentDataFieldsList(ids, null, false);
    }

    public FEMCurvMomentDataFields[]
    getFEMCurvMomentDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMCurvMomentDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCurvMomentDataFields[]
    getFEMCurvMomentDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCurvMomentDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCurvMomentDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMCurvMomentDataIds()
    {
        return getFEMCurvMomentDataIds(null, false);
    }

    public long[]
    getFEMCurvMomentDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMCurvMomentDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMCurvMomentDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCurvMomentDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCurvMomentDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMCurvMomentDataPrx[]
    getFEMCurvMomentDataList(long[] ids)
    {
        return getFEMCurvMomentDataList(ids, null, false);
    }

    public FEMCurvMomentDataPrx[]
    getFEMCurvMomentDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMCurvMomentDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMCurvMomentDataPrx[]
    getFEMCurvMomentDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMCurvMomentDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMCurvMomentDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMDampingPrx
    getFEMDamping(long id)
    {
        return getFEMDamping(id, null, false);
    }

    public FEMDampingPrx
    getFEMDamping(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMDamping(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMDampingPrx
    getFEMDamping(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDamping");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDamping(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMDampingFields
    getFEMDampingFields(long id)
    {
        return getFEMDampingFields(id, null, false);
    }

    public FEMDampingFields
    getFEMDampingFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMDampingFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMDampingFields
    getFEMDampingFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDampingFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDampingFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMDampingFields[]
    getFEMDampingFieldsList(long[] ids)
    {
        return getFEMDampingFieldsList(ids, null, false);
    }

    public FEMDampingFields[]
    getFEMDampingFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMDampingFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMDampingFields[]
    getFEMDampingFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDampingFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDampingFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMDampingIds()
    {
        return getFEMDampingIds(null, false);
    }

    public long[]
    getFEMDampingIds(java.util.Map<String, String> __ctx)
    {
        return getFEMDampingIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMDampingIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDampingIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDampingIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMDampingPrx[]
    getFEMDampingList(long[] ids)
    {
        return getFEMDampingList(ids, null, false);
    }

    public FEMDampingPrx[]
    getFEMDampingList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMDampingList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMDampingPrx[]
    getFEMDampingList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDampingList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDampingList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMDofPrx
    getFEMDof(long id)
    {
        return getFEMDof(id, null, false);
    }

    public FEMDofPrx
    getFEMDof(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMDof(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMDofPrx
    getFEMDof(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDof");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDof(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMDofFields
    getFEMDofFields(long id)
    {
        return getFEMDofFields(id, null, false);
    }

    public FEMDofFields
    getFEMDofFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMDofFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMDofFields
    getFEMDofFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDofFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDofFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMDofFields[]
    getFEMDofFieldsList(long[] ids)
    {
        return getFEMDofFieldsList(ids, null, false);
    }

    public FEMDofFields[]
    getFEMDofFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMDofFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMDofFields[]
    getFEMDofFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDofFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDofFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMDofIds()
    {
        return getFEMDofIds(null, false);
    }

    public long[]
    getFEMDofIds(java.util.Map<String, String> __ctx)
    {
        return getFEMDofIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMDofIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDofIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDofIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMDofPrx[]
    getFEMDofList(long[] ids)
    {
        return getFEMDofList(ids, null, false);
    }

    public FEMDofPrx[]
    getFEMDofList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMDofList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMDofPrx[]
    getFEMDofList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMDofList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMDofList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMElasticMaterialPrx
    getFEMElasticMaterial(long id)
    {
        return getFEMElasticMaterial(id, null, false);
    }

    public FEMElasticMaterialPrx
    getFEMElasticMaterial(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMElasticMaterial(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMElasticMaterialPrx
    getFEMElasticMaterial(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMElasticMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMElasticMaterial(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMElasticMaterialFields
    getFEMElasticMaterialFields(long id)
    {
        return getFEMElasticMaterialFields(id, null, false);
    }

    public FEMElasticMaterialFields
    getFEMElasticMaterialFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMElasticMaterialFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMElasticMaterialFields
    getFEMElasticMaterialFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMElasticMaterialFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMElasticMaterialFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMElasticMaterialFields[]
    getFEMElasticMaterialFieldsList(long[] ids)
    {
        return getFEMElasticMaterialFieldsList(ids, null, false);
    }

    public FEMElasticMaterialFields[]
    getFEMElasticMaterialFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMElasticMaterialFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMElasticMaterialFields[]
    getFEMElasticMaterialFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMElasticMaterialFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMElasticMaterialFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMElasticMaterialIds()
    {
        return getFEMElasticMaterialIds(null, false);
    }

    public long[]
    getFEMElasticMaterialIds(java.util.Map<String, String> __ctx)
    {
        return getFEMElasticMaterialIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMElasticMaterialIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMElasticMaterialIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMElasticMaterialIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMElasticMaterialPrx[]
    getFEMElasticMaterialList(long[] ids)
    {
        return getFEMElasticMaterialList(ids, null, false);
    }

    public FEMElasticMaterialPrx[]
    getFEMElasticMaterialList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMElasticMaterialList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMElasticMaterialPrx[]
    getFEMElasticMaterialList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMElasticMaterialList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMElasticMaterialList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMEndreleasesPrx
    getFEMEndreleases(long id)
    {
        return getFEMEndreleases(id, null, false);
    }

    public FEMEndreleasesPrx
    getFEMEndreleases(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMEndreleases(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMEndreleasesPrx
    getFEMEndreleases(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMEndreleases");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMEndreleases(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMEndreleasesFields
    getFEMEndreleasesFields(long id)
    {
        return getFEMEndreleasesFields(id, null, false);
    }

    public FEMEndreleasesFields
    getFEMEndreleasesFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMEndreleasesFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMEndreleasesFields
    getFEMEndreleasesFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMEndreleasesFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMEndreleasesFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMEndreleasesFields[]
    getFEMEndreleasesFieldsList(long[] ids)
    {
        return getFEMEndreleasesFieldsList(ids, null, false);
    }

    public FEMEndreleasesFields[]
    getFEMEndreleasesFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMEndreleasesFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMEndreleasesFields[]
    getFEMEndreleasesFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMEndreleasesFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMEndreleasesFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMEndreleasesIds()
    {
        return getFEMEndreleasesIds(null, false);
    }

    public long[]
    getFEMEndreleasesIds(java.util.Map<String, String> __ctx)
    {
        return getFEMEndreleasesIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMEndreleasesIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMEndreleasesIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMEndreleasesIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMEndreleasesPrx[]
    getFEMEndreleasesList(long[] ids)
    {
        return getFEMEndreleasesList(ids, null, false);
    }

    public FEMEndreleasesPrx[]
    getFEMEndreleasesList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMEndreleasesList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMEndreleasesPrx[]
    getFEMEndreleasesList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMEndreleasesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMEndreleasesList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMForceStrainDataPrx
    getFEMForceStrainData(long id)
    {
        return getFEMForceStrainData(id, null, false);
    }

    public FEMForceStrainDataPrx
    getFEMForceStrainData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMForceStrainData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMForceStrainDataPrx
    getFEMForceStrainData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMForceStrainData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMForceStrainData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMForceStrainDataFields
    getFEMForceStrainDataFields(long id)
    {
        return getFEMForceStrainDataFields(id, null, false);
    }

    public FEMForceStrainDataFields
    getFEMForceStrainDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMForceStrainDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMForceStrainDataFields
    getFEMForceStrainDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMForceStrainDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMForceStrainDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMForceStrainDataFields[]
    getFEMForceStrainDataFieldsList(long[] ids)
    {
        return getFEMForceStrainDataFieldsList(ids, null, false);
    }

    public FEMForceStrainDataFields[]
    getFEMForceStrainDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMForceStrainDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMForceStrainDataFields[]
    getFEMForceStrainDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMForceStrainDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMForceStrainDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMForceStrainDataIds()
    {
        return getFEMForceStrainDataIds(null, false);
    }

    public long[]
    getFEMForceStrainDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMForceStrainDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMForceStrainDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMForceStrainDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMForceStrainDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMForceStrainDataPrx[]
    getFEMForceStrainDataList(long[] ids)
    {
        return getFEMForceStrainDataList(ids, null, false);
    }

    public FEMForceStrainDataPrx[]
    getFEMForceStrainDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMForceStrainDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMForceStrainDataPrx[]
    getFEMForceStrainDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMForceStrainDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMForceStrainDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralPrx
    getFEMGeneral(long id)
    {
        return getFEMGeneral(id, null, false);
    }

    public FEMGeneralPrx
    getFEMGeneral(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneral(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralPrx
    getFEMGeneral(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneral");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneral(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralFields
    getFEMGeneralFields(long id)
    {
        return getFEMGeneralFields(id, null, false);
    }

    public FEMGeneralFields
    getFEMGeneralFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralFields
    getFEMGeneralFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralFields[]
    getFEMGeneralFieldsList(long[] ids)
    {
        return getFEMGeneralFieldsList(ids, null, false);
    }

    public FEMGeneralFields[]
    getFEMGeneralFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralFields[]
    getFEMGeneralFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralGroupPrx
    getFEMGeneralGroup(long id)
    {
        return getFEMGeneralGroup(id, null, false);
    }

    public FEMGeneralGroupPrx
    getFEMGeneralGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralGroupPrx
    getFEMGeneralGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralGroupFields
    getFEMGeneralGroupFields(long id)
    {
        return getFEMGeneralGroupFields(id, null, false);
    }

    public FEMGeneralGroupFields
    getFEMGeneralGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralGroupFields
    getFEMGeneralGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralGroupFields[]
    getFEMGeneralGroupFieldsList(long[] ids)
    {
        return getFEMGeneralGroupFieldsList(ids, null, false);
    }

    public FEMGeneralGroupFields[]
    getFEMGeneralGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralGroupFields[]
    getFEMGeneralGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMGeneralGroupIds()
    {
        return getFEMGeneralGroupIds(null, false);
    }

    public long[]
    getFEMGeneralGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMGeneralGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralGroupPrx[]
    getFEMGeneralGroupList(long[] ids)
    {
        return getFEMGeneralGroupList(ids, null, false);
    }

    public FEMGeneralGroupPrx[]
    getFEMGeneralGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralGroupPrx[]
    getFEMGeneralGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMGeneralIds()
    {
        return getFEMGeneralIds(null, false);
    }

    public long[]
    getFEMGeneralIds(java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMGeneralIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralPrx[]
    getFEMGeneralList(long[] ids)
    {
        return getFEMGeneralList(ids, null, false);
    }

    public FEMGeneralPrx[]
    getFEMGeneralList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralPrx[]
    getFEMGeneralList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralNodePrx
    getFEMGeneralNode(long id)
    {
        return getFEMGeneralNode(id, null, false);
    }

    public FEMGeneralNodePrx
    getFEMGeneralNode(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralNode(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralNodePrx
    getFEMGeneralNode(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralNode(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralNodeFields
    getFEMGeneralNodeFields(long id)
    {
        return getFEMGeneralNodeFields(id, null, false);
    }

    public FEMGeneralNodeFields
    getFEMGeneralNodeFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralNodeFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralNodeFields
    getFEMGeneralNodeFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralNodeFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralNodeFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralNodeFields[]
    getFEMGeneralNodeFieldsList(long[] ids)
    {
        return getFEMGeneralNodeFieldsList(ids, null, false);
    }

    public FEMGeneralNodeFields[]
    getFEMGeneralNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralNodeFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralNodeFields[]
    getFEMGeneralNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralNodeFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralNodeFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMGeneralNodeIds()
    {
        return getFEMGeneralNodeIds(null, false);
    }

    public long[]
    getFEMGeneralNodeIds(java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralNodeIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMGeneralNodeIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralNodeIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralNodeIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGeneralNodePrx[]
    getFEMGeneralNodeList(long[] ids)
    {
        return getFEMGeneralNodeList(ids, null, false);
    }

    public FEMGeneralNodePrx[]
    getFEMGeneralNodeList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGeneralNodeList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGeneralNodePrx[]
    getFEMGeneralNodeList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGeneralNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGeneralNodeList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGroundMotionRecordPrx
    getFEMGroundMotionRecord(long id)
    {
        return getFEMGroundMotionRecord(id, null, false);
    }

    public FEMGroundMotionRecordPrx
    getFEMGroundMotionRecord(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGroundMotionRecord(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGroundMotionRecordPrx
    getFEMGroundMotionRecord(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroundMotionRecord");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroundMotionRecord(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGroundMotionRecordFields
    getFEMGroundMotionRecordFields(long id)
    {
        return getFEMGroundMotionRecordFields(id, null, false);
    }

    public FEMGroundMotionRecordFields
    getFEMGroundMotionRecordFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGroundMotionRecordFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGroundMotionRecordFields
    getFEMGroundMotionRecordFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroundMotionRecordFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroundMotionRecordFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGroundMotionRecordFields[]
    getFEMGroundMotionRecordFieldsList(long[] ids)
    {
        return getFEMGroundMotionRecordFieldsList(ids, null, false);
    }

    public FEMGroundMotionRecordFields[]
    getFEMGroundMotionRecordFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGroundMotionRecordFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGroundMotionRecordFields[]
    getFEMGroundMotionRecordFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroundMotionRecordFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroundMotionRecordFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMGroundMotionRecordIds()
    {
        return getFEMGroundMotionRecordIds(null, false);
    }

    public long[]
    getFEMGroundMotionRecordIds(java.util.Map<String, String> __ctx)
    {
        return getFEMGroundMotionRecordIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMGroundMotionRecordIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroundMotionRecordIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroundMotionRecordIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGroundMotionRecordPrx[]
    getFEMGroundMotionRecordList(long[] ids)
    {
        return getFEMGroundMotionRecordList(ids, null, false);
    }

    public FEMGroundMotionRecordPrx[]
    getFEMGroundMotionRecordList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGroundMotionRecordList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGroundMotionRecordPrx[]
    getFEMGroundMotionRecordList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroundMotionRecordList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroundMotionRecordList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGroupPrx
    getFEMGroup(long id)
    {
        return getFEMGroup(id, null, false);
    }

    public FEMGroupPrx
    getFEMGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGroupPrx
    getFEMGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGroupFields
    getFEMGroupFields(long id)
    {
        return getFEMGroupFields(id, null, false);
    }

    public FEMGroupFields
    getFEMGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGroupFields
    getFEMGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGroupFields[]
    getFEMGroupFieldsList(long[] ids)
    {
        return getFEMGroupFieldsList(ids, null, false);
    }

    public FEMGroupFields[]
    getFEMGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGroupFields[]
    getFEMGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMGroupIds()
    {
        return getFEMGroupIds(null, false);
    }

    public long[]
    getFEMGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMGroupPrx[]
    getFEMGroupList(long[] ids)
    {
        return getFEMGroupList(ids, null, false);
    }

    public FEMGroupPrx[]
    getFEMGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMGroupPrx[]
    getFEMGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMInitialTemperaturePrx
    getFEMInitialTemperature(long id)
    {
        return getFEMInitialTemperature(id, null, false);
    }

    public FEMInitialTemperaturePrx
    getFEMInitialTemperature(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMInitialTemperature(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMInitialTemperaturePrx
    getFEMInitialTemperature(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMInitialTemperature");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMInitialTemperature(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMInitialTemperatureFields
    getFEMInitialTemperatureFields(long id)
    {
        return getFEMInitialTemperatureFields(id, null, false);
    }

    public FEMInitialTemperatureFields
    getFEMInitialTemperatureFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMInitialTemperatureFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMInitialTemperatureFields
    getFEMInitialTemperatureFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMInitialTemperatureFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMInitialTemperatureFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMInitialTemperatureFields[]
    getFEMInitialTemperatureFieldsList(long[] ids)
    {
        return getFEMInitialTemperatureFieldsList(ids, null, false);
    }

    public FEMInitialTemperatureFields[]
    getFEMInitialTemperatureFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMInitialTemperatureFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMInitialTemperatureFields[]
    getFEMInitialTemperatureFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMInitialTemperatureFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMInitialTemperatureFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMInitialTemperatureIds()
    {
        return getFEMInitialTemperatureIds(null, false);
    }

    public long[]
    getFEMInitialTemperatureIds(java.util.Map<String, String> __ctx)
    {
        return getFEMInitialTemperatureIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMInitialTemperatureIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMInitialTemperatureIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMInitialTemperatureIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMInitialTemperaturePrx[]
    getFEMInitialTemperatureList(long[] ids)
    {
        return getFEMInitialTemperatureList(ids, null, false);
    }

    public FEMInitialTemperaturePrx[]
    getFEMInitialTemperatureList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMInitialTemperatureList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMInitialTemperaturePrx[]
    getFEMInitialTemperatureList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMInitialTemperatureList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMInitialTemperatureList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMIsoBeamPrx
    getFEMIsoBeam(long id)
    {
        return getFEMIsoBeam(id, null, false);
    }

    public FEMIsoBeamPrx
    getFEMIsoBeam(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeam(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMIsoBeamPrx
    getFEMIsoBeam(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeam");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeam(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMIsoBeamFields
    getFEMIsoBeamFields(long id)
    {
        return getFEMIsoBeamFields(id, null, false);
    }

    public FEMIsoBeamFields
    getFEMIsoBeamFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMIsoBeamFields
    getFEMIsoBeamFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMIsoBeamFields[]
    getFEMIsoBeamFieldsList(long[] ids)
    {
        return getFEMIsoBeamFieldsList(ids, null, false);
    }

    public FEMIsoBeamFields[]
    getFEMIsoBeamFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMIsoBeamFields[]
    getFEMIsoBeamFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMIsoBeamGroupPrx
    getFEMIsoBeamGroup(long id)
    {
        return getFEMIsoBeamGroup(id, null, false);
    }

    public FEMIsoBeamGroupPrx
    getFEMIsoBeamGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMIsoBeamGroupPrx
    getFEMIsoBeamGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMIsoBeamGroupFields
    getFEMIsoBeamGroupFields(long id)
    {
        return getFEMIsoBeamGroupFields(id, null, false);
    }

    public FEMIsoBeamGroupFields
    getFEMIsoBeamGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMIsoBeamGroupFields
    getFEMIsoBeamGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMIsoBeamGroupFields[]
    getFEMIsoBeamGroupFieldsList(long[] ids)
    {
        return getFEMIsoBeamGroupFieldsList(ids, null, false);
    }

    public FEMIsoBeamGroupFields[]
    getFEMIsoBeamGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMIsoBeamGroupFields[]
    getFEMIsoBeamGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMIsoBeamGroupIds()
    {
        return getFEMIsoBeamGroupIds(null, false);
    }

    public long[]
    getFEMIsoBeamGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMIsoBeamGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMIsoBeamGroupPrx[]
    getFEMIsoBeamGroupList(long[] ids)
    {
        return getFEMIsoBeamGroupList(ids, null, false);
    }

    public FEMIsoBeamGroupPrx[]
    getFEMIsoBeamGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMIsoBeamGroupPrx[]
    getFEMIsoBeamGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMIsoBeamIds()
    {
        return getFEMIsoBeamIds(null, false);
    }

    public long[]
    getFEMIsoBeamIds(java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMIsoBeamIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMIsoBeamPrx[]
    getFEMIsoBeamList(long[] ids)
    {
        return getFEMIsoBeamList(ids, null, false);
    }

    public FEMIsoBeamPrx[]
    getFEMIsoBeamList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMIsoBeamList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMIsoBeamPrx[]
    getFEMIsoBeamList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMIsoBeamList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMIsoBeamList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMLinkPrx
    getFEMLink(long id)
    {
        return getFEMLink(id, null, false);
    }

    public FEMLinkPrx
    getFEMLink(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMLink(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMLinkPrx
    getFEMLink(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLink");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLink(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMLinkFields
    getFEMLinkFields(long id)
    {
        return getFEMLinkFields(id, null, false);
    }

    public FEMLinkFields
    getFEMLinkFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMLinkFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMLinkFields
    getFEMLinkFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLinkFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLinkFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMLinkFields[]
    getFEMLinkFieldsList(long[] ids)
    {
        return getFEMLinkFieldsList(ids, null, false);
    }

    public FEMLinkFields[]
    getFEMLinkFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMLinkFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMLinkFields[]
    getFEMLinkFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLinkFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLinkFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMLinkIds()
    {
        return getFEMLinkIds(null, false);
    }

    public long[]
    getFEMLinkIds(java.util.Map<String, String> __ctx)
    {
        return getFEMLinkIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMLinkIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLinkIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLinkIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMLinkPrx[]
    getFEMLinkList(long[] ids)
    {
        return getFEMLinkList(ids, null, false);
    }

    public FEMLinkPrx[]
    getFEMLinkList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMLinkList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMLinkPrx[]
    getFEMLinkList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLinkList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLinkList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMLoadMassProportionalPrx
    getFEMLoadMassProportional(long id)
    {
        return getFEMLoadMassProportional(id, null, false);
    }

    public FEMLoadMassProportionalPrx
    getFEMLoadMassProportional(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMLoadMassProportional(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMLoadMassProportionalPrx
    getFEMLoadMassProportional(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLoadMassProportional");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLoadMassProportional(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMLoadMassProportionalFields
    getFEMLoadMassProportionalFields(long id)
    {
        return getFEMLoadMassProportionalFields(id, null, false);
    }

    public FEMLoadMassProportionalFields
    getFEMLoadMassProportionalFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMLoadMassProportionalFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMLoadMassProportionalFields
    getFEMLoadMassProportionalFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLoadMassProportionalFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLoadMassProportionalFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMLoadMassProportionalFields[]
    getFEMLoadMassProportionalFieldsList(long[] ids)
    {
        return getFEMLoadMassProportionalFieldsList(ids, null, false);
    }

    public FEMLoadMassProportionalFields[]
    getFEMLoadMassProportionalFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMLoadMassProportionalFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMLoadMassProportionalFields[]
    getFEMLoadMassProportionalFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLoadMassProportionalFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLoadMassProportionalFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMLoadMassProportionalIds()
    {
        return getFEMLoadMassProportionalIds(null, false);
    }

    public long[]
    getFEMLoadMassProportionalIds(java.util.Map<String, String> __ctx)
    {
        return getFEMLoadMassProportionalIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMLoadMassProportionalIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLoadMassProportionalIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLoadMassProportionalIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMLoadMassProportionalPrx[]
    getFEMLoadMassProportionalList(long[] ids)
    {
        return getFEMLoadMassProportionalList(ids, null, false);
    }

    public FEMLoadMassProportionalPrx[]
    getFEMLoadMassProportionalList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMLoadMassProportionalList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMLoadMassProportionalPrx[]
    getFEMLoadMassProportionalList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMLoadMassProportionalList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMLoadMassProportionalList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMCForceDataPrx
    getFEMMCForceData(long id)
    {
        return getFEMMCForceData(id, null, false);
    }

    public FEMMCForceDataPrx
    getFEMMCForceData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMCForceData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMCForceDataPrx
    getFEMMCForceData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCForceData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCForceData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMCForceDataFields
    getFEMMCForceDataFields(long id)
    {
        return getFEMMCForceDataFields(id, null, false);
    }

    public FEMMCForceDataFields
    getFEMMCForceDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMCForceDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMCForceDataFields
    getFEMMCForceDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCForceDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCForceDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMCForceDataFields[]
    getFEMMCForceDataFieldsList(long[] ids)
    {
        return getFEMMCForceDataFieldsList(ids, null, false);
    }

    public FEMMCForceDataFields[]
    getFEMMCForceDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMCForceDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMCForceDataFields[]
    getFEMMCForceDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCForceDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCForceDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMMCForceDataIds()
    {
        return getFEMMCForceDataIds(null, false);
    }

    public long[]
    getFEMMCForceDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMMCForceDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMMCForceDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCForceDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCForceDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMCForceDataPrx[]
    getFEMMCForceDataList(long[] ids)
    {
        return getFEMMCForceDataList(ids, null, false);
    }

    public FEMMCForceDataPrx[]
    getFEMMCForceDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMCForceDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMCForceDataPrx[]
    getFEMMCForceDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCForceDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCForceDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMCrigiditiesPrx
    getFEMMCrigidities(long id)
    {
        return getFEMMCrigidities(id, null, false);
    }

    public FEMMCrigiditiesPrx
    getFEMMCrigidities(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMCrigidities(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMCrigiditiesPrx
    getFEMMCrigidities(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCrigidities");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCrigidities(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMCrigiditiesFields
    getFEMMCrigiditiesFields(long id)
    {
        return getFEMMCrigiditiesFields(id, null, false);
    }

    public FEMMCrigiditiesFields
    getFEMMCrigiditiesFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMCrigiditiesFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMCrigiditiesFields
    getFEMMCrigiditiesFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCrigiditiesFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCrigiditiesFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMCrigiditiesFields[]
    getFEMMCrigiditiesFieldsList(long[] ids)
    {
        return getFEMMCrigiditiesFieldsList(ids, null, false);
    }

    public FEMMCrigiditiesFields[]
    getFEMMCrigiditiesFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMCrigiditiesFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMCrigiditiesFields[]
    getFEMMCrigiditiesFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCrigiditiesFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCrigiditiesFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMMCrigiditiesIds()
    {
        return getFEMMCrigiditiesIds(null, false);
    }

    public long[]
    getFEMMCrigiditiesIds(java.util.Map<String, String> __ctx)
    {
        return getFEMMCrigiditiesIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMMCrigiditiesIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCrigiditiesIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCrigiditiesIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMCrigiditiesPrx[]
    getFEMMCrigiditiesList(long[] ids)
    {
        return getFEMMCrigiditiesList(ids, null, false);
    }

    public FEMMCrigiditiesPrx[]
    getFEMMCrigiditiesList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMCrigiditiesList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMCrigiditiesPrx[]
    getFEMMCrigiditiesList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMCrigiditiesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMCrigiditiesList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMTForceDataPrx
    getFEMMTForceData(long id)
    {
        return getFEMMTForceData(id, null, false);
    }

    public FEMMTForceDataPrx
    getFEMMTForceData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMTForceData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMTForceDataPrx
    getFEMMTForceData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMTForceData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMTForceData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMTForceDataFields
    getFEMMTForceDataFields(long id)
    {
        return getFEMMTForceDataFields(id, null, false);
    }

    public FEMMTForceDataFields
    getFEMMTForceDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMTForceDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMTForceDataFields
    getFEMMTForceDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMTForceDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMTForceDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMTForceDataFields[]
    getFEMMTForceDataFieldsList(long[] ids)
    {
        return getFEMMTForceDataFieldsList(ids, null, false);
    }

    public FEMMTForceDataFields[]
    getFEMMTForceDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMTForceDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMTForceDataFields[]
    getFEMMTForceDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMTForceDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMTForceDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMMTForceDataIds()
    {
        return getFEMMTForceDataIds(null, false);
    }

    public long[]
    getFEMMTForceDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMMTForceDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMMTForceDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMTForceDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMTForceDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMTForceDataPrx[]
    getFEMMTForceDataList(long[] ids)
    {
        return getFEMMTForceDataList(ids, null, false);
    }

    public FEMMTForceDataPrx[]
    getFEMMTForceDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMTForceDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMTForceDataPrx[]
    getFEMMTForceDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMTForceDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMTForceDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMaterialPrx
    getFEMMaterial(long id)
    {
        return getFEMMaterial(id, null, false);
    }

    public FEMMaterialPrx
    getFEMMaterial(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMaterial(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMaterialPrx
    getFEMMaterial(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMaterial(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMaterialFields
    getFEMMaterialFields(long id)
    {
        return getFEMMaterialFields(id, null, false);
    }

    public FEMMaterialFields
    getFEMMaterialFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMaterialFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMaterialFields
    getFEMMaterialFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMaterialFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMaterialFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMaterialFields[]
    getFEMMaterialFieldsList(long[] ids)
    {
        return getFEMMaterialFieldsList(ids, null, false);
    }

    public FEMMaterialFields[]
    getFEMMaterialFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMaterialFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMaterialFields[]
    getFEMMaterialFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMaterialFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMaterialFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMMaterialIds()
    {
        return getFEMMaterialIds(null, false);
    }

    public long[]
    getFEMMaterialIds(java.util.Map<String, String> __ctx)
    {
        return getFEMMaterialIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMMaterialIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMaterialIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMaterialIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMaterialPrx[]
    getFEMMaterialList(long[] ids)
    {
        return getFEMMaterialList(ids, null, false);
    }

    public FEMMaterialPrx[]
    getFEMMaterialList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMaterialList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMaterialPrx[]
    getFEMMaterialList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMaterialList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMaterialList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatricesPrx
    getFEMMatrices(long id)
    {
        return getFEMMatrices(id, null, false);
    }

    public FEMMatricesPrx
    getFEMMatrices(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrices(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatricesPrx
    getFEMMatrices(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrices");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrices(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatricesFields
    getFEMMatricesFields(long id)
    {
        return getFEMMatricesFields(id, null, false);
    }

    public FEMMatricesFields
    getFEMMatricesFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMatricesFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatricesFields
    getFEMMatricesFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatricesFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatricesFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatricesFields[]
    getFEMMatricesFieldsList(long[] ids)
    {
        return getFEMMatricesFieldsList(ids, null, false);
    }

    public FEMMatricesFields[]
    getFEMMatricesFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMatricesFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatricesFields[]
    getFEMMatricesFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatricesFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatricesFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMMatricesIds()
    {
        return getFEMMatricesIds(null, false);
    }

    public long[]
    getFEMMatricesIds(java.util.Map<String, String> __ctx)
    {
        return getFEMMatricesIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMMatricesIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatricesIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatricesIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatricesPrx[]
    getFEMMatricesList(long[] ids)
    {
        return getFEMMatricesList(ids, null, false);
    }

    public FEMMatricesPrx[]
    getFEMMatricesList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMatricesList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatricesPrx[]
    getFEMMatricesList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatricesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatricesList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatrixDataPrx
    getFEMMatrixData(long id)
    {
        return getFEMMatrixData(id, null, false);
    }

    public FEMMatrixDataPrx
    getFEMMatrixData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatrixDataPrx
    getFEMMatrixData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatrixDataFields
    getFEMMatrixDataFields(long id)
    {
        return getFEMMatrixDataFields(id, null, false);
    }

    public FEMMatrixDataFields
    getFEMMatrixDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatrixDataFields
    getFEMMatrixDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatrixDataFields[]
    getFEMMatrixDataFieldsList(long[] ids)
    {
        return getFEMMatrixDataFieldsList(ids, null, false);
    }

    public FEMMatrixDataFields[]
    getFEMMatrixDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatrixDataFields[]
    getFEMMatrixDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMMatrixDataIds()
    {
        return getFEMMatrixDataIds(null, false);
    }

    public long[]
    getFEMMatrixDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMMatrixDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatrixDataPrx[]
    getFEMMatrixDataList(long[] ids)
    {
        return getFEMMatrixDataList(ids, null, false);
    }

    public FEMMatrixDataPrx[]
    getFEMMatrixDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatrixDataPrx[]
    getFEMMatrixDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatrixSetsPrx
    getFEMMatrixSets(long id)
    {
        return getFEMMatrixSets(id, null, false);
    }

    public FEMMatrixSetsPrx
    getFEMMatrixSets(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixSets(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatrixSetsPrx
    getFEMMatrixSets(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixSets");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixSets(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatrixSetsFields
    getFEMMatrixSetsFields(long id)
    {
        return getFEMMatrixSetsFields(id, null, false);
    }

    public FEMMatrixSetsFields
    getFEMMatrixSetsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixSetsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatrixSetsFields
    getFEMMatrixSetsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixSetsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixSetsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatrixSetsFields[]
    getFEMMatrixSetsFieldsList(long[] ids)
    {
        return getFEMMatrixSetsFieldsList(ids, null, false);
    }

    public FEMMatrixSetsFields[]
    getFEMMatrixSetsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixSetsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatrixSetsFields[]
    getFEMMatrixSetsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixSetsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixSetsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMMatrixSetsIds()
    {
        return getFEMMatrixSetsIds(null, false);
    }

    public long[]
    getFEMMatrixSetsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixSetsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMMatrixSetsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixSetsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixSetsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMMatrixSetsPrx[]
    getFEMMatrixSetsList(long[] ids)
    {
        return getFEMMatrixSetsList(ids, null, false);
    }

    public FEMMatrixSetsPrx[]
    getFEMMatrixSetsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMMatrixSetsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMMatrixSetsPrx[]
    getFEMMatrixSetsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMMatrixSetsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMMatrixSetsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNKDisplForcePrx
    getFEMNKDisplForce(long id)
    {
        return getFEMNKDisplForce(id, null, false);
    }

    public FEMNKDisplForcePrx
    getFEMNKDisplForce(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNKDisplForce(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNKDisplForcePrx
    getFEMNKDisplForce(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNKDisplForce");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNKDisplForce(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNKDisplForceFields
    getFEMNKDisplForceFields(long id)
    {
        return getFEMNKDisplForceFields(id, null, false);
    }

    public FEMNKDisplForceFields
    getFEMNKDisplForceFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNKDisplForceFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNKDisplForceFields
    getFEMNKDisplForceFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNKDisplForceFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNKDisplForceFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNKDisplForceFields[]
    getFEMNKDisplForceFieldsList(long[] ids)
    {
        return getFEMNKDisplForceFieldsList(ids, null, false);
    }

    public FEMNKDisplForceFields[]
    getFEMNKDisplForceFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNKDisplForceFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNKDisplForceFields[]
    getFEMNKDisplForceFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNKDisplForceFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNKDisplForceFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMNKDisplForceIds()
    {
        return getFEMNKDisplForceIds(null, false);
    }

    public long[]
    getFEMNKDisplForceIds(java.util.Map<String, String> __ctx)
    {
        return getFEMNKDisplForceIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMNKDisplForceIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNKDisplForceIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNKDisplForceIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNKDisplForcePrx[]
    getFEMNKDisplForceList(long[] ids)
    {
        return getFEMNKDisplForceList(ids, null, false);
    }

    public FEMNKDisplForcePrx[]
    getFEMNKDisplForceList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNKDisplForceList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNKDisplForcePrx[]
    getFEMNKDisplForceList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNKDisplForceList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNKDisplForceList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNLElasticMaterialsPrx
    getFEMNLElasticMaterials(long id)
    {
        return getFEMNLElasticMaterials(id, null, false);
    }

    public FEMNLElasticMaterialsPrx
    getFEMNLElasticMaterials(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticMaterials(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNLElasticMaterialsPrx
    getFEMNLElasticMaterials(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticMaterials(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNLElasticMaterialsFields
    getFEMNLElasticMaterialsFields(long id)
    {
        return getFEMNLElasticMaterialsFields(id, null, false);
    }

    public FEMNLElasticMaterialsFields
    getFEMNLElasticMaterialsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticMaterialsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNLElasticMaterialsFields
    getFEMNLElasticMaterialsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticMaterialsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticMaterialsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNLElasticMaterialsFields[]
    getFEMNLElasticMaterialsFieldsList(long[] ids)
    {
        return getFEMNLElasticMaterialsFieldsList(ids, null, false);
    }

    public FEMNLElasticMaterialsFields[]
    getFEMNLElasticMaterialsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticMaterialsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNLElasticMaterialsFields[]
    getFEMNLElasticMaterialsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticMaterialsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticMaterialsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMNLElasticMaterialsIds()
    {
        return getFEMNLElasticMaterialsIds(null, false);
    }

    public long[]
    getFEMNLElasticMaterialsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticMaterialsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMNLElasticMaterialsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticMaterialsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticMaterialsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNLElasticMaterialsPrx[]
    getFEMNLElasticMaterialsList(long[] ids)
    {
        return getFEMNLElasticMaterialsList(ids, null, false);
    }

    public FEMNLElasticMaterialsPrx[]
    getFEMNLElasticMaterialsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticMaterialsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNLElasticMaterialsPrx[]
    getFEMNLElasticMaterialsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticMaterialsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticMaterialsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNLElasticStrainStressPrx
    getFEMNLElasticStrainStress(long id)
    {
        return getFEMNLElasticStrainStress(id, null, false);
    }

    public FEMNLElasticStrainStressPrx
    getFEMNLElasticStrainStress(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticStrainStress(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNLElasticStrainStressPrx
    getFEMNLElasticStrainStress(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticStrainStress");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticStrainStress(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNLElasticStrainStressFields
    getFEMNLElasticStrainStressFields(long id)
    {
        return getFEMNLElasticStrainStressFields(id, null, false);
    }

    public FEMNLElasticStrainStressFields
    getFEMNLElasticStrainStressFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticStrainStressFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNLElasticStrainStressFields
    getFEMNLElasticStrainStressFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticStrainStressFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticStrainStressFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNLElasticStrainStressFields[]
    getFEMNLElasticStrainStressFieldsList(long[] ids)
    {
        return getFEMNLElasticStrainStressFieldsList(ids, null, false);
    }

    public FEMNLElasticStrainStressFields[]
    getFEMNLElasticStrainStressFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticStrainStressFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNLElasticStrainStressFields[]
    getFEMNLElasticStrainStressFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticStrainStressFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticStrainStressFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMNLElasticStrainStressIds()
    {
        return getFEMNLElasticStrainStressIds(null, false);
    }

    public long[]
    getFEMNLElasticStrainStressIds(java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticStrainStressIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMNLElasticStrainStressIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticStrainStressIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticStrainStressIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNLElasticStrainStressPrx[]
    getFEMNLElasticStrainStressList(long[] ids)
    {
        return getFEMNLElasticStrainStressList(ids, null, false);
    }

    public FEMNLElasticStrainStressPrx[]
    getFEMNLElasticStrainStressList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNLElasticStrainStressList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNLElasticStrainStressPrx[]
    getFEMNLElasticStrainStressList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNLElasticStrainStressList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNLElasticStrainStressList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNMTimeMassPrx
    getFEMNMTimeMass(long id)
    {
        return getFEMNMTimeMass(id, null, false);
    }

    public FEMNMTimeMassPrx
    getFEMNMTimeMass(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNMTimeMass(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNMTimeMassPrx
    getFEMNMTimeMass(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNMTimeMass");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNMTimeMass(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNMTimeMassFields
    getFEMNMTimeMassFields(long id)
    {
        return getFEMNMTimeMassFields(id, null, false);
    }

    public FEMNMTimeMassFields
    getFEMNMTimeMassFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNMTimeMassFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNMTimeMassFields
    getFEMNMTimeMassFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNMTimeMassFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNMTimeMassFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNMTimeMassFields[]
    getFEMNMTimeMassFieldsList(long[] ids)
    {
        return getFEMNMTimeMassFieldsList(ids, null, false);
    }

    public FEMNMTimeMassFields[]
    getFEMNMTimeMassFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNMTimeMassFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNMTimeMassFields[]
    getFEMNMTimeMassFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNMTimeMassFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNMTimeMassFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMNMTimeMassIds()
    {
        return getFEMNMTimeMassIds(null, false);
    }

    public long[]
    getFEMNMTimeMassIds(java.util.Map<String, String> __ctx)
    {
        return getFEMNMTimeMassIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMNMTimeMassIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNMTimeMassIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNMTimeMassIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNMTimeMassPrx[]
    getFEMNMTimeMassList(long[] ids)
    {
        return getFEMNMTimeMassList(ids, null, false);
    }

    public FEMNMTimeMassPrx[]
    getFEMNMTimeMassList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNMTimeMassList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNMTimeMassPrx[]
    getFEMNMTimeMassList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNMTimeMassList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNMTimeMassList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNTNContactPrx
    getFEMNTNContact(long id)
    {
        return getFEMNTNContact(id, null, false);
    }

    public FEMNTNContactPrx
    getFEMNTNContact(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNTNContact(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNTNContactPrx
    getFEMNTNContact(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNTNContact");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNTNContact(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNTNContactFields
    getFEMNTNContactFields(long id)
    {
        return getFEMNTNContactFields(id, null, false);
    }

    public FEMNTNContactFields
    getFEMNTNContactFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNTNContactFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNTNContactFields
    getFEMNTNContactFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNTNContactFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNTNContactFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNTNContactFields[]
    getFEMNTNContactFieldsList(long[] ids)
    {
        return getFEMNTNContactFieldsList(ids, null, false);
    }

    public FEMNTNContactFields[]
    getFEMNTNContactFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNTNContactFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNTNContactFields[]
    getFEMNTNContactFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNTNContactFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNTNContactFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMNTNContactIds()
    {
        return getFEMNTNContactIds(null, false);
    }

    public long[]
    getFEMNTNContactIds(java.util.Map<String, String> __ctx)
    {
        return getFEMNTNContactIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMNTNContactIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNTNContactIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNTNContactIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNTNContactPrx[]
    getFEMNTNContactList(long[] ids)
    {
        return getFEMNTNContactList(ids, null, false);
    }

    public FEMNTNContactPrx[]
    getFEMNTNContactList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNTNContactList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNTNContactPrx[]
    getFEMNTNContactList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNTNContactList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNTNContactList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNodalMassPrx
    getFEMNodalMass(long id)
    {
        return getFEMNodalMass(id, null, false);
    }

    public FEMNodalMassPrx
    getFEMNodalMass(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNodalMass(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNodalMassPrx
    getFEMNodalMass(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodalMass");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodalMass(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNodalMassFields
    getFEMNodalMassFields(long id)
    {
        return getFEMNodalMassFields(id, null, false);
    }

    public FEMNodalMassFields
    getFEMNodalMassFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNodalMassFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNodalMassFields
    getFEMNodalMassFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodalMassFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodalMassFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNodalMassFields[]
    getFEMNodalMassFieldsList(long[] ids)
    {
        return getFEMNodalMassFieldsList(ids, null, false);
    }

    public FEMNodalMassFields[]
    getFEMNodalMassFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNodalMassFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNodalMassFields[]
    getFEMNodalMassFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodalMassFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodalMassFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMNodalMassIds()
    {
        return getFEMNodalMassIds(null, false);
    }

    public long[]
    getFEMNodalMassIds(java.util.Map<String, String> __ctx)
    {
        return getFEMNodalMassIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMNodalMassIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodalMassIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodalMassIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNodalMassPrx[]
    getFEMNodalMassList(long[] ids)
    {
        return getFEMNodalMassList(ids, null, false);
    }

    public FEMNodalMassPrx[]
    getFEMNodalMassList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNodalMassList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNodalMassPrx[]
    getFEMNodalMassList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodalMassList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodalMassList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNodePrx
    getFEMNode(long id)
    {
        return getFEMNode(id, null, false);
    }

    public FEMNodePrx
    getFEMNode(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNode(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNodePrx
    getFEMNode(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNode(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNodeFields
    getFEMNodeFields(long id)
    {
        return getFEMNodeFields(id, null, false);
    }

    public FEMNodeFields
    getFEMNodeFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMNodeFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNodeFields
    getFEMNodeFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodeFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodeFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNodeFields[]
    getFEMNodeFieldsList(long[] ids)
    {
        return getFEMNodeFieldsList(ids, null, false);
    }

    public FEMNodeFields[]
    getFEMNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNodeFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNodeFields[]
    getFEMNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodeFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodeFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMNodeIds()
    {
        return getFEMNodeIds(null, false);
    }

    public long[]
    getFEMNodeIds(java.util.Map<String, String> __ctx)
    {
        return getFEMNodeIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMNodeIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodeIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodeIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMNodePrx[]
    getFEMNodeList(long[] ids)
    {
        return getFEMNodeList(ids, null, false);
    }

    public FEMNodePrx[]
    getFEMNodeList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMNodeList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMNodePrx[]
    getFEMNodeList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMNodeList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMOrthotropicMaterialPrx
    getFEMOrthotropicMaterial(long id)
    {
        return getFEMOrthotropicMaterial(id, null, false);
    }

    public FEMOrthotropicMaterialPrx
    getFEMOrthotropicMaterial(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMOrthotropicMaterial(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMOrthotropicMaterialPrx
    getFEMOrthotropicMaterial(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMOrthotropicMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMOrthotropicMaterial(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMOrthotropicMaterialFields
    getFEMOrthotropicMaterialFields(long id)
    {
        return getFEMOrthotropicMaterialFields(id, null, false);
    }

    public FEMOrthotropicMaterialFields
    getFEMOrthotropicMaterialFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMOrthotropicMaterialFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMOrthotropicMaterialFields
    getFEMOrthotropicMaterialFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMOrthotropicMaterialFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMOrthotropicMaterialFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMOrthotropicMaterialFields[]
    getFEMOrthotropicMaterialFieldsList(long[] ids)
    {
        return getFEMOrthotropicMaterialFieldsList(ids, null, false);
    }

    public FEMOrthotropicMaterialFields[]
    getFEMOrthotropicMaterialFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMOrthotropicMaterialFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMOrthotropicMaterialFields[]
    getFEMOrthotropicMaterialFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMOrthotropicMaterialFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMOrthotropicMaterialFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMOrthotropicMaterialIds()
    {
        return getFEMOrthotropicMaterialIds(null, false);
    }

    public long[]
    getFEMOrthotropicMaterialIds(java.util.Map<String, String> __ctx)
    {
        return getFEMOrthotropicMaterialIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMOrthotropicMaterialIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMOrthotropicMaterialIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMOrthotropicMaterialIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMOrthotropicMaterialPrx[]
    getFEMOrthotropicMaterialList(long[] ids)
    {
        return getFEMOrthotropicMaterialList(ids, null, false);
    }

    public FEMOrthotropicMaterialPrx[]
    getFEMOrthotropicMaterialList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMOrthotropicMaterialList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMOrthotropicMaterialPrx[]
    getFEMOrthotropicMaterialList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMOrthotropicMaterialList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMOrthotropicMaterialList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticBilinearMaterialPrx
    getFEMPlasticBilinearMaterial(long id)
    {
        return getFEMPlasticBilinearMaterial(id, null, false);
    }

    public FEMPlasticBilinearMaterialPrx
    getFEMPlasticBilinearMaterial(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticBilinearMaterial(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticBilinearMaterialPrx
    getFEMPlasticBilinearMaterial(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticBilinearMaterial");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticBilinearMaterial(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticBilinearMaterialFields
    getFEMPlasticBilinearMaterialFields(long id)
    {
        return getFEMPlasticBilinearMaterialFields(id, null, false);
    }

    public FEMPlasticBilinearMaterialFields
    getFEMPlasticBilinearMaterialFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticBilinearMaterialFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticBilinearMaterialFields
    getFEMPlasticBilinearMaterialFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticBilinearMaterialFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticBilinearMaterialFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticBilinearMaterialFields[]
    getFEMPlasticBilinearMaterialFieldsList(long[] ids)
    {
        return getFEMPlasticBilinearMaterialFieldsList(ids, null, false);
    }

    public FEMPlasticBilinearMaterialFields[]
    getFEMPlasticBilinearMaterialFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticBilinearMaterialFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticBilinearMaterialFields[]
    getFEMPlasticBilinearMaterialFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticBilinearMaterialFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticBilinearMaterialFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMPlasticBilinearMaterialIds()
    {
        return getFEMPlasticBilinearMaterialIds(null, false);
    }

    public long[]
    getFEMPlasticBilinearMaterialIds(java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticBilinearMaterialIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMPlasticBilinearMaterialIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticBilinearMaterialIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticBilinearMaterialIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticBilinearMaterialPrx[]
    getFEMPlasticBilinearMaterialList(long[] ids)
    {
        return getFEMPlasticBilinearMaterialList(ids, null, false);
    }

    public FEMPlasticBilinearMaterialPrx[]
    getFEMPlasticBilinearMaterialList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticBilinearMaterialList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticBilinearMaterialPrx[]
    getFEMPlasticBilinearMaterialList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticBilinearMaterialList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticBilinearMaterialList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticMlMaterialsPrx
    getFEMPlasticMlMaterials(long id)
    {
        return getFEMPlasticMlMaterials(id, null, false);
    }

    public FEMPlasticMlMaterialsPrx
    getFEMPlasticMlMaterials(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticMlMaterials(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticMlMaterialsPrx
    getFEMPlasticMlMaterials(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticMlMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticMlMaterials(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticMlMaterialsFields
    getFEMPlasticMlMaterialsFields(long id)
    {
        return getFEMPlasticMlMaterialsFields(id, null, false);
    }

    public FEMPlasticMlMaterialsFields
    getFEMPlasticMlMaterialsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticMlMaterialsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticMlMaterialsFields
    getFEMPlasticMlMaterialsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticMlMaterialsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticMlMaterialsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticMlMaterialsFields[]
    getFEMPlasticMlMaterialsFieldsList(long[] ids)
    {
        return getFEMPlasticMlMaterialsFieldsList(ids, null, false);
    }

    public FEMPlasticMlMaterialsFields[]
    getFEMPlasticMlMaterialsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticMlMaterialsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticMlMaterialsFields[]
    getFEMPlasticMlMaterialsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticMlMaterialsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticMlMaterialsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMPlasticMlMaterialsIds()
    {
        return getFEMPlasticMlMaterialsIds(null, false);
    }

    public long[]
    getFEMPlasticMlMaterialsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticMlMaterialsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMPlasticMlMaterialsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticMlMaterialsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticMlMaterialsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticMlMaterialsPrx[]
    getFEMPlasticMlMaterialsList(long[] ids)
    {
        return getFEMPlasticMlMaterialsList(ids, null, false);
    }

    public FEMPlasticMlMaterialsPrx[]
    getFEMPlasticMlMaterialsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticMlMaterialsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticMlMaterialsPrx[]
    getFEMPlasticMlMaterialsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticMlMaterialsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticMlMaterialsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticStrainStressPrx
    getFEMPlasticStrainStress(long id)
    {
        return getFEMPlasticStrainStress(id, null, false);
    }

    public FEMPlasticStrainStressPrx
    getFEMPlasticStrainStress(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticStrainStress(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticStrainStressPrx
    getFEMPlasticStrainStress(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticStrainStress");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticStrainStress(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticStrainStressFields
    getFEMPlasticStrainStressFields(long id)
    {
        return getFEMPlasticStrainStressFields(id, null, false);
    }

    public FEMPlasticStrainStressFields
    getFEMPlasticStrainStressFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticStrainStressFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticStrainStressFields
    getFEMPlasticStrainStressFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticStrainStressFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticStrainStressFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticStrainStressFields[]
    getFEMPlasticStrainStressFieldsList(long[] ids)
    {
        return getFEMPlasticStrainStressFieldsList(ids, null, false);
    }

    public FEMPlasticStrainStressFields[]
    getFEMPlasticStrainStressFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticStrainStressFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticStrainStressFields[]
    getFEMPlasticStrainStressFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticStrainStressFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticStrainStressFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMPlasticStrainStressIds()
    {
        return getFEMPlasticStrainStressIds(null, false);
    }

    public long[]
    getFEMPlasticStrainStressIds(java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticStrainStressIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMPlasticStrainStressIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticStrainStressIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticStrainStressIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlasticStrainStressPrx[]
    getFEMPlasticStrainStressList(long[] ids)
    {
        return getFEMPlasticStrainStressList(ids, null, false);
    }

    public FEMPlasticStrainStressPrx[]
    getFEMPlasticStrainStressList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlasticStrainStressList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlasticStrainStressPrx[]
    getFEMPlasticStrainStressList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlasticStrainStressList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlasticStrainStressList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlatePrx
    getFEMPlate(long id)
    {
        return getFEMPlate(id, null, false);
    }

    public FEMPlatePrx
    getFEMPlate(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlate(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlatePrx
    getFEMPlate(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlate");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlate(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlateFields
    getFEMPlateFields(long id)
    {
        return getFEMPlateFields(id, null, false);
    }

    public FEMPlateFields
    getFEMPlateFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlateFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlateFields
    getFEMPlateFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlateFields[]
    getFEMPlateFieldsList(long[] ids)
    {
        return getFEMPlateFieldsList(ids, null, false);
    }

    public FEMPlateFields[]
    getFEMPlateFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlateFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlateFields[]
    getFEMPlateFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlateGroupPrx
    getFEMPlateGroup(long id)
    {
        return getFEMPlateGroup(id, null, false);
    }

    public FEMPlateGroupPrx
    getFEMPlateGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlateGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlateGroupPrx
    getFEMPlateGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlateGroupFields
    getFEMPlateGroupFields(long id)
    {
        return getFEMPlateGroupFields(id, null, false);
    }

    public FEMPlateGroupFields
    getFEMPlateGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPlateGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlateGroupFields
    getFEMPlateGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlateGroupFields[]
    getFEMPlateGroupFieldsList(long[] ids)
    {
        return getFEMPlateGroupFieldsList(ids, null, false);
    }

    public FEMPlateGroupFields[]
    getFEMPlateGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlateGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlateGroupFields[]
    getFEMPlateGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMPlateGroupIds()
    {
        return getFEMPlateGroupIds(null, false);
    }

    public long[]
    getFEMPlateGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMPlateGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMPlateGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlateGroupPrx[]
    getFEMPlateGroupList(long[] ids)
    {
        return getFEMPlateGroupList(ids, null, false);
    }

    public FEMPlateGroupPrx[]
    getFEMPlateGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlateGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlateGroupPrx[]
    getFEMPlateGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMPlateIds()
    {
        return getFEMPlateIds(null, false);
    }

    public long[]
    getFEMPlateIds(java.util.Map<String, String> __ctx)
    {
        return getFEMPlateIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMPlateIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPlatePrx[]
    getFEMPlateList(long[] ids)
    {
        return getFEMPlateList(ids, null, false);
    }

    public FEMPlatePrx[]
    getFEMPlateList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPlateList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPlatePrx[]
    getFEMPlateList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPlateList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPlateList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPointsPrx
    getFEMPoints(long id)
    {
        return getFEMPoints(id, null, false);
    }

    public FEMPointsPrx
    getFEMPoints(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPoints(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPointsPrx
    getFEMPoints(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPoints");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPoints(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPointsFields
    getFEMPointsFields(long id)
    {
        return getFEMPointsFields(id, null, false);
    }

    public FEMPointsFields
    getFEMPointsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPointsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPointsFields
    getFEMPointsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPointsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPointsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPointsFields[]
    getFEMPointsFieldsList(long[] ids)
    {
        return getFEMPointsFieldsList(ids, null, false);
    }

    public FEMPointsFields[]
    getFEMPointsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPointsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPointsFields[]
    getFEMPointsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPointsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPointsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMPointsIds()
    {
        return getFEMPointsIds(null, false);
    }

    public long[]
    getFEMPointsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMPointsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMPointsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPointsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPointsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPointsPrx[]
    getFEMPointsList(long[] ids)
    {
        return getFEMPointsList(ids, null, false);
    }

    public FEMPointsPrx[]
    getFEMPointsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPointsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPointsPrx[]
    getFEMPointsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPointsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPointsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPropertiesPrx
    getFEMProperties(long id)
    {
        return getFEMProperties(id, null, false);
    }

    public FEMPropertiesPrx
    getFEMProperties(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMProperties(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPropertiesPrx
    getFEMProperties(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMProperties");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMProperties(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPropertiesFields
    getFEMPropertiesFields(long id)
    {
        return getFEMPropertiesFields(id, null, false);
    }

    public FEMPropertiesFields
    getFEMPropertiesFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPropertiesFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPropertiesFields
    getFEMPropertiesFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertiesFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertiesFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPropertiesFields[]
    getFEMPropertiesFieldsList(long[] ids)
    {
        return getFEMPropertiesFieldsList(ids, null, false);
    }

    public FEMPropertiesFields[]
    getFEMPropertiesFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPropertiesFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPropertiesFields[]
    getFEMPropertiesFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertiesFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertiesFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMPropertiesIds()
    {
        return getFEMPropertiesIds(null, false);
    }

    public long[]
    getFEMPropertiesIds(java.util.Map<String, String> __ctx)
    {
        return getFEMPropertiesIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMPropertiesIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertiesIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertiesIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPropertiesPrx[]
    getFEMPropertiesList(long[] ids)
    {
        return getFEMPropertiesList(ids, null, false);
    }

    public FEMPropertiesPrx[]
    getFEMPropertiesList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPropertiesList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPropertiesPrx[]
    getFEMPropertiesList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertiesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertiesList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPropertysetsPrx
    getFEMPropertysets(long id)
    {
        return getFEMPropertysets(id, null, false);
    }

    public FEMPropertysetsPrx
    getFEMPropertysets(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPropertysets(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPropertysetsPrx
    getFEMPropertysets(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertysets");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertysets(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPropertysetsFields
    getFEMPropertysetsFields(long id)
    {
        return getFEMPropertysetsFields(id, null, false);
    }

    public FEMPropertysetsFields
    getFEMPropertysetsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMPropertysetsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPropertysetsFields
    getFEMPropertysetsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertysetsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertysetsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPropertysetsFields[]
    getFEMPropertysetsFieldsList(long[] ids)
    {
        return getFEMPropertysetsFieldsList(ids, null, false);
    }

    public FEMPropertysetsFields[]
    getFEMPropertysetsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPropertysetsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPropertysetsFields[]
    getFEMPropertysetsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertysetsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertysetsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMPropertysetsIds()
    {
        return getFEMPropertysetsIds(null, false);
    }

    public long[]
    getFEMPropertysetsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMPropertysetsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMPropertysetsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertysetsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertysetsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMPropertysetsPrx[]
    getFEMPropertysetsList(long[] ids)
    {
        return getFEMPropertysetsList(ids, null, false);
    }

    public FEMPropertysetsPrx[]
    getFEMPropertysetsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMPropertysetsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMPropertysetsPrx[]
    getFEMPropertysetsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMPropertysetsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMPropertysetsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionBoxPrx
    getFEMSectionBox(long id)
    {
        return getFEMSectionBox(id, null, false);
    }

    public FEMSectionBoxPrx
    getFEMSectionBox(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionBox(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionBoxPrx
    getFEMSectionBox(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionBox");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionBox(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionBoxFields
    getFEMSectionBoxFields(long id)
    {
        return getFEMSectionBoxFields(id, null, false);
    }

    public FEMSectionBoxFields
    getFEMSectionBoxFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionBoxFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionBoxFields
    getFEMSectionBoxFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionBoxFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionBoxFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionBoxFields[]
    getFEMSectionBoxFieldsList(long[] ids)
    {
        return getFEMSectionBoxFieldsList(ids, null, false);
    }

    public FEMSectionBoxFields[]
    getFEMSectionBoxFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionBoxFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionBoxFields[]
    getFEMSectionBoxFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionBoxFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionBoxFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSectionBoxIds()
    {
        return getFEMSectionBoxIds(null, false);
    }

    public long[]
    getFEMSectionBoxIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSectionBoxIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSectionBoxIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionBoxIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionBoxIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionBoxPrx[]
    getFEMSectionBoxList(long[] ids)
    {
        return getFEMSectionBoxList(ids, null, false);
    }

    public FEMSectionBoxPrx[]
    getFEMSectionBoxList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionBoxList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionBoxPrx[]
    getFEMSectionBoxList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionBoxList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionBoxList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionIPrx
    getFEMSectionI(long id)
    {
        return getFEMSectionI(id, null, false);
    }

    public FEMSectionIPrx
    getFEMSectionI(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionI(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionIPrx
    getFEMSectionI(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionI");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionI(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionIFields
    getFEMSectionIFields(long id)
    {
        return getFEMSectionIFields(id, null, false);
    }

    public FEMSectionIFields
    getFEMSectionIFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionIFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionIFields
    getFEMSectionIFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionIFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionIFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionIFields[]
    getFEMSectionIFieldsList(long[] ids)
    {
        return getFEMSectionIFieldsList(ids, null, false);
    }

    public FEMSectionIFields[]
    getFEMSectionIFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionIFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionIFields[]
    getFEMSectionIFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionIFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionIFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSectionIIds()
    {
        return getFEMSectionIIds(null, false);
    }

    public long[]
    getFEMSectionIIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSectionIIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSectionIIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionIIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionIIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionIPrx[]
    getFEMSectionIList(long[] ids)
    {
        return getFEMSectionIList(ids, null, false);
    }

    public FEMSectionIPrx[]
    getFEMSectionIList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionIList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionIPrx[]
    getFEMSectionIList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionIList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionIList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionPipePrx
    getFEMSectionPipe(long id)
    {
        return getFEMSectionPipe(id, null, false);
    }

    public FEMSectionPipePrx
    getFEMSectionPipe(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPipe(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionPipePrx
    getFEMSectionPipe(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPipe");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPipe(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionPipeFields
    getFEMSectionPipeFields(long id)
    {
        return getFEMSectionPipeFields(id, null, false);
    }

    public FEMSectionPipeFields
    getFEMSectionPipeFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPipeFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionPipeFields
    getFEMSectionPipeFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPipeFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPipeFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionPipeFields[]
    getFEMSectionPipeFieldsList(long[] ids)
    {
        return getFEMSectionPipeFieldsList(ids, null, false);
    }

    public FEMSectionPipeFields[]
    getFEMSectionPipeFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPipeFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionPipeFields[]
    getFEMSectionPipeFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPipeFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPipeFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSectionPipeIds()
    {
        return getFEMSectionPipeIds(null, false);
    }

    public long[]
    getFEMSectionPipeIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPipeIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSectionPipeIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPipeIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPipeIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionPipePrx[]
    getFEMSectionPipeList(long[] ids)
    {
        return getFEMSectionPipeList(ids, null, false);
    }

    public FEMSectionPipePrx[]
    getFEMSectionPipeList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPipeList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionPipePrx[]
    getFEMSectionPipeList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPipeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPipeList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionPropPrx
    getFEMSectionProp(long id)
    {
        return getFEMSectionProp(id, null, false);
    }

    public FEMSectionPropPrx
    getFEMSectionProp(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionProp(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionPropPrx
    getFEMSectionProp(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionProp");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionProp(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionPropFields
    getFEMSectionPropFields(long id)
    {
        return getFEMSectionPropFields(id, null, false);
    }

    public FEMSectionPropFields
    getFEMSectionPropFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPropFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionPropFields
    getFEMSectionPropFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPropFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPropFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionPropFields[]
    getFEMSectionPropFieldsList(long[] ids)
    {
        return getFEMSectionPropFieldsList(ids, null, false);
    }

    public FEMSectionPropFields[]
    getFEMSectionPropFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPropFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionPropFields[]
    getFEMSectionPropFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPropFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPropFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSectionPropIds()
    {
        return getFEMSectionPropIds(null, false);
    }

    public long[]
    getFEMSectionPropIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPropIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSectionPropIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPropIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPropIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionPropPrx[]
    getFEMSectionPropList(long[] ids)
    {
        return getFEMSectionPropList(ids, null, false);
    }

    public FEMSectionPropPrx[]
    getFEMSectionPropList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionPropList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionPropPrx[]
    getFEMSectionPropList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionPropList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionPropList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionRectPrx
    getFEMSectionRect(long id)
    {
        return getFEMSectionRect(id, null, false);
    }

    public FEMSectionRectPrx
    getFEMSectionRect(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionRect(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionRectPrx
    getFEMSectionRect(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionRect");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionRect(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionRectFields
    getFEMSectionRectFields(long id)
    {
        return getFEMSectionRectFields(id, null, false);
    }

    public FEMSectionRectFields
    getFEMSectionRectFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionRectFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionRectFields
    getFEMSectionRectFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionRectFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionRectFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionRectFields[]
    getFEMSectionRectFieldsList(long[] ids)
    {
        return getFEMSectionRectFieldsList(ids, null, false);
    }

    public FEMSectionRectFields[]
    getFEMSectionRectFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionRectFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionRectFields[]
    getFEMSectionRectFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionRectFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionRectFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSectionRectIds()
    {
        return getFEMSectionRectIds(null, false);
    }

    public long[]
    getFEMSectionRectIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSectionRectIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSectionRectIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionRectIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionRectIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSectionRectPrx[]
    getFEMSectionRectList(long[] ids)
    {
        return getFEMSectionRectList(ids, null, false);
    }

    public FEMSectionRectPrx[]
    getFEMSectionRectList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSectionRectList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSectionRectPrx[]
    getFEMSectionRectList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSectionRectList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSectionRectList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellPrx
    getFEMShell(long id)
    {
        return getFEMShell(id, null, false);
    }

    public FEMShellPrx
    getFEMShell(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShell(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellPrx
    getFEMShell(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShell");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShell(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellAxesOrthoPrx
    getFEMShellAxesOrtho(long id)
    {
        return getFEMShellAxesOrtho(id, null, false);
    }

    public FEMShellAxesOrthoPrx
    getFEMShellAxesOrtho(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrtho(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellAxesOrthoPrx
    getFEMShellAxesOrtho(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrtho");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrtho(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellAxesOrthoDataPrx
    getFEMShellAxesOrthoData(long id)
    {
        return getFEMShellAxesOrthoData(id, null, false);
    }

    public FEMShellAxesOrthoDataPrx
    getFEMShellAxesOrthoData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellAxesOrthoDataPrx
    getFEMShellAxesOrthoData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellAxesOrthoDataFields
    getFEMShellAxesOrthoDataFields(long id)
    {
        return getFEMShellAxesOrthoDataFields(id, null, false);
    }

    public FEMShellAxesOrthoDataFields
    getFEMShellAxesOrthoDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellAxesOrthoDataFields
    getFEMShellAxesOrthoDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellAxesOrthoDataFields[]
    getFEMShellAxesOrthoDataFieldsList(long[] ids)
    {
        return getFEMShellAxesOrthoDataFieldsList(ids, null, false);
    }

    public FEMShellAxesOrthoDataFields[]
    getFEMShellAxesOrthoDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellAxesOrthoDataFields[]
    getFEMShellAxesOrthoDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMShellAxesOrthoDataIds()
    {
        return getFEMShellAxesOrthoDataIds(null, false);
    }

    public long[]
    getFEMShellAxesOrthoDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMShellAxesOrthoDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellAxesOrthoDataPrx[]
    getFEMShellAxesOrthoDataList(long[] ids)
    {
        return getFEMShellAxesOrthoDataList(ids, null, false);
    }

    public FEMShellAxesOrthoDataPrx[]
    getFEMShellAxesOrthoDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellAxesOrthoDataPrx[]
    getFEMShellAxesOrthoDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellAxesOrthoFields
    getFEMShellAxesOrthoFields(long id)
    {
        return getFEMShellAxesOrthoFields(id, null, false);
    }

    public FEMShellAxesOrthoFields
    getFEMShellAxesOrthoFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellAxesOrthoFields
    getFEMShellAxesOrthoFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellAxesOrthoFields[]
    getFEMShellAxesOrthoFieldsList(long[] ids)
    {
        return getFEMShellAxesOrthoFieldsList(ids, null, false);
    }

    public FEMShellAxesOrthoFields[]
    getFEMShellAxesOrthoFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellAxesOrthoFields[]
    getFEMShellAxesOrthoFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMShellAxesOrthoIds()
    {
        return getFEMShellAxesOrthoIds(null, false);
    }

    public long[]
    getFEMShellAxesOrthoIds(java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMShellAxesOrthoIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellAxesOrthoPrx[]
    getFEMShellAxesOrthoList(long[] ids)
    {
        return getFEMShellAxesOrthoList(ids, null, false);
    }

    public FEMShellAxesOrthoPrx[]
    getFEMShellAxesOrthoList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellAxesOrthoList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellAxesOrthoPrx[]
    getFEMShellAxesOrthoList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellAxesOrthoList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellAxesOrthoList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellDOFPrx
    getFEMShellDOF(long id)
    {
        return getFEMShellDOF(id, null, false);
    }

    public FEMShellDOFPrx
    getFEMShellDOF(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellDOF(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellDOFPrx
    getFEMShellDOF(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellDOF");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellDOF(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellDOFFields
    getFEMShellDOFFields(long id)
    {
        return getFEMShellDOFFields(id, null, false);
    }

    public FEMShellDOFFields
    getFEMShellDOFFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellDOFFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellDOFFields
    getFEMShellDOFFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellDOFFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellDOFFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellDOFFields[]
    getFEMShellDOFFieldsList(long[] ids)
    {
        return getFEMShellDOFFieldsList(ids, null, false);
    }

    public FEMShellDOFFields[]
    getFEMShellDOFFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellDOFFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellDOFFields[]
    getFEMShellDOFFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellDOFFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellDOFFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMShellDOFIds()
    {
        return getFEMShellDOFIds(null, false);
    }

    public long[]
    getFEMShellDOFIds(java.util.Map<String, String> __ctx)
    {
        return getFEMShellDOFIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMShellDOFIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellDOFIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellDOFIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellDOFPrx[]
    getFEMShellDOFList(long[] ids)
    {
        return getFEMShellDOFList(ids, null, false);
    }

    public FEMShellDOFPrx[]
    getFEMShellDOFList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellDOFList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellDOFPrx[]
    getFEMShellDOFList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellDOFList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellDOFList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellFields
    getFEMShellFields(long id)
    {
        return getFEMShellFields(id, null, false);
    }

    public FEMShellFields
    getFEMShellFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellFields
    getFEMShellFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellFields[]
    getFEMShellFieldsList(long[] ids)
    {
        return getFEMShellFieldsList(ids, null, false);
    }

    public FEMShellFields[]
    getFEMShellFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellFields[]
    getFEMShellFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellGroupPrx
    getFEMShellGroup(long id)
    {
        return getFEMShellGroup(id, null, false);
    }

    public FEMShellGroupPrx
    getFEMShellGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellGroupPrx
    getFEMShellGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellGroupFields
    getFEMShellGroupFields(long id)
    {
        return getFEMShellGroupFields(id, null, false);
    }

    public FEMShellGroupFields
    getFEMShellGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellGroupFields
    getFEMShellGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellGroupFields[]
    getFEMShellGroupFieldsList(long[] ids)
    {
        return getFEMShellGroupFieldsList(ids, null, false);
    }

    public FEMShellGroupFields[]
    getFEMShellGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellGroupFields[]
    getFEMShellGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMShellGroupIds()
    {
        return getFEMShellGroupIds(null, false);
    }

    public long[]
    getFEMShellGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMShellGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMShellGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellGroupPrx[]
    getFEMShellGroupList(long[] ids)
    {
        return getFEMShellGroupList(ids, null, false);
    }

    public FEMShellGroupPrx[]
    getFEMShellGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellGroupPrx[]
    getFEMShellGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMShellIds()
    {
        return getFEMShellIds(null, false);
    }

    public long[]
    getFEMShellIds(java.util.Map<String, String> __ctx)
    {
        return getFEMShellIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMShellIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellLayerPrx
    getFEMShellLayer(long id)
    {
        return getFEMShellLayer(id, null, false);
    }

    public FEMShellLayerPrx
    getFEMShellLayer(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellLayer(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellLayerPrx
    getFEMShellLayer(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellLayer");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellLayer(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellLayerFields
    getFEMShellLayerFields(long id)
    {
        return getFEMShellLayerFields(id, null, false);
    }

    public FEMShellLayerFields
    getFEMShellLayerFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellLayerFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellLayerFields
    getFEMShellLayerFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellLayerFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellLayerFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellLayerFields[]
    getFEMShellLayerFieldsList(long[] ids)
    {
        return getFEMShellLayerFieldsList(ids, null, false);
    }

    public FEMShellLayerFields[]
    getFEMShellLayerFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellLayerFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellLayerFields[]
    getFEMShellLayerFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellLayerFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellLayerFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMShellLayerIds()
    {
        return getFEMShellLayerIds(null, false);
    }

    public long[]
    getFEMShellLayerIds(java.util.Map<String, String> __ctx)
    {
        return getFEMShellLayerIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMShellLayerIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellLayerIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellLayerIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellLayerPrx[]
    getFEMShellLayerList(long[] ids)
    {
        return getFEMShellLayerList(ids, null, false);
    }

    public FEMShellLayerPrx[]
    getFEMShellLayerList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellLayerList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellLayerPrx[]
    getFEMShellLayerList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellLayerList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellLayerList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellPrx[]
    getFEMShellList(long[] ids)
    {
        return getFEMShellList(ids, null, false);
    }

    public FEMShellPrx[]
    getFEMShellList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellPrx[]
    getFEMShellList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellPressurePrx
    getFEMShellPressure(long id)
    {
        return getFEMShellPressure(id, null, false);
    }

    public FEMShellPressurePrx
    getFEMShellPressure(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellPressure(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellPressurePrx
    getFEMShellPressure(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellPressure");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellPressure(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellPressureFields
    getFEMShellPressureFields(long id)
    {
        return getFEMShellPressureFields(id, null, false);
    }

    public FEMShellPressureFields
    getFEMShellPressureFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMShellPressureFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellPressureFields
    getFEMShellPressureFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellPressureFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellPressureFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellPressureFields[]
    getFEMShellPressureFieldsList(long[] ids)
    {
        return getFEMShellPressureFieldsList(ids, null, false);
    }

    public FEMShellPressureFields[]
    getFEMShellPressureFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellPressureFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellPressureFields[]
    getFEMShellPressureFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellPressureFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellPressureFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMShellPressureIds()
    {
        return getFEMShellPressureIds(null, false);
    }

    public long[]
    getFEMShellPressureIds(java.util.Map<String, String> __ctx)
    {
        return getFEMShellPressureIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMShellPressureIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellPressureIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellPressureIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMShellPressurePrx[]
    getFEMShellPressureList(long[] ids)
    {
        return getFEMShellPressureList(ids, null, false);
    }

    public FEMShellPressurePrx[]
    getFEMShellPressureList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMShellPressureList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMShellPressurePrx[]
    getFEMShellPressureList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMShellPressureList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMShellPressureList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkewDOFPrx
    getFEMSkewDOF(long id)
    {
        return getFEMSkewDOF(id, null, false);
    }

    public FEMSkewDOFPrx
    getFEMSkewDOF(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSkewDOF(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkewDOFPrx
    getFEMSkewDOF(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewDOF");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewDOF(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkewDOFFields
    getFEMSkewDOFFields(long id)
    {
        return getFEMSkewDOFFields(id, null, false);
    }

    public FEMSkewDOFFields
    getFEMSkewDOFFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSkewDOFFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkewDOFFields
    getFEMSkewDOFFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewDOFFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewDOFFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkewDOFFields[]
    getFEMSkewDOFFieldsList(long[] ids)
    {
        return getFEMSkewDOFFieldsList(ids, null, false);
    }

    public FEMSkewDOFFields[]
    getFEMSkewDOFFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSkewDOFFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkewDOFFields[]
    getFEMSkewDOFFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewDOFFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewDOFFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSkewDOFIds()
    {
        return getFEMSkewDOFIds(null, false);
    }

    public long[]
    getFEMSkewDOFIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSkewDOFIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSkewDOFIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewDOFIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewDOFIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkewDOFPrx[]
    getFEMSkewDOFList(long[] ids)
    {
        return getFEMSkewDOFList(ids, null, false);
    }

    public FEMSkewDOFPrx[]
    getFEMSkewDOFList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSkewDOFList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkewDOFPrx[]
    getFEMSkewDOFList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewDOFList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewDOFList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkewSysAnglesPrx
    getFEMSkewSysAngles(long id)
    {
        return getFEMSkewSysAngles(id, null, false);
    }

    public FEMSkewSysAnglesPrx
    getFEMSkewSysAngles(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSkewSysAngles(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkewSysAnglesPrx
    getFEMSkewSysAngles(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewSysAngles");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewSysAngles(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkewSysAnglesFields
    getFEMSkewSysAnglesFields(long id)
    {
        return getFEMSkewSysAnglesFields(id, null, false);
    }

    public FEMSkewSysAnglesFields
    getFEMSkewSysAnglesFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSkewSysAnglesFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkewSysAnglesFields
    getFEMSkewSysAnglesFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewSysAnglesFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewSysAnglesFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkewSysAnglesFields[]
    getFEMSkewSysAnglesFieldsList(long[] ids)
    {
        return getFEMSkewSysAnglesFieldsList(ids, null, false);
    }

    public FEMSkewSysAnglesFields[]
    getFEMSkewSysAnglesFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSkewSysAnglesFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkewSysAnglesFields[]
    getFEMSkewSysAnglesFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewSysAnglesFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewSysAnglesFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSkewSysAnglesIds()
    {
        return getFEMSkewSysAnglesIds(null, false);
    }

    public long[]
    getFEMSkewSysAnglesIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSkewSysAnglesIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSkewSysAnglesIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewSysAnglesIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewSysAnglesIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkewSysAnglesPrx[]
    getFEMSkewSysAnglesList(long[] ids)
    {
        return getFEMSkewSysAnglesList(ids, null, false);
    }

    public FEMSkewSysAnglesPrx[]
    getFEMSkewSysAnglesList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSkewSysAnglesList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkewSysAnglesPrx[]
    getFEMSkewSysAnglesList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkewSysAnglesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkewSysAnglesList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkeySysNodePrx
    getFEMSkeySysNode(long id)
    {
        return getFEMSkeySysNode(id, null, false);
    }

    public FEMSkeySysNodePrx
    getFEMSkeySysNode(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSkeySysNode(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkeySysNodePrx
    getFEMSkeySysNode(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkeySysNode");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkeySysNode(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkeySysNodeFields
    getFEMSkeySysNodeFields(long id)
    {
        return getFEMSkeySysNodeFields(id, null, false);
    }

    public FEMSkeySysNodeFields
    getFEMSkeySysNodeFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSkeySysNodeFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkeySysNodeFields
    getFEMSkeySysNodeFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkeySysNodeFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkeySysNodeFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkeySysNodeFields[]
    getFEMSkeySysNodeFieldsList(long[] ids)
    {
        return getFEMSkeySysNodeFieldsList(ids, null, false);
    }

    public FEMSkeySysNodeFields[]
    getFEMSkeySysNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSkeySysNodeFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkeySysNodeFields[]
    getFEMSkeySysNodeFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkeySysNodeFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkeySysNodeFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSkeySysNodeIds()
    {
        return getFEMSkeySysNodeIds(null, false);
    }

    public long[]
    getFEMSkeySysNodeIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSkeySysNodeIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSkeySysNodeIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkeySysNodeIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkeySysNodeIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSkeySysNodePrx[]
    getFEMSkeySysNodeList(long[] ids)
    {
        return getFEMSkeySysNodeList(ids, null, false);
    }

    public FEMSkeySysNodePrx[]
    getFEMSkeySysNodeList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSkeySysNodeList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSkeySysNodePrx[]
    getFEMSkeySysNodeList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSkeySysNodeList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSkeySysNodeList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSpringPrx
    getFEMSpring(long id)
    {
        return getFEMSpring(id, null, false);
    }

    public FEMSpringPrx
    getFEMSpring(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSpring(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSpringPrx
    getFEMSpring(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpring");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpring(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSpringFields
    getFEMSpringFields(long id)
    {
        return getFEMSpringFields(id, null, false);
    }

    public FEMSpringFields
    getFEMSpringFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSpringFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSpringFields
    getFEMSpringFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSpringFields[]
    getFEMSpringFieldsList(long[] ids)
    {
        return getFEMSpringFieldsList(ids, null, false);
    }

    public FEMSpringFields[]
    getFEMSpringFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSpringFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSpringFields[]
    getFEMSpringFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSpringGroupPrx
    getFEMSpringGroup(long id)
    {
        return getFEMSpringGroup(id, null, false);
    }

    public FEMSpringGroupPrx
    getFEMSpringGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSpringGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSpringGroupPrx
    getFEMSpringGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSpringGroupFields
    getFEMSpringGroupFields(long id)
    {
        return getFEMSpringGroupFields(id, null, false);
    }

    public FEMSpringGroupFields
    getFEMSpringGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMSpringGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSpringGroupFields
    getFEMSpringGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSpringGroupFields[]
    getFEMSpringGroupFieldsList(long[] ids)
    {
        return getFEMSpringGroupFieldsList(ids, null, false);
    }

    public FEMSpringGroupFields[]
    getFEMSpringGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSpringGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSpringGroupFields[]
    getFEMSpringGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSpringGroupIds()
    {
        return getFEMSpringGroupIds(null, false);
    }

    public long[]
    getFEMSpringGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSpringGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSpringGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSpringGroupPrx[]
    getFEMSpringGroupList(long[] ids)
    {
        return getFEMSpringGroupList(ids, null, false);
    }

    public FEMSpringGroupPrx[]
    getFEMSpringGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSpringGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSpringGroupPrx[]
    getFEMSpringGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMSpringIds()
    {
        return getFEMSpringIds(null, false);
    }

    public long[]
    getFEMSpringIds(java.util.Map<String, String> __ctx)
    {
        return getFEMSpringIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMSpringIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMSpringPrx[]
    getFEMSpringList(long[] ids)
    {
        return getFEMSpringList(ids, null, false);
    }

    public FEMSpringPrx[]
    getFEMSpringList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMSpringList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMSpringPrx[]
    getFEMSpringList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMSpringList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMSpringList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMStrLinesPrx
    getFEMStrLines(long id)
    {
        return getFEMStrLines(id, null, false);
    }

    public FEMStrLinesPrx
    getFEMStrLines(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMStrLines(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMStrLinesPrx
    getFEMStrLines(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMStrLines");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMStrLines(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMStrLinesFields
    getFEMStrLinesFields(long id)
    {
        return getFEMStrLinesFields(id, null, false);
    }

    public FEMStrLinesFields
    getFEMStrLinesFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMStrLinesFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMStrLinesFields
    getFEMStrLinesFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMStrLinesFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMStrLinesFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMStrLinesFields[]
    getFEMStrLinesFieldsList(long[] ids)
    {
        return getFEMStrLinesFieldsList(ids, null, false);
    }

    public FEMStrLinesFields[]
    getFEMStrLinesFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMStrLinesFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMStrLinesFields[]
    getFEMStrLinesFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMStrLinesFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMStrLinesFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMStrLinesIds()
    {
        return getFEMStrLinesIds(null, false);
    }

    public long[]
    getFEMStrLinesIds(java.util.Map<String, String> __ctx)
    {
        return getFEMStrLinesIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMStrLinesIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMStrLinesIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMStrLinesIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMStrLinesPrx[]
    getFEMStrLinesList(long[] ids)
    {
        return getFEMStrLinesList(ids, null, false);
    }

    public FEMStrLinesPrx[]
    getFEMStrLinesList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMStrLinesList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMStrLinesPrx[]
    getFEMStrLinesList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMStrLinesList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMStrLinesList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoIsoDataPrx
    getFEMThermoIsoData(long id)
    {
        return getFEMThermoIsoData(id, null, false);
    }

    public FEMThermoIsoDataPrx
    getFEMThermoIsoData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoIsoDataPrx
    getFEMThermoIsoData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoIsoDataFields
    getFEMThermoIsoDataFields(long id)
    {
        return getFEMThermoIsoDataFields(id, null, false);
    }

    public FEMThermoIsoDataFields
    getFEMThermoIsoDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoIsoDataFields
    getFEMThermoIsoDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoIsoDataFields[]
    getFEMThermoIsoDataFieldsList(long[] ids)
    {
        return getFEMThermoIsoDataFieldsList(ids, null, false);
    }

    public FEMThermoIsoDataFields[]
    getFEMThermoIsoDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoIsoDataFields[]
    getFEMThermoIsoDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMThermoIsoDataIds()
    {
        return getFEMThermoIsoDataIds(null, false);
    }

    public long[]
    getFEMThermoIsoDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMThermoIsoDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoIsoDataPrx[]
    getFEMThermoIsoDataList(long[] ids)
    {
        return getFEMThermoIsoDataList(ids, null, false);
    }

    public FEMThermoIsoDataPrx[]
    getFEMThermoIsoDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoIsoDataPrx[]
    getFEMThermoIsoDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoIsoMaterialsPrx
    getFEMThermoIsoMaterials(long id)
    {
        return getFEMThermoIsoMaterials(id, null, false);
    }

    public FEMThermoIsoMaterialsPrx
    getFEMThermoIsoMaterials(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoMaterials(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoIsoMaterialsPrx
    getFEMThermoIsoMaterials(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoMaterials(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoIsoMaterialsFields
    getFEMThermoIsoMaterialsFields(long id)
    {
        return getFEMThermoIsoMaterialsFields(id, null, false);
    }

    public FEMThermoIsoMaterialsFields
    getFEMThermoIsoMaterialsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoMaterialsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoIsoMaterialsFields
    getFEMThermoIsoMaterialsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoMaterialsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoMaterialsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoIsoMaterialsFields[]
    getFEMThermoIsoMaterialsFieldsList(long[] ids)
    {
        return getFEMThermoIsoMaterialsFieldsList(ids, null, false);
    }

    public FEMThermoIsoMaterialsFields[]
    getFEMThermoIsoMaterialsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoMaterialsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoIsoMaterialsFields[]
    getFEMThermoIsoMaterialsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoMaterialsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoMaterialsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMThermoIsoMaterialsIds()
    {
        return getFEMThermoIsoMaterialsIds(null, false);
    }

    public long[]
    getFEMThermoIsoMaterialsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoMaterialsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMThermoIsoMaterialsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoMaterialsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoMaterialsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoIsoMaterialsPrx[]
    getFEMThermoIsoMaterialsList(long[] ids)
    {
        return getFEMThermoIsoMaterialsList(ids, null, false);
    }

    public FEMThermoIsoMaterialsPrx[]
    getFEMThermoIsoMaterialsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoIsoMaterialsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoIsoMaterialsPrx[]
    getFEMThermoIsoMaterialsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoIsoMaterialsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoIsoMaterialsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoOrthDataPrx
    getFEMThermoOrthData(long id)
    {
        return getFEMThermoOrthData(id, null, false);
    }

    public FEMThermoOrthDataPrx
    getFEMThermoOrthData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoOrthDataPrx
    getFEMThermoOrthData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoOrthDataFields
    getFEMThermoOrthDataFields(long id)
    {
        return getFEMThermoOrthDataFields(id, null, false);
    }

    public FEMThermoOrthDataFields
    getFEMThermoOrthDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoOrthDataFields
    getFEMThermoOrthDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoOrthDataFields[]
    getFEMThermoOrthDataFieldsList(long[] ids)
    {
        return getFEMThermoOrthDataFieldsList(ids, null, false);
    }

    public FEMThermoOrthDataFields[]
    getFEMThermoOrthDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoOrthDataFields[]
    getFEMThermoOrthDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMThermoOrthDataIds()
    {
        return getFEMThermoOrthDataIds(null, false);
    }

    public long[]
    getFEMThermoOrthDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMThermoOrthDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoOrthDataPrx[]
    getFEMThermoOrthDataList(long[] ids)
    {
        return getFEMThermoOrthDataList(ids, null, false);
    }

    public FEMThermoOrthDataPrx[]
    getFEMThermoOrthDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoOrthDataPrx[]
    getFEMThermoOrthDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoOrthMaterialsPrx
    getFEMThermoOrthMaterials(long id)
    {
        return getFEMThermoOrthMaterials(id, null, false);
    }

    public FEMThermoOrthMaterialsPrx
    getFEMThermoOrthMaterials(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthMaterials(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoOrthMaterialsPrx
    getFEMThermoOrthMaterials(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthMaterials");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthMaterials(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoOrthMaterialsFields
    getFEMThermoOrthMaterialsFields(long id)
    {
        return getFEMThermoOrthMaterialsFields(id, null, false);
    }

    public FEMThermoOrthMaterialsFields
    getFEMThermoOrthMaterialsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthMaterialsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoOrthMaterialsFields
    getFEMThermoOrthMaterialsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthMaterialsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthMaterialsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoOrthMaterialsFields[]
    getFEMThermoOrthMaterialsFieldsList(long[] ids)
    {
        return getFEMThermoOrthMaterialsFieldsList(ids, null, false);
    }

    public FEMThermoOrthMaterialsFields[]
    getFEMThermoOrthMaterialsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthMaterialsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoOrthMaterialsFields[]
    getFEMThermoOrthMaterialsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthMaterialsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthMaterialsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMThermoOrthMaterialsIds()
    {
        return getFEMThermoOrthMaterialsIds(null, false);
    }

    public long[]
    getFEMThermoOrthMaterialsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthMaterialsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMThermoOrthMaterialsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthMaterialsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthMaterialsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThermoOrthMaterialsPrx[]
    getFEMThermoOrthMaterialsList(long[] ids)
    {
        return getFEMThermoOrthMaterialsList(ids, null, false);
    }

    public FEMThermoOrthMaterialsPrx[]
    getFEMThermoOrthMaterialsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThermoOrthMaterialsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThermoOrthMaterialsPrx[]
    getFEMThermoOrthMaterialsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThermoOrthMaterialsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThermoOrthMaterialsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThreeDSolidPrx
    getFEMThreeDSolid(long id)
    {
        return getFEMThreeDSolid(id, null, false);
    }

    public FEMThreeDSolidPrx
    getFEMThreeDSolid(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolid(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThreeDSolidPrx
    getFEMThreeDSolid(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolid");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolid(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThreeDSolidFields
    getFEMThreeDSolidFields(long id)
    {
        return getFEMThreeDSolidFields(id, null, false);
    }

    public FEMThreeDSolidFields
    getFEMThreeDSolidFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThreeDSolidFields
    getFEMThreeDSolidFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThreeDSolidFields[]
    getFEMThreeDSolidFieldsList(long[] ids)
    {
        return getFEMThreeDSolidFieldsList(ids, null, false);
    }

    public FEMThreeDSolidFields[]
    getFEMThreeDSolidFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThreeDSolidFields[]
    getFEMThreeDSolidFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThreeDSolidGroupPrx
    getFEMThreeDSolidGroup(long id)
    {
        return getFEMThreeDSolidGroup(id, null, false);
    }

    public FEMThreeDSolidGroupPrx
    getFEMThreeDSolidGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThreeDSolidGroupPrx
    getFEMThreeDSolidGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThreeDSolidGroupFields
    getFEMThreeDSolidGroupFields(long id)
    {
        return getFEMThreeDSolidGroupFields(id, null, false);
    }

    public FEMThreeDSolidGroupFields
    getFEMThreeDSolidGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThreeDSolidGroupFields
    getFEMThreeDSolidGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThreeDSolidGroupFields[]
    getFEMThreeDSolidGroupFieldsList(long[] ids)
    {
        return getFEMThreeDSolidGroupFieldsList(ids, null, false);
    }

    public FEMThreeDSolidGroupFields[]
    getFEMThreeDSolidGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThreeDSolidGroupFields[]
    getFEMThreeDSolidGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMThreeDSolidGroupIds()
    {
        return getFEMThreeDSolidGroupIds(null, false);
    }

    public long[]
    getFEMThreeDSolidGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMThreeDSolidGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThreeDSolidGroupPrx[]
    getFEMThreeDSolidGroupList(long[] ids)
    {
        return getFEMThreeDSolidGroupList(ids, null, false);
    }

    public FEMThreeDSolidGroupPrx[]
    getFEMThreeDSolidGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThreeDSolidGroupPrx[]
    getFEMThreeDSolidGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMThreeDSolidIds()
    {
        return getFEMThreeDSolidIds(null, false);
    }

    public long[]
    getFEMThreeDSolidIds(java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMThreeDSolidIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMThreeDSolidPrx[]
    getFEMThreeDSolidList(long[] ids)
    {
        return getFEMThreeDSolidList(ids, null, false);
    }

    public FEMThreeDSolidPrx[]
    getFEMThreeDSolidList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMThreeDSolidList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMThreeDSolidPrx[]
    getFEMThreeDSolidList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMThreeDSolidList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMThreeDSolidList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTimeFunctionDataPrx
    getFEMTimeFunctionData(long id)
    {
        return getFEMTimeFunctionData(id, null, false);
    }

    public FEMTimeFunctionDataPrx
    getFEMTimeFunctionData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTimeFunctionDataPrx
    getFEMTimeFunctionData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTimeFunctionDataFields
    getFEMTimeFunctionDataFields(long id)
    {
        return getFEMTimeFunctionDataFields(id, null, false);
    }

    public FEMTimeFunctionDataFields
    getFEMTimeFunctionDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTimeFunctionDataFields
    getFEMTimeFunctionDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTimeFunctionDataFields[]
    getFEMTimeFunctionDataFieldsList(long[] ids)
    {
        return getFEMTimeFunctionDataFieldsList(ids, null, false);
    }

    public FEMTimeFunctionDataFields[]
    getFEMTimeFunctionDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTimeFunctionDataFields[]
    getFEMTimeFunctionDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMTimeFunctionDataIds()
    {
        return getFEMTimeFunctionDataIds(null, false);
    }

    public long[]
    getFEMTimeFunctionDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMTimeFunctionDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTimeFunctionDataPrx[]
    getFEMTimeFunctionDataList(long[] ids)
    {
        return getFEMTimeFunctionDataList(ids, null, false);
    }

    public FEMTimeFunctionDataPrx[]
    getFEMTimeFunctionDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTimeFunctionDataPrx[]
    getFEMTimeFunctionDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTimeFunctionsPrx
    getFEMTimeFunctions(long id)
    {
        return getFEMTimeFunctions(id, null, false);
    }

    public FEMTimeFunctionsPrx
    getFEMTimeFunctions(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctions(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTimeFunctionsPrx
    getFEMTimeFunctions(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctions");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctions(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTimeFunctionsFields
    getFEMTimeFunctionsFields(long id)
    {
        return getFEMTimeFunctionsFields(id, null, false);
    }

    public FEMTimeFunctionsFields
    getFEMTimeFunctionsFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionsFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTimeFunctionsFields
    getFEMTimeFunctionsFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionsFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionsFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTimeFunctionsFields[]
    getFEMTimeFunctionsFieldsList(long[] ids)
    {
        return getFEMTimeFunctionsFieldsList(ids, null, false);
    }

    public FEMTimeFunctionsFields[]
    getFEMTimeFunctionsFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionsFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTimeFunctionsFields[]
    getFEMTimeFunctionsFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionsFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionsFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMTimeFunctionsIds()
    {
        return getFEMTimeFunctionsIds(null, false);
    }

    public long[]
    getFEMTimeFunctionsIds(java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionsIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMTimeFunctionsIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionsIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionsIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTimeFunctionsPrx[]
    getFEMTimeFunctionsList(long[] ids)
    {
        return getFEMTimeFunctionsList(ids, null, false);
    }

    public FEMTimeFunctionsPrx[]
    getFEMTimeFunctionsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTimeFunctionsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTimeFunctionsPrx[]
    getFEMTimeFunctionsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTimeFunctionsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTimeFunctionsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTrussPrx
    getFEMTruss(long id)
    {
        return getFEMTruss(id, null, false);
    }

    public FEMTrussPrx
    getFEMTruss(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTruss(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTrussPrx
    getFEMTruss(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTruss");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTruss(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTrussFields
    getFEMTrussFields(long id)
    {
        return getFEMTrussFields(id, null, false);
    }

    public FEMTrussFields
    getFEMTrussFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTrussFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTrussFields
    getFEMTrussFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTrussFields[]
    getFEMTrussFieldsList(long[] ids)
    {
        return getFEMTrussFieldsList(ids, null, false);
    }

    public FEMTrussFields[]
    getFEMTrussFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTrussFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTrussFields[]
    getFEMTrussFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTrussGroupPrx
    getFEMTrussGroup(long id)
    {
        return getFEMTrussGroup(id, null, false);
    }

    public FEMTrussGroupPrx
    getFEMTrussGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTrussGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTrussGroupPrx
    getFEMTrussGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTrussGroupFields
    getFEMTrussGroupFields(long id)
    {
        return getFEMTrussGroupFields(id, null, false);
    }

    public FEMTrussGroupFields
    getFEMTrussGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTrussGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTrussGroupFields
    getFEMTrussGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTrussGroupFields[]
    getFEMTrussGroupFieldsList(long[] ids)
    {
        return getFEMTrussGroupFieldsList(ids, null, false);
    }

    public FEMTrussGroupFields[]
    getFEMTrussGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTrussGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTrussGroupFields[]
    getFEMTrussGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMTrussGroupIds()
    {
        return getFEMTrussGroupIds(null, false);
    }

    public long[]
    getFEMTrussGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMTrussGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMTrussGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTrussGroupPrx[]
    getFEMTrussGroupList(long[] ids)
    {
        return getFEMTrussGroupList(ids, null, false);
    }

    public FEMTrussGroupPrx[]
    getFEMTrussGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTrussGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTrussGroupPrx[]
    getFEMTrussGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMTrussIds()
    {
        return getFEMTrussIds(null, false);
    }

    public long[]
    getFEMTrussIds(java.util.Map<String, String> __ctx)
    {
        return getFEMTrussIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMTrussIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTrussPrx[]
    getFEMTrussList(long[] ids)
    {
        return getFEMTrussList(ids, null, false);
    }

    public FEMTrussPrx[]
    getFEMTrussList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTrussList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTrussPrx[]
    getFEMTrussList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTrussList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTrussList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwistMomentDataPrx
    getFEMTwistMomentData(long id)
    {
        return getFEMTwistMomentData(id, null, false);
    }

    public FEMTwistMomentDataPrx
    getFEMTwistMomentData(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTwistMomentData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwistMomentDataPrx
    getFEMTwistMomentData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwistMomentData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwistMomentData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwistMomentDataFields
    getFEMTwistMomentDataFields(long id)
    {
        return getFEMTwistMomentDataFields(id, null, false);
    }

    public FEMTwistMomentDataFields
    getFEMTwistMomentDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTwistMomentDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwistMomentDataFields
    getFEMTwistMomentDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwistMomentDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwistMomentDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwistMomentDataFields[]
    getFEMTwistMomentDataFieldsList(long[] ids)
    {
        return getFEMTwistMomentDataFieldsList(ids, null, false);
    }

    public FEMTwistMomentDataFields[]
    getFEMTwistMomentDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTwistMomentDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwistMomentDataFields[]
    getFEMTwistMomentDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwistMomentDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwistMomentDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMTwistMomentDataIds()
    {
        return getFEMTwistMomentDataIds(null, false);
    }

    public long[]
    getFEMTwistMomentDataIds(java.util.Map<String, String> __ctx)
    {
        return getFEMTwistMomentDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMTwistMomentDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwistMomentDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwistMomentDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwistMomentDataPrx[]
    getFEMTwistMomentDataList(long[] ids)
    {
        return getFEMTwistMomentDataList(ids, null, false);
    }

    public FEMTwistMomentDataPrx[]
    getFEMTwistMomentDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTwistMomentDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwistMomentDataPrx[]
    getFEMTwistMomentDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwistMomentDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwistMomentDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwoDSolidPrx
    getFEMTwoDSolid(long id)
    {
        return getFEMTwoDSolid(id, null, false);
    }

    public FEMTwoDSolidPrx
    getFEMTwoDSolid(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolid(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwoDSolidPrx
    getFEMTwoDSolid(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolid");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolid(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwoDSolidFields
    getFEMTwoDSolidFields(long id)
    {
        return getFEMTwoDSolidFields(id, null, false);
    }

    public FEMTwoDSolidFields
    getFEMTwoDSolidFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwoDSolidFields
    getFEMTwoDSolidFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwoDSolidFields[]
    getFEMTwoDSolidFieldsList(long[] ids)
    {
        return getFEMTwoDSolidFieldsList(ids, null, false);
    }

    public FEMTwoDSolidFields[]
    getFEMTwoDSolidFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwoDSolidFields[]
    getFEMTwoDSolidFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwoDSolidGroupPrx
    getFEMTwoDSolidGroup(long id)
    {
        return getFEMTwoDSolidGroup(id, null, false);
    }

    public FEMTwoDSolidGroupPrx
    getFEMTwoDSolidGroup(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidGroup(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwoDSolidGroupPrx
    getFEMTwoDSolidGroup(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidGroup");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidGroup(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwoDSolidGroupFields
    getFEMTwoDSolidGroupFields(long id)
    {
        return getFEMTwoDSolidGroupFields(id, null, false);
    }

    public FEMTwoDSolidGroupFields
    getFEMTwoDSolidGroupFields(long id, java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidGroupFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwoDSolidGroupFields
    getFEMTwoDSolidGroupFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidGroupFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidGroupFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwoDSolidGroupFields[]
    getFEMTwoDSolidGroupFieldsList(long[] ids)
    {
        return getFEMTwoDSolidGroupFieldsList(ids, null, false);
    }

    public FEMTwoDSolidGroupFields[]
    getFEMTwoDSolidGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidGroupFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwoDSolidGroupFields[]
    getFEMTwoDSolidGroupFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidGroupFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidGroupFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMTwoDSolidGroupIds()
    {
        return getFEMTwoDSolidGroupIds(null, false);
    }

    public long[]
    getFEMTwoDSolidGroupIds(java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidGroupIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMTwoDSolidGroupIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidGroupIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidGroupIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwoDSolidGroupPrx[]
    getFEMTwoDSolidGroupList(long[] ids)
    {
        return getFEMTwoDSolidGroupList(ids, null, false);
    }

    public FEMTwoDSolidGroupPrx[]
    getFEMTwoDSolidGroupList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidGroupList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwoDSolidGroupPrx[]
    getFEMTwoDSolidGroupList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidGroupList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidGroupList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getFEMTwoDSolidIds()
    {
        return getFEMTwoDSolidIds(null, false);
    }

    public long[]
    getFEMTwoDSolidIds(java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getFEMTwoDSolidIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public FEMTwoDSolidPrx[]
    getFEMTwoDSolidList(long[] ids)
    {
        return getFEMTwoDSolidList(ids, null, false);
    }

    public FEMTwoDSolidPrx[]
    getFEMTwoDSolidList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getFEMTwoDSolidList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private FEMTwoDSolidPrx[]
    getFEMTwoDSolidList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFEMTwoDSolidList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getFEMTwoDSolidList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public MappingMatrixPrx
    getMappingMatrix(long id)
    {
        return getMappingMatrix(id, null, false);
    }

    public MappingMatrixPrx
    getMappingMatrix(long id, java.util.Map<String, String> __ctx)
    {
        return getMappingMatrix(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private MappingMatrixPrx
    getMappingMatrix(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMappingMatrix");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getMappingMatrix(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public MappingMatrixFields
    getMappingMatrixFields(long id)
    {
        return getMappingMatrixFields(id, null, false);
    }

    public MappingMatrixFields
    getMappingMatrixFields(long id, java.util.Map<String, String> __ctx)
    {
        return getMappingMatrixFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private MappingMatrixFields
    getMappingMatrixFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMappingMatrixFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getMappingMatrixFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public MappingMatrixFields[]
    getMappingMatrixFieldsList(long[] ids)
    {
        return getMappingMatrixFieldsList(ids, null, false);
    }

    public MappingMatrixFields[]
    getMappingMatrixFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getMappingMatrixFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private MappingMatrixFields[]
    getMappingMatrixFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMappingMatrixFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getMappingMatrixFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getMappingMatrixIds()
    {
        return getMappingMatrixIds(null, false);
    }

    public long[]
    getMappingMatrixIds(java.util.Map<String, String> __ctx)
    {
        return getMappingMatrixIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getMappingMatrixIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMappingMatrixIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getMappingMatrixIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public MappingMatrixPrx[]
    getMappingMatrixList(long[] ids)
    {
        return getMappingMatrixList(ids, null, false);
    }

    public MappingMatrixPrx[]
    getMappingMatrixList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getMappingMatrixList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private MappingMatrixPrx[]
    getMappingMatrixList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMappingMatrixList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getMappingMatrixList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SensorPrx
    getSensor(long id)
    {
        return getSensor(id, null, false);
    }

    public SensorPrx
    getSensor(long id, java.util.Map<String, String> __ctx)
    {
        return getSensor(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SensorPrx
    getSensor(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensor");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensor(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SensorFields
    getSensorFields(long id)
    {
        return getSensorFields(id, null, false);
    }

    public SensorFields
    getSensorFields(long id, java.util.Map<String, String> __ctx)
    {
        return getSensorFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SensorFields
    getSensorFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SensorFields[]
    getSensorFieldsList(long[] ids)
    {
        return getSensorFieldsList(ids, null, false);
    }

    public SensorFields[]
    getSensorFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getSensorFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SensorFields[]
    getSensorFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getSensorIds()
    {
        return getSensorIds(null, false);
    }

    public long[]
    getSensorIds(java.util.Map<String, String> __ctx)
    {
        return getSensorIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getSensorIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SensorPrx[]
    getSensorList(long[] ids)
    {
        return getSensorList(ids, null, false);
    }

    public SensorPrx[]
    getSensorList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getSensorList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SensorPrx[]
    getSensorList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SensorTimeDataPrx
    getSensorTimeData(long id)
    {
        return getSensorTimeData(id, null, false);
    }

    public SensorTimeDataPrx
    getSensorTimeData(long id, java.util.Map<String, String> __ctx)
    {
        return getSensorTimeData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SensorTimeDataPrx
    getSensorTimeData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorTimeData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorTimeData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SensorTimeDataFields
    getSensorTimeDataFields(long id)
    {
        return getSensorTimeDataFields(id, null, false);
    }

    public SensorTimeDataFields
    getSensorTimeDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getSensorTimeDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SensorTimeDataFields
    getSensorTimeDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorTimeDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorTimeDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SensorTimeDataFields[]
    getSensorTimeDataFieldsList(long[] ids)
    {
        return getSensorTimeDataFieldsList(ids, null, false);
    }

    public SensorTimeDataFields[]
    getSensorTimeDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getSensorTimeDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SensorTimeDataFields[]
    getSensorTimeDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorTimeDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorTimeDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getSensorTimeDataIds()
    {
        return getSensorTimeDataIds(null, false);
    }

    public long[]
    getSensorTimeDataIds(java.util.Map<String, String> __ctx)
    {
        return getSensorTimeDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getSensorTimeDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorTimeDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorTimeDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public SensorTimeDataPrx[]
    getSensorTimeDataList(long[] ids)
    {
        return getSensorTimeDataList(ids, null, false);
    }

    public SensorTimeDataPrx[]
    getSensorTimeDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getSensorTimeDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private SensorTimeDataPrx[]
    getSensorTimeDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSensorTimeDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getSensorTimeDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public StructurePrx
    getStructure(long id)
    {
        return getStructure(id, null, false);
    }

    public StructurePrx
    getStructure(long id, java.util.Map<String, String> __ctx)
    {
        return getStructure(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private StructurePrx
    getStructure(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStructure");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getStructure(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public StructureFields
    getStructureFields(long id)
    {
        return getStructureFields(id, null, false);
    }

    public StructureFields
    getStructureFields(long id, java.util.Map<String, String> __ctx)
    {
        return getStructureFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private StructureFields
    getStructureFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStructureFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getStructureFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public StructureFields[]
    getStructureFieldsList(long[] ids)
    {
        return getStructureFieldsList(ids, null, false);
    }

    public StructureFields[]
    getStructureFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getStructureFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private StructureFields[]
    getStructureFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStructureFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getStructureFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getStructureIds()
    {
        return getStructureIds(null, false);
    }

    public long[]
    getStructureIds(java.util.Map<String, String> __ctx)
    {
        return getStructureIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getStructureIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStructureIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getStructureIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public StructurePrx[]
    getStructureList(long[] ids)
    {
        return getStructureList(ids, null, false);
    }

    public StructurePrx[]
    getStructureList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getStructureList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private StructurePrx[]
    getStructureList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStructureList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getStructureList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerPrx
    getTransducer(long id)
    {
        return getTransducer(id, null, false);
    }

    public TransducerPrx
    getTransducer(long id, java.util.Map<String, String> __ctx)
    {
        return getTransducer(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerPrx
    getTransducer(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducer");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducer(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerCycleDataPrx
    getTransducerCycleData(long id)
    {
        return getTransducerCycleData(id, null, false);
    }

    public TransducerCycleDataPrx
    getTransducerCycleData(long id, java.util.Map<String, String> __ctx)
    {
        return getTransducerCycleData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerCycleDataPrx
    getTransducerCycleData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerCycleData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerCycleData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerCycleDataFields
    getTransducerCycleDataFields(long id)
    {
        return getTransducerCycleDataFields(id, null, false);
    }

    public TransducerCycleDataFields
    getTransducerCycleDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getTransducerCycleDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerCycleDataFields
    getTransducerCycleDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerCycleDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerCycleDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerCycleDataFields[]
    getTransducerCycleDataFieldsList(long[] ids)
    {
        return getTransducerCycleDataFieldsList(ids, null, false);
    }

    public TransducerCycleDataFields[]
    getTransducerCycleDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getTransducerCycleDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerCycleDataFields[]
    getTransducerCycleDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerCycleDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerCycleDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getTransducerCycleDataIds()
    {
        return getTransducerCycleDataIds(null, false);
    }

    public long[]
    getTransducerCycleDataIds(java.util.Map<String, String> __ctx)
    {
        return getTransducerCycleDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getTransducerCycleDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerCycleDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerCycleDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerCycleDataPrx[]
    getTransducerCycleDataList(long[] ids)
    {
        return getTransducerCycleDataList(ids, null, false);
    }

    public TransducerCycleDataPrx[]
    getTransducerCycleDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getTransducerCycleDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerCycleDataPrx[]
    getTransducerCycleDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerCycleDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerCycleDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerFields
    getTransducerFields(long id)
    {
        return getTransducerFields(id, null, false);
    }

    public TransducerFields
    getTransducerFields(long id, java.util.Map<String, String> __ctx)
    {
        return getTransducerFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerFields
    getTransducerFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerFields[]
    getTransducerFieldsList(long[] ids)
    {
        return getTransducerFieldsList(ids, null, false);
    }

    public TransducerFields[]
    getTransducerFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getTransducerFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerFields[]
    getTransducerFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getTransducerIds()
    {
        return getTransducerIds(null, false);
    }

    public long[]
    getTransducerIds(java.util.Map<String, String> __ctx)
    {
        return getTransducerIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getTransducerIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerPrx[]
    getTransducerList(long[] ids)
    {
        return getTransducerList(ids, null, false);
    }

    public TransducerPrx[]
    getTransducerList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getTransducerList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerPrx[]
    getTransducerList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerTimeDataPrx
    getTransducerTimeData(long id)
    {
        return getTransducerTimeData(id, null, false);
    }

    public TransducerTimeDataPrx
    getTransducerTimeData(long id, java.util.Map<String, String> __ctx)
    {
        return getTransducerTimeData(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerTimeDataPrx
    getTransducerTimeData(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerTimeData");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerTimeData(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerTimeDataFields
    getTransducerTimeDataFields(long id)
    {
        return getTransducerTimeDataFields(id, null, false);
    }

    public TransducerTimeDataFields
    getTransducerTimeDataFields(long id, java.util.Map<String, String> __ctx)
    {
        return getTransducerTimeDataFields(id, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerTimeDataFields
    getTransducerTimeDataFields(long id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerTimeDataFields");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerTimeDataFields(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerTimeDataFields[]
    getTransducerTimeDataFieldsList(long[] ids)
    {
        return getTransducerTimeDataFieldsList(ids, null, false);
    }

    public TransducerTimeDataFields[]
    getTransducerTimeDataFieldsList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getTransducerTimeDataFieldsList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerTimeDataFields[]
    getTransducerTimeDataFieldsList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerTimeDataFieldsList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerTimeDataFieldsList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public long[]
    getTransducerTimeDataIds()
    {
        return getTransducerTimeDataIds(null, false);
    }

    public long[]
    getTransducerTimeDataIds(java.util.Map<String, String> __ctx)
    {
        return getTransducerTimeDataIds(__ctx, true);
    }

    @SuppressWarnings("unchecked")
    private long[]
    getTransducerTimeDataIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerTimeDataIds");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerTimeDataIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public TransducerTimeDataPrx[]
    getTransducerTimeDataList(long[] ids)
    {
        return getTransducerTimeDataList(ids, null, false);
    }

    public TransducerTimeDataPrx[]
    getTransducerTimeDataList(long[] ids, java.util.Map<String, String> __ctx)
    {
        return getTransducerTimeDataList(ids, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private TransducerTimeDataPrx[]
    getTransducerTimeDataList(long[] ids, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTransducerTimeDataList");
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                return __del.getTransducerTimeDataList(ids, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setAccelMeasFields(AccelMeasFields fields, String[] fieldNames)
    {
        setAccelMeasFields(fields, fieldNames, null, false);
    }

    public void
    setAccelMeasFields(AccelMeasFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setAccelMeasFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setAccelMeasFields(AccelMeasFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setAccelMeasFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setCycleFields(CycleFields fields, String[] fieldNames)
    {
        setCycleFields(fields, fieldNames, null, false);
    }

    public void
    setCycleFields(CycleFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setCycleFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setCycleFields(CycleFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setCycleFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setDaqUnitChannelDataFields(DaqUnitChannelDataFields fields, String[] fieldNames)
    {
        setDaqUnitChannelDataFields(fields, fieldNames, null, false);
    }

    public void
    setDaqUnitChannelDataFields(DaqUnitChannelDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setDaqUnitChannelDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setDaqUnitChannelDataFields(DaqUnitChannelDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setDaqUnitChannelDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setDaqUnitChannelFields(DaqUnitChannelFields fields, String[] fieldNames)
    {
        setDaqUnitChannelFields(fields, fieldNames, null, false);
    }

    public void
    setDaqUnitChannelFields(DaqUnitChannelFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setDaqUnitChannelFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setDaqUnitChannelFields(DaqUnitChannelFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setDaqUnitChannelFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setDaqUnitFields(DaqUnitFields fields, String[] fieldNames)
    {
        setDaqUnitFields(fields, fieldNames, null, false);
    }

    public void
    setDaqUnitFields(DaqUnitFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setDaqUnitFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setDaqUnitFields(DaqUnitFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setDaqUnitFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setExperimentFields(ExperimentFields fields, String[] fieldNames)
    {
        setExperimentFields(fields, fieldNames, null, false);
    }

    public void
    setExperimentFields(ExperimentFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setExperimentFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setExperimentFields(ExperimentFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setExperimentFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setExperimentStructureDataFields(ExperimentStructureDataFields fields, String[] fieldNames)
    {
        setExperimentStructureDataFields(fields, fieldNames, null, false);
    }

    public void
    setExperimentStructureDataFields(ExperimentStructureDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setExperimentStructureDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setExperimentStructureDataFields(ExperimentStructureDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setExperimentStructureDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMAppliedConcentratedLoadFields(FEMAppliedConcentratedLoadFields fields, String[] fieldNames)
    {
        setFEMAppliedConcentratedLoadFields(fields, fieldNames, null, false);
    }

    public void
    setFEMAppliedConcentratedLoadFields(FEMAppliedConcentratedLoadFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMAppliedConcentratedLoadFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMAppliedConcentratedLoadFields(FEMAppliedConcentratedLoadFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMAppliedConcentratedLoadFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMAppliedDisplacementFields(FEMAppliedDisplacementFields fields, String[] fieldNames)
    {
        setFEMAppliedDisplacementFields(fields, fieldNames, null, false);
    }

    public void
    setFEMAppliedDisplacementFields(FEMAppliedDisplacementFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMAppliedDisplacementFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMAppliedDisplacementFields(FEMAppliedDisplacementFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMAppliedDisplacementFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMAppliedLoadsFields(FEMAppliedLoadsFields fields, String[] fieldNames)
    {
        setFEMAppliedLoadsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMAppliedLoadsFields(FEMAppliedLoadsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMAppliedLoadsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMAppliedLoadsFields(FEMAppliedLoadsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMAppliedLoadsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMAppliedTemperatureFields(FEMAppliedTemperatureFields fields, String[] fieldNames)
    {
        setFEMAppliedTemperatureFields(fields, fieldNames, null, false);
    }

    public void
    setFEMAppliedTemperatureFields(FEMAppliedTemperatureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMAppliedTemperatureFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMAppliedTemperatureFields(FEMAppliedTemperatureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMAppliedTemperatureFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMAxesNodeFields(FEMAxesNodeFields fields, String[] fieldNames)
    {
        setFEMAxesNodeFields(fields, fieldNames, null, false);
    }

    public void
    setFEMAxesNodeFields(FEMAxesNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMAxesNodeFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMAxesNodeFields(FEMAxesNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMAxesNodeFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMBeamFields(FEMBeamFields fields, String[] fieldNames)
    {
        setFEMBeamFields(fields, fieldNames, null, false);
    }

    public void
    setFEMBeamFields(FEMBeamFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMBeamFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMBeamFields(FEMBeamFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMBeamFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMBeamLoadFields(FEMBeamLoadFields fields, String[] fieldNames)
    {
        setFEMBeamLoadFields(fields, fieldNames, null, false);
    }

    public void
    setFEMBeamLoadFields(FEMBeamLoadFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMBeamLoadFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMBeamLoadFields(FEMBeamLoadFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMBeamLoadFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMBeamNodeFields(FEMBeamNodeFields fields, String[] fieldNames)
    {
        setFEMBeamNodeFields(fields, fieldNames, null, false);
    }

    public void
    setFEMBeamNodeFields(FEMBeamNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMBeamNodeFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMBeamNodeFields(FEMBeamNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMBeamNodeFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMBoundaryFields(FEMBoundaryFields fields, String[] fieldNames)
    {
        setFEMBoundaryFields(fields, fieldNames, null, false);
    }

    public void
    setFEMBoundaryFields(FEMBoundaryFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMBoundaryFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMBoundaryFields(FEMBoundaryFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMBoundaryFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMConstraintCoefFields(FEMConstraintCoefFields fields, String[] fieldNames)
    {
        setFEMConstraintCoefFields(fields, fieldNames, null, false);
    }

    public void
    setFEMConstraintCoefFields(FEMConstraintCoefFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMConstraintCoefFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMConstraintCoefFields(FEMConstraintCoefFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMConstraintCoefFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMConstraintsFields(FEMConstraintsFields fields, String[] fieldNames)
    {
        setFEMConstraintsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMConstraintsFields(FEMConstraintsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMConstraintsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMConstraintsFields(FEMConstraintsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMConstraintsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMContactGroup3Fields(FEMContactGroup3Fields fields, String[] fieldNames)
    {
        setFEMContactGroup3Fields(fields, fieldNames, null, false);
    }

    public void
    setFEMContactGroup3Fields(FEMContactGroup3Fields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMContactGroup3Fields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMContactGroup3Fields(FEMContactGroup3Fields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMContactGroup3Fields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMContactPairsFields(FEMContactPairsFields fields, String[] fieldNames)
    {
        setFEMContactPairsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMContactPairsFields(FEMContactPairsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMContactPairsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMContactPairsFields(FEMContactPairsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMContactPairsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMContactSurfaceFields(FEMContactSurfaceFields fields, String[] fieldNames)
    {
        setFEMContactSurfaceFields(fields, fieldNames, null, false);
    }

    public void
    setFEMContactSurfaceFields(FEMContactSurfaceFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMContactSurfaceFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMContactSurfaceFields(FEMContactSurfaceFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMContactSurfaceFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMCoordSystemFields(FEMCoordSystemFields fields, String[] fieldNames)
    {
        setFEMCoordSystemFields(fields, fieldNames, null, false);
    }

    public void
    setFEMCoordSystemFields(FEMCoordSystemFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMCoordSystemFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMCoordSystemFields(FEMCoordSystemFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMCoordSystemFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMCrossSectionsFields(FEMCrossSectionsFields fields, String[] fieldNames)
    {
        setFEMCrossSectionsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMCrossSectionsFields(FEMCrossSectionsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMCrossSectionsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMCrossSectionsFields(FEMCrossSectionsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMCrossSectionsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMCurvMomentDataFields(FEMCurvMomentDataFields fields, String[] fieldNames)
    {
        setFEMCurvMomentDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMCurvMomentDataFields(FEMCurvMomentDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMCurvMomentDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMCurvMomentDataFields(FEMCurvMomentDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMCurvMomentDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMDampingFields(FEMDampingFields fields, String[] fieldNames)
    {
        setFEMDampingFields(fields, fieldNames, null, false);
    }

    public void
    setFEMDampingFields(FEMDampingFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMDampingFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMDampingFields(FEMDampingFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMDampingFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMDofFields(FEMDofFields fields, String[] fieldNames)
    {
        setFEMDofFields(fields, fieldNames, null, false);
    }

    public void
    setFEMDofFields(FEMDofFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMDofFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMDofFields(FEMDofFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMDofFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMElasticMaterialFields(FEMElasticMaterialFields fields, String[] fieldNames)
    {
        setFEMElasticMaterialFields(fields, fieldNames, null, false);
    }

    public void
    setFEMElasticMaterialFields(FEMElasticMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMElasticMaterialFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMElasticMaterialFields(FEMElasticMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMElasticMaterialFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMEndreleasesFields(FEMEndreleasesFields fields, String[] fieldNames)
    {
        setFEMEndreleasesFields(fields, fieldNames, null, false);
    }

    public void
    setFEMEndreleasesFields(FEMEndreleasesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMEndreleasesFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMEndreleasesFields(FEMEndreleasesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMEndreleasesFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMForceStrainDataFields(FEMForceStrainDataFields fields, String[] fieldNames)
    {
        setFEMForceStrainDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMForceStrainDataFields(FEMForceStrainDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMForceStrainDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMForceStrainDataFields(FEMForceStrainDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMForceStrainDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMGeneralFields(FEMGeneralFields fields, String[] fieldNames)
    {
        setFEMGeneralFields(fields, fieldNames, null, false);
    }

    public void
    setFEMGeneralFields(FEMGeneralFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMGeneralFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMGeneralFields(FEMGeneralFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMGeneralFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMGeneralGroupFields(FEMGeneralGroupFields fields, String[] fieldNames)
    {
        setFEMGeneralGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMGeneralGroupFields(FEMGeneralGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMGeneralGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMGeneralGroupFields(FEMGeneralGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMGeneralGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMGeneralNodeFields(FEMGeneralNodeFields fields, String[] fieldNames)
    {
        setFEMGeneralNodeFields(fields, fieldNames, null, false);
    }

    public void
    setFEMGeneralNodeFields(FEMGeneralNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMGeneralNodeFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMGeneralNodeFields(FEMGeneralNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMGeneralNodeFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMGroundMotionRecordFields(FEMGroundMotionRecordFields fields, String[] fieldNames)
    {
        setFEMGroundMotionRecordFields(fields, fieldNames, null, false);
    }

    public void
    setFEMGroundMotionRecordFields(FEMGroundMotionRecordFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMGroundMotionRecordFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMGroundMotionRecordFields(FEMGroundMotionRecordFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMGroundMotionRecordFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMGroupFields(FEMGroupFields fields, String[] fieldNames)
    {
        setFEMGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMGroupFields(FEMGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMGroupFields(FEMGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMInitialTemperatureFields(FEMInitialTemperatureFields fields, String[] fieldNames)
    {
        setFEMInitialTemperatureFields(fields, fieldNames, null, false);
    }

    public void
    setFEMInitialTemperatureFields(FEMInitialTemperatureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMInitialTemperatureFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMInitialTemperatureFields(FEMInitialTemperatureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMInitialTemperatureFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMIsoBeamFields(FEMIsoBeamFields fields, String[] fieldNames)
    {
        setFEMIsoBeamFields(fields, fieldNames, null, false);
    }

    public void
    setFEMIsoBeamFields(FEMIsoBeamFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMIsoBeamFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMIsoBeamFields(FEMIsoBeamFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMIsoBeamFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMIsoBeamGroupFields(FEMIsoBeamGroupFields fields, String[] fieldNames)
    {
        setFEMIsoBeamGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMIsoBeamGroupFields(FEMIsoBeamGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMIsoBeamGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMIsoBeamGroupFields(FEMIsoBeamGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMIsoBeamGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMLinkFields(FEMLinkFields fields, String[] fieldNames)
    {
        setFEMLinkFields(fields, fieldNames, null, false);
    }

    public void
    setFEMLinkFields(FEMLinkFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMLinkFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMLinkFields(FEMLinkFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMLinkFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMLoadMassProportionalFields(FEMLoadMassProportionalFields fields, String[] fieldNames)
    {
        setFEMLoadMassProportionalFields(fields, fieldNames, null, false);
    }

    public void
    setFEMLoadMassProportionalFields(FEMLoadMassProportionalFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMLoadMassProportionalFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMLoadMassProportionalFields(FEMLoadMassProportionalFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMLoadMassProportionalFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMMCForceDataFields(FEMMCForceDataFields fields, String[] fieldNames)
    {
        setFEMMCForceDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMMCForceDataFields(FEMMCForceDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMMCForceDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMMCForceDataFields(FEMMCForceDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMMCForceDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMMCrigiditiesFields(FEMMCrigiditiesFields fields, String[] fieldNames)
    {
        setFEMMCrigiditiesFields(fields, fieldNames, null, false);
    }

    public void
    setFEMMCrigiditiesFields(FEMMCrigiditiesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMMCrigiditiesFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMMCrigiditiesFields(FEMMCrigiditiesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMMCrigiditiesFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMMTForceDataFields(FEMMTForceDataFields fields, String[] fieldNames)
    {
        setFEMMTForceDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMMTForceDataFields(FEMMTForceDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMMTForceDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMMTForceDataFields(FEMMTForceDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMMTForceDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMMaterialFields(FEMMaterialFields fields, String[] fieldNames)
    {
        setFEMMaterialFields(fields, fieldNames, null, false);
    }

    public void
    setFEMMaterialFields(FEMMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMMaterialFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMMaterialFields(FEMMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMMaterialFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMMatricesFields(FEMMatricesFields fields, String[] fieldNames)
    {
        setFEMMatricesFields(fields, fieldNames, null, false);
    }

    public void
    setFEMMatricesFields(FEMMatricesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMMatricesFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMMatricesFields(FEMMatricesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMMatricesFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMMatrixDataFields(FEMMatrixDataFields fields, String[] fieldNames)
    {
        setFEMMatrixDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMMatrixDataFields(FEMMatrixDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMMatrixDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMMatrixDataFields(FEMMatrixDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMMatrixDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMMatrixSetsFields(FEMMatrixSetsFields fields, String[] fieldNames)
    {
        setFEMMatrixSetsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMMatrixSetsFields(FEMMatrixSetsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMMatrixSetsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMMatrixSetsFields(FEMMatrixSetsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMMatrixSetsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMNKDisplForceFields(FEMNKDisplForceFields fields, String[] fieldNames)
    {
        setFEMNKDisplForceFields(fields, fieldNames, null, false);
    }

    public void
    setFEMNKDisplForceFields(FEMNKDisplForceFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMNKDisplForceFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMNKDisplForceFields(FEMNKDisplForceFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMNKDisplForceFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMNLElasticMaterialsFields(FEMNLElasticMaterialsFields fields, String[] fieldNames)
    {
        setFEMNLElasticMaterialsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMNLElasticMaterialsFields(FEMNLElasticMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMNLElasticMaterialsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMNLElasticMaterialsFields(FEMNLElasticMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMNLElasticMaterialsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMNLElasticStrainStressFields(FEMNLElasticStrainStressFields fields, String[] fieldNames)
    {
        setFEMNLElasticStrainStressFields(fields, fieldNames, null, false);
    }

    public void
    setFEMNLElasticStrainStressFields(FEMNLElasticStrainStressFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMNLElasticStrainStressFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMNLElasticStrainStressFields(FEMNLElasticStrainStressFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMNLElasticStrainStressFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMNMTimeMassFields(FEMNMTimeMassFields fields, String[] fieldNames)
    {
        setFEMNMTimeMassFields(fields, fieldNames, null, false);
    }

    public void
    setFEMNMTimeMassFields(FEMNMTimeMassFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMNMTimeMassFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMNMTimeMassFields(FEMNMTimeMassFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMNMTimeMassFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMNTNContactFields(FEMNTNContactFields fields, String[] fieldNames)
    {
        setFEMNTNContactFields(fields, fieldNames, null, false);
    }

    public void
    setFEMNTNContactFields(FEMNTNContactFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMNTNContactFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMNTNContactFields(FEMNTNContactFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMNTNContactFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMNodalMassFields(FEMNodalMassFields fields, String[] fieldNames)
    {
        setFEMNodalMassFields(fields, fieldNames, null, false);
    }

    public void
    setFEMNodalMassFields(FEMNodalMassFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMNodalMassFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMNodalMassFields(FEMNodalMassFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMNodalMassFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMNodeFields(FEMNodeFields fields, String[] fieldNames)
    {
        setFEMNodeFields(fields, fieldNames, null, false);
    }

    public void
    setFEMNodeFields(FEMNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMNodeFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMNodeFields(FEMNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMNodeFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMOrthotropicMaterialFields(FEMOrthotropicMaterialFields fields, String[] fieldNames)
    {
        setFEMOrthotropicMaterialFields(fields, fieldNames, null, false);
    }

    public void
    setFEMOrthotropicMaterialFields(FEMOrthotropicMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMOrthotropicMaterialFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMOrthotropicMaterialFields(FEMOrthotropicMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMOrthotropicMaterialFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMPlasticBilinearMaterialFields(FEMPlasticBilinearMaterialFields fields, String[] fieldNames)
    {
        setFEMPlasticBilinearMaterialFields(fields, fieldNames, null, false);
    }

    public void
    setFEMPlasticBilinearMaterialFields(FEMPlasticBilinearMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMPlasticBilinearMaterialFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMPlasticBilinearMaterialFields(FEMPlasticBilinearMaterialFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMPlasticBilinearMaterialFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMPlasticMlMaterialsFields(FEMPlasticMlMaterialsFields fields, String[] fieldNames)
    {
        setFEMPlasticMlMaterialsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMPlasticMlMaterialsFields(FEMPlasticMlMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMPlasticMlMaterialsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMPlasticMlMaterialsFields(FEMPlasticMlMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMPlasticMlMaterialsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMPlasticStrainStressFields(FEMPlasticStrainStressFields fields, String[] fieldNames)
    {
        setFEMPlasticStrainStressFields(fields, fieldNames, null, false);
    }

    public void
    setFEMPlasticStrainStressFields(FEMPlasticStrainStressFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMPlasticStrainStressFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMPlasticStrainStressFields(FEMPlasticStrainStressFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMPlasticStrainStressFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMPlateFields(FEMPlateFields fields, String[] fieldNames)
    {
        setFEMPlateFields(fields, fieldNames, null, false);
    }

    public void
    setFEMPlateFields(FEMPlateFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMPlateFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMPlateFields(FEMPlateFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMPlateFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMPlateGroupFields(FEMPlateGroupFields fields, String[] fieldNames)
    {
        setFEMPlateGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMPlateGroupFields(FEMPlateGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMPlateGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMPlateGroupFields(FEMPlateGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMPlateGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMPointsFields(FEMPointsFields fields, String[] fieldNames)
    {
        setFEMPointsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMPointsFields(FEMPointsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMPointsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMPointsFields(FEMPointsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMPointsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMPropertiesFields(FEMPropertiesFields fields, String[] fieldNames)
    {
        setFEMPropertiesFields(fields, fieldNames, null, false);
    }

    public void
    setFEMPropertiesFields(FEMPropertiesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMPropertiesFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMPropertiesFields(FEMPropertiesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMPropertiesFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMPropertysetsFields(FEMPropertysetsFields fields, String[] fieldNames)
    {
        setFEMPropertysetsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMPropertysetsFields(FEMPropertysetsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMPropertysetsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMPropertysetsFields(FEMPropertysetsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMPropertysetsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSectionBoxFields(FEMSectionBoxFields fields, String[] fieldNames)
    {
        setFEMSectionBoxFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSectionBoxFields(FEMSectionBoxFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSectionBoxFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSectionBoxFields(FEMSectionBoxFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSectionBoxFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSectionIFields(FEMSectionIFields fields, String[] fieldNames)
    {
        setFEMSectionIFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSectionIFields(FEMSectionIFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSectionIFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSectionIFields(FEMSectionIFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSectionIFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSectionPipeFields(FEMSectionPipeFields fields, String[] fieldNames)
    {
        setFEMSectionPipeFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSectionPipeFields(FEMSectionPipeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSectionPipeFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSectionPipeFields(FEMSectionPipeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSectionPipeFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSectionPropFields(FEMSectionPropFields fields, String[] fieldNames)
    {
        setFEMSectionPropFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSectionPropFields(FEMSectionPropFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSectionPropFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSectionPropFields(FEMSectionPropFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSectionPropFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSectionRectFields(FEMSectionRectFields fields, String[] fieldNames)
    {
        setFEMSectionRectFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSectionRectFields(FEMSectionRectFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSectionRectFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSectionRectFields(FEMSectionRectFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSectionRectFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMShellAxesOrthoDataFields(FEMShellAxesOrthoDataFields fields, String[] fieldNames)
    {
        setFEMShellAxesOrthoDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMShellAxesOrthoDataFields(FEMShellAxesOrthoDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMShellAxesOrthoDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMShellAxesOrthoDataFields(FEMShellAxesOrthoDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMShellAxesOrthoDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMShellAxesOrthoFields(FEMShellAxesOrthoFields fields, String[] fieldNames)
    {
        setFEMShellAxesOrthoFields(fields, fieldNames, null, false);
    }

    public void
    setFEMShellAxesOrthoFields(FEMShellAxesOrthoFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMShellAxesOrthoFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMShellAxesOrthoFields(FEMShellAxesOrthoFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMShellAxesOrthoFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMShellDOFFields(FEMShellDOFFields fields, String[] fieldNames)
    {
        setFEMShellDOFFields(fields, fieldNames, null, false);
    }

    public void
    setFEMShellDOFFields(FEMShellDOFFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMShellDOFFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMShellDOFFields(FEMShellDOFFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMShellDOFFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMShellFields(FEMShellFields fields, String[] fieldNames)
    {
        setFEMShellFields(fields, fieldNames, null, false);
    }

    public void
    setFEMShellFields(FEMShellFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMShellFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMShellFields(FEMShellFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMShellFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMShellGroupFields(FEMShellGroupFields fields, String[] fieldNames)
    {
        setFEMShellGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMShellGroupFields(FEMShellGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMShellGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMShellGroupFields(FEMShellGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMShellGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMShellLayerFields(FEMShellLayerFields fields, String[] fieldNames)
    {
        setFEMShellLayerFields(fields, fieldNames, null, false);
    }

    public void
    setFEMShellLayerFields(FEMShellLayerFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMShellLayerFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMShellLayerFields(FEMShellLayerFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMShellLayerFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMShellPressureFields(FEMShellPressureFields fields, String[] fieldNames)
    {
        setFEMShellPressureFields(fields, fieldNames, null, false);
    }

    public void
    setFEMShellPressureFields(FEMShellPressureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMShellPressureFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMShellPressureFields(FEMShellPressureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMShellPressureFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSkewDOFFields(FEMSkewDOFFields fields, String[] fieldNames)
    {
        setFEMSkewDOFFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSkewDOFFields(FEMSkewDOFFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSkewDOFFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSkewDOFFields(FEMSkewDOFFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSkewDOFFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSkewSysAnglesFields(FEMSkewSysAnglesFields fields, String[] fieldNames)
    {
        setFEMSkewSysAnglesFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSkewSysAnglesFields(FEMSkewSysAnglesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSkewSysAnglesFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSkewSysAnglesFields(FEMSkewSysAnglesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSkewSysAnglesFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSkeySysNodeFields(FEMSkeySysNodeFields fields, String[] fieldNames)
    {
        setFEMSkeySysNodeFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSkeySysNodeFields(FEMSkeySysNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSkeySysNodeFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSkeySysNodeFields(FEMSkeySysNodeFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSkeySysNodeFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSpringFields(FEMSpringFields fields, String[] fieldNames)
    {
        setFEMSpringFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSpringFields(FEMSpringFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSpringFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSpringFields(FEMSpringFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSpringFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMSpringGroupFields(FEMSpringGroupFields fields, String[] fieldNames)
    {
        setFEMSpringGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMSpringGroupFields(FEMSpringGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMSpringGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMSpringGroupFields(FEMSpringGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMSpringGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMStrLinesFields(FEMStrLinesFields fields, String[] fieldNames)
    {
        setFEMStrLinesFields(fields, fieldNames, null, false);
    }

    public void
    setFEMStrLinesFields(FEMStrLinesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMStrLinesFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMStrLinesFields(FEMStrLinesFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMStrLinesFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMThermoIsoDataFields(FEMThermoIsoDataFields fields, String[] fieldNames)
    {
        setFEMThermoIsoDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMThermoIsoDataFields(FEMThermoIsoDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMThermoIsoDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMThermoIsoDataFields(FEMThermoIsoDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMThermoIsoDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMThermoIsoMaterialsFields(FEMThermoIsoMaterialsFields fields, String[] fieldNames)
    {
        setFEMThermoIsoMaterialsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMThermoIsoMaterialsFields(FEMThermoIsoMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMThermoIsoMaterialsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMThermoIsoMaterialsFields(FEMThermoIsoMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMThermoIsoMaterialsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMThermoOrthDataFields(FEMThermoOrthDataFields fields, String[] fieldNames)
    {
        setFEMThermoOrthDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMThermoOrthDataFields(FEMThermoOrthDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMThermoOrthDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMThermoOrthDataFields(FEMThermoOrthDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMThermoOrthDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMThermoOrthMaterialsFields(FEMThermoOrthMaterialsFields fields, String[] fieldNames)
    {
        setFEMThermoOrthMaterialsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMThermoOrthMaterialsFields(FEMThermoOrthMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMThermoOrthMaterialsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMThermoOrthMaterialsFields(FEMThermoOrthMaterialsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMThermoOrthMaterialsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMThreeDSolidFields(FEMThreeDSolidFields fields, String[] fieldNames)
    {
        setFEMThreeDSolidFields(fields, fieldNames, null, false);
    }

    public void
    setFEMThreeDSolidFields(FEMThreeDSolidFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMThreeDSolidFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMThreeDSolidFields(FEMThreeDSolidFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMThreeDSolidFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMThreeDSolidGroupFields(FEMThreeDSolidGroupFields fields, String[] fieldNames)
    {
        setFEMThreeDSolidGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMThreeDSolidGroupFields(FEMThreeDSolidGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMThreeDSolidGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMThreeDSolidGroupFields(FEMThreeDSolidGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMThreeDSolidGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMTimeFunctionDataFields(FEMTimeFunctionDataFields fields, String[] fieldNames)
    {
        setFEMTimeFunctionDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMTimeFunctionDataFields(FEMTimeFunctionDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMTimeFunctionDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMTimeFunctionDataFields(FEMTimeFunctionDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMTimeFunctionDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMTimeFunctionsFields(FEMTimeFunctionsFields fields, String[] fieldNames)
    {
        setFEMTimeFunctionsFields(fields, fieldNames, null, false);
    }

    public void
    setFEMTimeFunctionsFields(FEMTimeFunctionsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMTimeFunctionsFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMTimeFunctionsFields(FEMTimeFunctionsFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMTimeFunctionsFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMTrussFields(FEMTrussFields fields, String[] fieldNames)
    {
        setFEMTrussFields(fields, fieldNames, null, false);
    }

    public void
    setFEMTrussFields(FEMTrussFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMTrussFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMTrussFields(FEMTrussFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMTrussFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMTrussGroupFields(FEMTrussGroupFields fields, String[] fieldNames)
    {
        setFEMTrussGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMTrussGroupFields(FEMTrussGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMTrussGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMTrussGroupFields(FEMTrussGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMTrussGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMTwistMomentDataFields(FEMTwistMomentDataFields fields, String[] fieldNames)
    {
        setFEMTwistMomentDataFields(fields, fieldNames, null, false);
    }

    public void
    setFEMTwistMomentDataFields(FEMTwistMomentDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMTwistMomentDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMTwistMomentDataFields(FEMTwistMomentDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMTwistMomentDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMTwoDSolidFields(FEMTwoDSolidFields fields, String[] fieldNames)
    {
        setFEMTwoDSolidFields(fields, fieldNames, null, false);
    }

    public void
    setFEMTwoDSolidFields(FEMTwoDSolidFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMTwoDSolidFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMTwoDSolidFields(FEMTwoDSolidFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMTwoDSolidFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setFEMTwoDSolidGroupFields(FEMTwoDSolidGroupFields fields, String[] fieldNames)
    {
        setFEMTwoDSolidGroupFields(fields, fieldNames, null, false);
    }

    public void
    setFEMTwoDSolidGroupFields(FEMTwoDSolidGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setFEMTwoDSolidGroupFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setFEMTwoDSolidGroupFields(FEMTwoDSolidGroupFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setFEMTwoDSolidGroupFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setMappingMatrixFields(MappingMatrixFields fields, String[] fieldNames)
    {
        setMappingMatrixFields(fields, fieldNames, null, false);
    }

    public void
    setMappingMatrixFields(MappingMatrixFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setMappingMatrixFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setMappingMatrixFields(MappingMatrixFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setMappingMatrixFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setSensorFields(SensorFields fields, String[] fieldNames)
    {
        setSensorFields(fields, fieldNames, null, false);
    }

    public void
    setSensorFields(SensorFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setSensorFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setSensorFields(SensorFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setSensorFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setSensorTimeDataFields(SensorTimeDataFields fields, String[] fieldNames)
    {
        setSensorTimeDataFields(fields, fieldNames, null, false);
    }

    public void
    setSensorTimeDataFields(SensorTimeDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setSensorTimeDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setSensorTimeDataFields(SensorTimeDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setSensorTimeDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setStructureFields(StructureFields fields, String[] fieldNames)
    {
        setStructureFields(fields, fieldNames, null, false);
    }

    public void
    setStructureFields(StructureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setStructureFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setStructureFields(StructureFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setStructureFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTransducerCycleDataFields(TransducerCycleDataFields fields, String[] fieldNames)
    {
        setTransducerCycleDataFields(fields, fieldNames, null, false);
    }

    public void
    setTransducerCycleDataFields(TransducerCycleDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setTransducerCycleDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTransducerCycleDataFields(TransducerCycleDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setTransducerCycleDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTransducerFields(TransducerFields fields, String[] fieldNames)
    {
        setTransducerFields(fields, fieldNames, null, false);
    }

    public void
    setTransducerFields(TransducerFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setTransducerFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTransducerFields(TransducerFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setTransducerFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public void
    setTransducerTimeDataFields(TransducerTimeDataFields fields, String[] fieldNames)
    {
        setTransducerTimeDataFields(fields, fieldNames, null, false);
    }

    public void
    setTransducerTimeDataFields(TransducerTimeDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx)
    {
        setTransducerTimeDataFields(fields, fieldNames, __ctx, true);
    }

    @SuppressWarnings("unchecked")
    private void
    setTransducerTimeDataFields(TransducerTimeDataFields fields, String[] fieldNames, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SenStoreMngrDel __del = (_SenStoreMngrDel)__delBase;
                __del.setTransducerTimeDataFields(fields, fieldNames, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    public static SenStoreMngrPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        SenStoreMngrPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (SenStoreMngrPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::SenStore::SenStoreMngr"))
                {
                    SenStoreMngrPrxHelper __h = new SenStoreMngrPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SenStoreMngrPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SenStoreMngrPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (SenStoreMngrPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::SenStore::SenStoreMngr", __ctx))
                {
                    SenStoreMngrPrxHelper __h = new SenStoreMngrPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SenStoreMngrPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SenStoreMngrPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::SenStore::SenStoreMngr"))
                {
                    SenStoreMngrPrxHelper __h = new SenStoreMngrPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SenStoreMngrPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SenStoreMngrPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::SenStore::SenStoreMngr", __ctx))
                {
                    SenStoreMngrPrxHelper __h = new SenStoreMngrPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SenStoreMngrPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        SenStoreMngrPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (SenStoreMngrPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                SenStoreMngrPrxHelper __h = new SenStoreMngrPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SenStoreMngrPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SenStoreMngrPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SenStoreMngrPrxHelper __h = new SenStoreMngrPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _SenStoreMngrDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _SenStoreMngrDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, SenStoreMngrPrx v)
    {
        __os.writeProxy(v);
    }

    public static SenStoreMngrPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SenStoreMngrPrxHelper result = new SenStoreMngrPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
